okay hi everybody this is Professor Professor Anonymous, the instructor for the class. Let me see if somebody let me know if you're hearing me Okay, and you should be able to see the presentation deck as well. I'm sharing that can hear you fine and can definitely see the PowerPoint. Oh good. Okay, thank you. Thanks so much. Okay, a few folks are still joining here. So I'll allow for another couple of minutes here before we get started. Okay, I think we got we got a few more people, okay, this Okay, let's go ahead and get started. So hey welcome the CSD 332 I hope the whole COVID College zoom experiences is going well for you. And you know, we kind of did this I did this last spring as well, at least part of a course was was just a totally online. And then I've got two sons that are in college, one at Purdue and one at Stanford and a little bit different experience. I mean, they went to Purdue produce the kind of hybrid all all year, where if some classes in person, and then, you know, some, some remote, but basically everybody's on campus. And then Stanford, Stanford has been totally remote. Or he's a well for the he's a sophomore. So for the freshman and sophomore, they've been totally remote. So anyway, hopefully everything will be kind of back to normal in the in the fall, and we can see each other again. So anyway, let's go ahead and get started. And I'll tell you a little bit about the course here. Okay, so today, tonight, you know, go over to some of the administrative details for the class, and then just spend a little time just telling you a little bit about my, my background, and some of the projects that I've worked on. And then we'll kind of get into software project management and introducing the the classes and what we're going to be focused on for the next every 10 lessons. And then I'll introduce the Lean Startup model, which is kind of what we're gonna, we're gonna lead off with, which is kind of the front end that you know, if you're doing a software development project, and depending on the type of projects you're doing, the Lean Startup model could be a very helpful way to, to get going and make sure you're going to be developing a product that that people want. And then for tonight, we'll focus a lot of energy on market opportunity navigator, which is really kind of a new toolkit of it's kind of the front end of the lean startups, model, whatever. So kind of a Lean Startup model opinion was developed, oh, I don't know about 15 years ago. And then more recently, the this market opportunity navigator has been developed and it's it kind of helped me figure out well, say you have some underlying underlying capability or technology, what are the best markets to apply that, that technology and and so we'll spend a lot Tonight kind of walking through, you know, how you could use that if you're developing, you know, a new new business. And then at the end of the class tonight, we'll talk about the class project, which will be kind of used to reinforce some of the course concepts and are going to learn in the next 10 lessons. Okay. Okay, so let's talk about there's administrative details in the course length 10 weeks, we'll be doing these online sessions from six to 8:50pm. And typically, you know, whether the class was in person, or remote, I mean, you need a break at the end more more of a break, when there would be zoom session, this is what is in class, it's a little more easier for me to be interactive, you know, and ask questions, and you know, and it's not just me lecturing, and then also, normally, what I try to do is to have time in class for some project work. So that's a way to break it up, you know, break up the three hours. So anyway, we'll try to find a convenient time, we just take a break, you know, and whether it's like 10 minutes, 15 minutes, and then get back, get back at it. For the for the readings, the readings will all be PDFs. That'll be part of the canvas module for that particular lesson. And ideally, you would have read those before the lecture, and then I'm kind of reinforcing, you know, what you've already reinforcing and expanding upon what you've already read. You know, with this class, in particular, it doesn't lend itself to one textbook, I mean, we're going to be talking about agile methodologies. And one of those is like Scrum. Another is con bond. Another is extreme programming. Well, there are books on each one of those, you know, types of software development methodologies, and then we'll be talking about traditional software development. And there are books, you know, that are out there on that, or whatever. So as we go through, so all have kind of publicly available material in a PDF format, that basically describes, you know, whatever that particular area is, like Scrum, there's an organization, you know, basically have training materials are publicly available on on that particular agile methodology. And so that's what you'll have as a PDF. But as I go through the class, they're also the kind of books that you know, I can reference for you. So if it's like an areas of interest, you know, you could dive in deeper if you wanted to pick up, you know, a book in that in that area. But this is keeps it a little, you know, it's not as expensive. And I think we get, you know, if not 100% of the way there 90% of the of what you need, really to, to get the concepts. So anyway, a PDF readings that are be tied to each lesson in Canvas. And then, again, for the in class session, I do kind of frequent knowledge checks. Just say, hey, just to make sure like we go through a section, and then kind of ask some questions and see if everybody's kind of getting, you know, the material. And if not, then I guess spend a little bit more time on it or whatever, haven't really found a great way to do that with zoom, I may do some live polling, you know, and, and then you guys will respond within like an answer to a question. And then based on how everybody's doing on the polling, I get the same, same idea, I'm not going to do that, for less than one. So, so that won't happen to this lesson. But I may use that for the other lesses as the same same kind of idea behind the knowledge checks, just to make sure you guys are getting the material. And then, as I mentioned, you will have a class project. And we'll talk about that a little bit later in the class. So here are the objectives, you know, understand the software development lifecycle and some of the software development methodologies. They're used throughout the software development lifecycle, understand lean, the Lean Startup methodology, this is something that it's it's geared towards startup, like I say, you know, some of your classmates you get off he want to start a company, you know, some type of a software product, you can use it for that, but also companies you know, they're doing something new is relevant for you know, for, to use within a large company as well. But you don't have to be a small company for it to be relevant, or at a small company for to be relevant. So Some of the software development methodologies we'll talk about are you know, waterfall agile Scrum con mon XP will, you know, you'll get the flavor of how to create and document software requirements with those different development methodologies, and then we'll talk have a couple of lessons on cloud computing in the DevOps development model. So for a lot of you that are, you know, if you stay in the Seattle area, and you go work, you know, in an Amazon or Microsoft or another company, you may find that, you know, they have some existing software, there's kind of a software pipeline that's developed to develop new code and then get that integrated and tested and then out in a production environment. And so we'll talk about kind of how that process works and, and some of the tools that are used there. And then, at the end of the class, talk about, you know, developing high quality software, risk mitigation, code security, release management. And, you know, that'll kind of be tied into some classes or lessons on traditional software development, at the end of the class at the end of the, of the course. And then, you know, you'll get theoretical and practical experience with rapid prototyping, typing tied to the to the class project. Okay, for assessment methods, homeworks 25%, for homework assignments, and those will basically be online quizzes that you'll take, and they'll be geared towards, you know, the, the lesson. So like, the first one's tied to lesson one and two, in the second one side, the you know, three and four, and so on like that. Two major exams, the midterm on lesson five, and then the final on lesson 10, you know, with a large chunk of the course tied up in those two exams, and then the class project will be 25%. And then 5%, for class participation, attendance and knowledge checks. And so, attendance is pretty straightforward. And, you know, one of the things I would ask is, if you could, I mean, it's always good, even if it's in person, obviously, to try to be on time. But it's even more important with these zoom sessions, because what I'll do is before, typically, you know, before, opening it up, and allowing everybody to enter, kind of doing a quick attendance. And if people are kind of coming in, you know, piecemeal and after 6pm, it's just, it's hard to get attendance. I appreciate it if you guys could join the zoom session, at least a couple of minutes before six every week. Okay, just a little bit about background on me. So just from an education standpoint, I got a Bachelor's in engineering from United States Air Force Academy, and served in the Air Force for us seven years. And then I got a master's in engineering, an MBA from MIT. So MBAs a business degree and a master's in science and engineering at MIT engineering school. And then some very, very professional experience. So right now I'm at an AV technology startup. And I'll tell you a little bit more about that here, a couple slides. And then I spent 13 years at Microsoft in kind of engineering General Manager roles for several different types of products, and I'll talk about that. And then I worked in the wireless telecommunications industry was based on space based Telecom, though, so for mobile telephony, as well as broadband communications. So I know some of you may be following what SpaceX is doing with a project called starlink, which is going to be a broadband system space based broadband system. I worked on a similar concept A number of years ago, and that was in the Air Force captain in the airforce supporting an organization called the National Reconnaissance Office. So launching satellites for for the NRO. So what I'm doing right now, AV startup, so we've got a new type of sensor technology. And I don't know if you're following what's happening in the self driving car space, but there's a lot of investment in this in this space. And it's a tough problem. You know, I mean, you've got to have obviously very good software, I mean, amazing they software, they can handle all different types of situations, you know, all different types of weather circumstances. And then for that software to perform well, it's got to have great sensors, you know, and so we, we have a sensor technology is based on radar technology. So it operates at, like, 77 gigahertz frequency. And then there's other sensors like LIDAR, computer vision, and really, you know, for these systems to be successful and get to what's known as like level three, four or five autonomy, you know, which what, which is what would be needed for to be widespread adoption, you got to have really good software, a really good sensors and have sensor fusion, where, you know, you'll take some sensor responses, say, from LIDAR, combine that with computer vision and radar, and that allows the software to make a better decision. So we've got a sensor that's on, you can see it up on this car here. That's our our sensor called echo drive. And it's basically in a prototype stage and being used by several manufacturers to gather test data. And then our sensor can fly on airborne platforms as well. So this is an example of a larger ua v. Again, it would be the autonomous mission in this particular project that we are part of, it was for linear inspections. So you know, for like railways or gas lines or power utilities, some some have regulatory requirements just for safety. So saves like an oil line, to inspect that frequently. Because you know, you don't want to have a problem, say a leak, that could have been prevented if you have more frequent inspections. So there's actually a lot of regulatory requirements for these companies to inspect their infrastructure. And that can be somewhat Time, time consuming and expensive. And so one of the uses of ua V's is to send these platforms down, say I don't an oil pipeline, and then it would have sensors on it that are basically inspecting the pipeline. And that's not our purpose of our sensor, our sensor is to allow the aircraft to fly safely, but not to run into anything is performing its mission. So it's got some, you know, trajectory, where it's gonna fly along this pipeline above it, and image that pipeline. And then our radar sensors, you know, are sending out energy looking for potential objects, just Hey, I got helicopters flying in the area. And if that's happening, then, you know, the aircraft could maneuver and avoid collision. But anyway, a lot of interesting things happening potentially, with ua V's, I mean, you guys are probably familiar that Amazon, you know, wants to deliver packages to your backyard in 30 minutes or less. And they, you know, they've got a program that's been underway for many years, you know, to do that, and, and I have no doubt, you know, they will one day, you know, be successful. I mean, they've got the resources, and then got really smart people, and they'll be able to figure out, you know how to do that. So, in the next five years, you know, you're gonna see more and more autonomous systems where the self driving cars, trucks or aircraft that are, you know, that are going to be in production. At Microsoft, I worked in the early stages of Microsoft Azure, which is the company's cloud computing platform. At that point in time, this is the early early days of Azure. We were moving our own internal applications onto the cloud and trying to figure out, Okay, how to do that, how to migrate those applications. And then we're developing some net new, you know, just cloud based applications, using the platform as a service. So level, that was one of the roles that the team and then I worked in, Unified Communications Group and Microsoft, which at that time, was developing an ERP software protocol link. And we were providing video elements to you know, it's a link. So now, let's go through many, many name changes, you know, it actually started out as like office communicator, went to link, then Skype was acquired with the Skype and now the company is kind of putting everything around teams, you know, which is the slack competitor. And so a lot of that kind of code stuff. Some of the video elements within teams, you know, my team worked on. And then I started off working on a variety of hardware products, consumer electronic products at Microsoft. So we had, you know, mice keyboards, gaming peripherals, we did desktop gaming peripherals, but also Xbox peripherals, different Wi Fi broadband routers, and, you know, they had a whole variety of different products that we developed. And then, as I also mentioned, I worked in wireless telecommunications, and then supported the National Reconnaissance Office, when I was in the Air Force show, that people were kind of on and on about my background, but just want to kind of give you a sense of kind of where where I come from. Okay, so now let's get into just an intro to software, project management. And, you know, almost any any product that you're developing, whether it's software or you know, a hardware product, you kind of go through these phases, you know, a planning that happens, where you're deciding, if you're going to do something, and you know, what you're going to do and what that market looks like, and then you know, you've got the capabilities and the resources to be able to do that. And then ultimately, you get to a decision where you decide, yeah, either we're gonna do something or not, if you're going to do something, then you get into this next phase of analysis, where you're trying to define, okay, what are the requirements that we need to satisfy in order to be successful, and so, you know, it tends to be a lot of customer engagement, to kind of figure out, make sure that you're defining those requirements and understanding the needs and pain points that customers have. And then, you know, with that understanding, then you get in the design phase are kind of figuring out, okay, well, you know, what's the design and your product and look like, and then after you've got that nailed down into the implementation, and the you have this cycle, whether you do like a waterfall approach, or an agile approach, you know, if it's waterfall, then these boxes can be, you know, one sequential step after another, you know, and you don't go backwards. With an agile based approach, you kind of do these for like a sprint, and then you do another sprint, and you kind of start all over again, and you kind of work your way around this cycle. But you know, you gotta gotta go through these steps, whether it's a linear sequential waterfall approach, or a more agile methodologies that you're using. And, you know, why do you why you're, why have a formal process? Well, you know, unless you're developing a piece of software, that's really, really simple. You know, the complexity of some of these larger software products is very high. And so this process, I mean, the whole role process is to help you and help you be successful. And if you don't use a process, you typically have a, you know, a failures, you know, even if people are using a process, you have you have failures, people that are not using any process at all, it tends to be rather, you know, chaotic, because the systems get complex, and it's not necessarily intuitive, okay, what what needs to happen for the product to be successful. And so over time, you know, we found that projects are laid over budget, or deliver with the wrong capabilities. And the whole idea behind some type of software development process is to reduce that, you know, improve the odds that you're going to develop what the customer wants, on time, you know, and on budget. So what are some, you know, kind of common causes of failures? Well, you know, big one can be insufficient and user involvement. You know, this is kind of the idea of somebody, you know, you get together, you and your partner say it was a startup, and you got this great idea, you know, for some new business, some new product, and you kind of you're talking to each other and you're convincing yourself that you've got something that's just magical, you know, everybody's going to love it, but you really haven't gotten now, you know, and kind of talk into 10 customers. And so you may go through a lot of effort, you know, launch something and find out, you know, nobody wants it. Nobody's nobody's interested in that. So, that's a common problem, you know, and it seems obvious, you know, but you know, when you're excited about something, it starts to get some momentum for whatever Reason, you know, people don't think they need to talk to customers or they are insufficient, you know, they talk to some customers, and those customers tell you what you want to hear. But you haven't really gone out broadly enough, you know, to get to get the feedback. Another, you know, reason could just be poor communication, not just customers, but internally within the team. So especially for larger software development projects, you know, they're complex. And so when your teams are responsible for different parts of the solution, is sometimes those interfaces aren't really defined well, and there's not, you know, good enough communication. And so when you go to integrate, you know, there, there are problems. You know, sometimes you don't estimate the resources that are needed, especially, you know, if you're doing kind of a waterfall approach, or Big Bang approach, where it's like, okay, we're gonna do this whole big application, and we're going to do all the requirements for right out of the gate or whatever. And then we're going to simultaneously work on all the aspects of that application. In parallel, it can be hard sometimes to know how many resources that you need. And so sometimes you kind of get into it and go, wow, you know, we don't have we don't have enough resources to do this. And that can be when you know, project start to slip. You know, one of the benefits of an agile approach is you take bite size, you know, pieces that you're working on. And so those tend to be a little easier to kind of estimate around. So anyway, there's, there's a whole lot of reasons why projects, fail, software projects, and projects in general fail. And these are some of the reasons and the processes that we'll talk about, you know, can help mitigate and reduce those failures. So some of the software development methodology we'll talk about are either structure development, waterfall, which really, you know, when software development is first getting started, there was not a really a process, model or use. And so what was leveraged with Rosie, what was being used in manufacturing construction? And so you imagine, let's say you're building a bridge, you know, they were like, you know, building the 520 bridge? Well, you know, you would use like a waterfall approach. I mean, there's no, you know, it's not software, it's something that requires, you know, changes are very, very expensive, and hard to accommodate. And so, you know, they had a process that was geared towards a building a bridge or a building, and then that was applied to software development. And it's still being used in many places today. And then agile development, you know, with evolved to have basically, you know, more working on smaller pieces of the code, developing something that's shippable, but then adding functionality on with each new release. So you kind of peel that complexity, or add on that complexity, one layer at a time. And so examples that we'll talk about are extreme programming, Scrum Kanban. So, you know, your waterfall, basically, you know, you start requirements, nail those go to design, implementation verification, and then, you know, once you're released in into maintenance, and, you know, advantages, or you have a lot of good up front planning, because you spend a lot of time on developing the requirements. And if those are nailed, I mean, if you actually define those, well, and they're not subject to a lot of change, then it becomes predictable for the development team. So you know, they know what they've got to do, and then they can go execute against that. The disadvantage is, it can take a long, long time before coding begins, because all this development of requirements and writing documentation and, you know, the design development, you know, is all happening before any coding starts, you know, another problem that we'll talk about is that, especially with software projects, you know, the customer doesn't always know, I mean, typically, they don't know what they want, they think they know, you know, but as time goes on their understanding of, you know, what they want the product changes. And so, in a lot of cases, the waterfall approach is a, you know, you get this false sense of security that hey, we breach baseline and the requirements are defined. Because they're gonna, they're gonna change you know, that the customer doesn't know what they want. And so, you know, this approach can be used where requirements are You know, are is easier to define them. And there's, in cases where there's a project where there's less chance of change, that could be a perfectly fine methodology to use. But in a lot of cases, you know, where the customer's requirements change as they see what you're developing, it's not as good a model. So a lot of people started way back when, you know, in the 80s, people were recognizing and waterfall was really working as well, you know, just relay approaches. So they want to go to this rugby approach where, you know, the balls pass back and forth, you know, between the players as they move down the field is more iterative. And, and then after that, a group of kind of leaders in the industry got together and developed these Agile Manifesto. And basically, they were, they were identifying as problems that they saw, you know, with waterfall development. And then they came up with this Manifesto, which basically said, Hey, we're gonna value getting people together, you know, smart people together and having them talk one on one over process and tools. So it's better to get people talking, it's better to get working software over having a stack of documentation, it's better to talk to a customer, you know, versus having contract negotiations that well, you know, we got the baseline, and you said, This is what you wanted. And that's what we delivered, you know, when the customer really, you know, what their understanding of what was being defined in the requirements, you know, varies as they start to see the product mature. And then you know, they value responding to change over following a plan. So being a little bit more nimble in responding to changes that happen. That's the idea behind all the different kinds of agile methodologies we'll talk about is valuing, you know, these things on the left, it's not to say that there I said, there's not process and tools, or that there's no documentation, or you can't have any plan whatsoever, it's just saying, you know, the left side is more important or valued more than the right side. And, you know, in less than three, we'll talk a lot about Scrum. But this is kind of the sprint process flow, you know, we're sprints can typically be like a week to four weeks in length. And they start up here, you know, where you have a product backlog. And then you pull in certain items from the product backlog, and you do something called sprint planning. And you come up with your sprint backlog. This is basically Hey, this is what we're gonna do for this sprint. And then you start to execute it, you know, in developing the code and testing, you know, the software. And you have this daily Scrum, where you get together every day and kind of talk about how it's going, Hey, what do we do, each person says, Hey, here's what I did, you know, yesterday, here's what I'm doing today. And if they're blocked in some way, they let the team know, you know about that, so that they can get help getting unblocked. And then they get this, you know, potentially shippable product increment, you know, which is a piece of code that's, you know, working, that could be then go to a sprint review and demonstrate it to a customer. And then the customer provides feedback on what they're seeing. And then, you know, so you could take that into the next, you know, sprint to, you know, adapt. And then there's also the Sprint Retrospective where the team focuses on how they're performing as a team, and you know, what they need to do to kind of improve, you know, and get and get better over time. So the sprint review is more externally focused, you know, talking to customers to make sure that the externally focus and product focus, the Sprint Retrospective, is more internally focused, like, how is our process working as a team? What can we do to, you know, to be better? So anyway, that's Scrum. You know, we'll talk about that in a lot of detail in lesson three, Extreme Programming is another agile approach, and what Extreme Programming is known for a lot of these key practices down here, so they were very early to come up with the idea of test driven development, you know, and I saw a lot of this, you know, when I was at Microsoft, where a developer would, for whatever reason, you know, based on the training at that time, didn't feel that they were really responsible for testing the product. So they did develop some code and kind of throw it over the wall, to the test team, you know, to then find the bugs, you know, if there were any in that particular code. And so the developer, you know, kind of felt like they were off the hook, you know, testing was beneath them, you know, The whole idea behind test driven development, no, you know, what unit test is? No, you're responsible to developer for the quality of your code. And you start thinking about, okay, how am I going to be even before you develop the code? How am I going to develop high quality code? How am I going to test for that, and that's the whole idea behind TDD and unit test. Another concept with pair programming of working, you know, side by side with someone where, you know, somebody is driving and coding and other person is kind of providing help, as that person is coding, and they switch places. And then obviously, with cloud development, and the and the DevOps model, continuous integration is huge. I mean, so it used to be, maybe you would integrate code, separate streams or code every month, you know, now, it's happening many, many times a day, you know, companies like Google, Microsoft, Amazon refactorings, are going in and making your code better and better, you're not waiting for the code to become brittle and break. It's like, if you see a problem, you go in and you fix it, you know, it's a kind of constant refactoring. And then they have this idea, like, no overtime. So you know, rather than having these force marches for development teams, you know, where everybody gets burnt out, it's like trying to maintain, you know, a normal pace and normal rhythm. Anyway, I mean, this goes back 20 years, whatever. But a lot of these, you know, key practices, you'll find alive and well. And so anyway, we talked when we get into the cloud computing, section six, lesson six, and seven, you know, we'll talk more about Extreme Programming. Okay, so now let's talk about the lean startup. In this kind of goes back, I'm going to play a little video from a guy named Steve Blank, who developed this, basically, this concept, you know, go back to 2003, he wrote this book, the four steps to the epiphany. And then there's a series of other books. But c blank was kind of a godfather. And then a lot of his students came along, and it kind of added to the concept with this business model generation, the Lean Startup by Eric Rees. And then this article, blank, put this Harvard Business Review article out in 2013. And that was, you know, part of your reading here. And it kind of, for this lesson to kind of introduce the concept. So it basically see blank, he had was like a serial entrepreneur and develop many companies. And he, he just, he felt like there wasn't a very good process for startups to follow. And because of that, a lot of startups were failing. And, you know, people thought, well, that's just the way it is, you know, um, yeah, a lot of startups fail. That's just the way it is. And he felt like, Well, no, I think we could do better, you know, I think we can provide better tools to help companies, you know, be successful. And so anyway, that's what he's done. And, you know, he's developed those books, he's got courses that he teaches, you know, at Stanford, and, you know, to government agencies, basically, to try to be an evangelist for as lean startup model. And so that's what we're going to be talking about remainder of this lesson, then lesson, lesson two. So let me let me exit out a PowerPoint here. And I'll then show you a little video from Steve Blank. Shoot. Okay, so when I get this thing started, please let me know if you can hear. So I did eight startups in 21 years. Awesome in the 20th century. And the only tool I had as a founder was this thing. Anyway, recognize this says business plan. Business Plan was the book when venture capitalist said go write a plan. You kind of looked at what everybody else was doing and basically a business plan was what you thought you were going to do. And it had a great appendix, Appendix A, which had a five year forecast Surprisingly, all of them said $100 million by year five. And in fact, if you really think about it, a business plan still to today makes all the sense in the world for your second, third or fifth product in a large corporation, because you have a series of notes. But a business plan for a startup is really kind of different. Because in a startup, you don't have a series of knowns, you have mostly a series of unknowns. And this is a big idea. Because the only people in the 20th century to require a five year plan for a series of unknowns for venture capitalists than the Soviet Union. That's a joke. Okay, write that down. So one of the other things we recognized as entrepreneurs was that no business plan survives first contact with customers. Yet, this was the only tool we had. And it kind of made sense, because most venture capitalists of the last quarter of the 20th century were either MBAs or financial types. And that's what they grew up with. And what's interesting was, there was clearly no distinction between the tools of what a startup would need, versus what a large company would need. We didn't even have a language to distinguish this to. So when I retired, after doing a lot of these, I started to contemplate, you know, what worked and what didn't. And what I realized was, we never even were able to articulate something as simple as this. startups are not smaller versions of large companies. This, believe it or not, which seems like Doug was a heretical idea 16 years ago. And even more so this was heretical, large companies execute known business models, right? a large company, knows its customers knows its competitors knows its channel knows pricing. It knows that because that's how it got large. Yes, stuff will change. But yes, we're large because we know all that, and we do a great job of executing it. But here's the distinction. Startups don't execute known business models, startups search for business models. This distinction between search and execution, in the history of entrepreneurship had never been written down. If you wouldn't ask practitioners, they would have said, yeah, we know something's different. We keep getting fired, or a company keeps not working. But we don't know why. And the mistake we were making as entrepreneurs, we're assuming that everything we wrote in that plan, somehow magically translated into fact, when all we had were a series of untested hypotheses. And we were failing, because we were confusing what we should have been doing, which was searching for business models. But instead, we were executing them. And so I realized that startups needed their own tools, different from those used in existing companies. And so we came up with this idea, called the lean startup, which is simply a risk reduction methodology for early stage ventures. Nowadays, not only for startups, but inside of large companies as well, as you'll see later inside the government. And the Lean Startup has three simple components. One is, let's take all our hypotheses, who are our customers? Who are the stakeholders? Who are the regulators? What are we building for them? What are their needs? What jobs they want to get done? What pains or gains? This who is a customer? And what are you building are the two most important things in any market, you need to figure out, and it has a special name called product market fit. The mistake very bright founders make is believing that because you implicitly think you understand the problem on day one, you take some money, and you go build the solution and you ship the product. And the smarter you are, the deeper the hole you tend to dig. One of the things I learned painfully is that as smart as you are, there is no way you're smarter than the collective intelligence of your potential customers. And they don't exist inside your building. So therefore, there are no facts inside your building. So get the heck outside. We use this thing called the business model canvas by Alexander Osterwalder to kind of frame the core commercialization hypotheses. Early Stage ranchers need to worry about. It's not all of them, but it's the core customers value proposition how you gonna make money, what are your costs, what are your partner's activities, resources, etc. But then, we say you need to get out of the building and test those high policies. And by test them. I don't just mean, here's a product, do you want to buy it that's selling? I mean getting out and understanding deeply? What are the customer problems? What are their needs? And what kind of solution might actually sell them. And so not only do you talk to those customers, you build something called Minimum Viable products. Because the third piece of lean is using agile engineering, to instead of specking an entire solution, and then building it and shipping it and finding out people don't want it. You build the product incrementally and iteratively. And you continually interact with those customers trying to understand whether you're on the right track these three components, business model design, customer development, and agile engineering. Is the lean startup. Okay, sure, it's kind of the intro from Steve Blank, and we'll kind of dive into more detail into those different areas that Steve talked about. And this was kind of the front end, I mean, you might think, Well, okay, you know, how does this tie to the software development process, and we're going to get to that, but this is, you know, kind of gets you off to the right, start in developing the right product, you know, for your customers. And pretty quickly, you know, as you're out there in your careers, you know, you may be right out of the gate, and somebody's just gonna say, okay, just go code, the sand, just, you're kind of, you know, just focused on some widget that you're developing. But very quickly, you know, as you progress in your career, some of these front end things are making sure that you're developing the right product for customers are going to be become more relevant. And they're critical. I mean, they're just, they're critical, whether you're developing, you know, a follow on product, or, you know, doing a start up something brand, you know, brand new, so, trying to give you some tools that will help you to upgrade code, you know, from a software development process, but also making sure you get the product and market, right. So that's kind of the focus of lesson one. And, two, so let's get back to the, to the deck. Okay, and just, you know, check, are you guys hearing me, okay, can somebody just chime in, and let me know, where you find your seat? Okay. I mean, I'm on zoom all the time. But you know, normally it's like, interactive, you know. And so my greatest fears I've been talking for, like, 45 minutes, nobody can hear a damn thing. So just, you know, use the use the chat box to, if there's something some problem, whatever, some AV problem, and, you know, typically your my connectivity resume is pretty good, or whatever. But if I drop off, you know, maybe I lose my link all all dial back in, and we'll get back at it. Okay, so that was kind of an intro from Steve Blank. And, you know, one of the things Steve talks about is like, well, what's innovation, you know, one definition of innovation could be satisfied, satisfying users current or future wants needs by turning an idea into a product or service. That sounds pretty good. But he would go on and modify it to say, you're doing that you're doing with speed and urgency using minimal resources and costs. And, you know, if you're in a big company that's got, you know, like a Microsoft or Amazon's got a lot of resources, or you're at a startup, it's still important to kind of conserve resources, you know, you really don't want to go invest a lot too early, you know, before, you know, you're on the right trajectory. And you've got a, you know, a product that people want. And so he mentioned this concept of a minimum viable product, and we'll talk a little bit more you know about that. But anyways, you obviously you got to satisfy customers needs or wants, so you're not going to have a successful product, but you want to do it as quickly as you can, you know, and minimize resources and costs to do that. And, you know, one of the things that Steve also talks about is, you know, used to have this 20th century corporate lifestyle where you have these big companies, and they go through these phases, a shard of growth, peak decline, and they last forever, you know, and in the past, it was companies like IBM, General Electric, that are still alive, but they're kind of, you know, much smaller than they were and then there's companies like Sears, you know, a company that was, was, you know, main stream retailer, you know, for the last 100 years. And then you know that they are going into bankruptcy or whatever. And so what he says now is like from the 20th 21st century corporate life cycle is going to be a lot shorter. You know, and what is going to extend the life cycle for those companies that are successful is their ability to rapidly adapt and change and disrupt themselves, you know, as opposed to being disrupted by somebody, somebody else. And there's this interesting quote from Jeff Bezos, you know, because you think right now, I mean, Amazon is this 800 pound gorilla? I mean, they're firing on all cylinders doing very, very well. But you know, back in 2019, the team meeting, I guess, somebody asked him about the Sears bankruptcy. And he said, Hey, Amazon is not too big to fail. In fact, I predict one day Amazon will fail, you know, I'm basically saying, you look at large companies, or lifetime lifespans tend to be 30 plus years, not 100 plus years. So, you know, Eddie's Right. I mean, as hard as it might be this, look at Amazon and go, okay, they're gonna fail, you know, based on how strong they are, at some point in time, they will, you know, I mean, companies, you know, they get big, they lose part of the culture that made them successful. And the, you know, the goal is not for that not to happen, and whether you're a small company or a large company, to use the right processes and tools, and stay nimble, you know, and disrupt yourself versus being disrupted. But it's hard, it's hard to do. Basis went on to say, you know, he predicted this, but he, he hoped he was dead, when they, when that happened, so it's like a retard and long gone before Amazon fails. But yeah, it will, you know, it will happen, it will happen faster with companies that don't, you know, that they're not able to adapt, and the lean innovation management process is, you know, potentially something that could help, you know, to help companies develop, you know, 10 times the number of initiatives and 150 times like a 50x multiplier. So, he talks, steam talks, about three arises of innovation, you know, rises and 123 arise, and one is more for like a mature business. So this is where, you know, you have that you found the right market, you've got the right business model, you've had some success, and now, you're just gonna do follow on products. Okay, so that's horizon one, horizon two is an extension, you know, it may off of that successful business you had, so there's new risk, you know, and some business model, define and development, but you're not starting, you know, from a blank sheet of paper, horizon three is more of an emerging, you know, business, and that is more of a blank sheet of paper, you know, you're going into the great unknown, and it's unclear whether the technology, the product concept you have, whether there's a market, you know, for that idea, so those are the kind of three different rises. And the way to look at this is that, you know, in horizon one, you're executing, horizon two, you're extending, and horizon three are exploring, and, you know, so that's where that that phase, where you're at that level of innovation is defined by whether the business model is being executed, extended, or explored. And so for the lean, you know, lean startup model, it's best suited for horizon two and three, where you're trying, you know, through the process of customer discovery, to find product market fit. And so that's where you would use it, but as he mentioned, it doesn't have to be just a start up, I mean, you know, large companies, I mean, Amazon is doing this every day, I mean, they're going off into some new area that they hadn't been in before. And so mean, you know, it could be applicable to them just as well as if you, you know, as a classmate, they were going to go start a new, you know, business, I would definitely, potentially apply to you as well, you know, if you were doing that, like a horizon three type of venture. So, if you're in horizon, one, what you tend to use is more something called product management, you know, you've got the Stage Gate process or whatever, where, you know, say we've got these products that are in market and they're generating revenue, and then the product management organization is, you know, they're they, they're incubating ideas are kind of on the back burner, and in some of those moves to the front burner, and they go into this you know, those are the skate two and they get to stage two where a business case is developed, and then they you know, go to development. So, we have this you know, I mentioned that managing this hardware business and Microsoft, we have what are called a business opportunity proposal, which was the stage two. So product management was looking at, you know, different mice or keyboards or gaming peripherals or whatever. And then they would, when they had some, they thought were ready, you know, for potentially being launched, we have this business case discussion, and then we would approve a certain number of the number of us to go to gate three, and then to start a development process, and then they would you know, launch and we'd go to market. So again, that's where you have existing customers, you're getting good revenue from those customers, and what you're trying to do is something, do something better, you know, so an example of where you might do that is, like, say, Intel, you know, or Intel is coming up, Intel, or AMD, you know, basically they're trying to cram more transistors, you know, more memory, you know, onto a chip to provide more capability, more parallel processing. And so, it's not to say that, that's easy to do, it's hard to do. But you know, you know, you've got a market for CPUs, you know, I mean, it's well established, you've got existing customers, you're talking to those customers. So that's an example of where you would use that product management, you know, approach. So for horizon, two and three type of ventures use the lean startup. And as Steve talked about, you've got this business model canvas, where you will have some assumptions, you know, an estimates into these different categories. And we'll talk a little bit about that, you know, today, and then more in lesson two. And then part two, you get into this customer discovery and validation phase. And that's where you take that the sum of these assumptions you have about your product, and your business model canvas, and you validate that with customers. And if it's validated, they're like, oh, wow, this is great. Yeah, this whole year, we'd have this need, and this will fit, you know, beautifully, you know, and help us and they're really excited about it, well, then great, you validated that, and then you'd move on to customer creation and company building or whatever. But you may find that you get some feedback, it's like, No, you know, this isn't the best fit. And so you need to do a pivot, you know, and kind of modify your product in some way, or the market that you're going after. And so that's part two. And then Part Three is this, which is tied to part two is this iterative approach, where you're coming up with a minimum viable product, so that you can go out and show this to customers, and then get feedback on that. And then you iterate, you know, based on that feedback. So this is kind of what c blank came up with. And then they're, you know, another group came up with this market opportunity navigator, which you could say, is the precursor to the lean startup, you know, toolkit, because it's trying to find like, well, what's the market, you know, that we should go after? And there could be many different markets where your technology would apply? And you're trying to find, okay, what's the right one to, you know, to target. So that's what we're going to spend some time on. Rest of this evening is talking about the market opportunity navigator. So again, it's the front end of customer development, the way they describe it as finding out where to play before zooming in on how to play, you know, so you kind of want to get to the right ball field or, you know, are we playing, you know, American football, or soccer? Are we playing basketball, baseball, you know, okay, let's find the right arena to play in and then we'll try and drill them down. And okay, you know, if we're going to be playing, you know, American NFL football, we're okay, then we dive into what we need to be successful in that particular market. So there's three steps in this market opportunity navigate are basically three kinds of questions you're trying to ask, you know, what market, which market opportunities exist for you. And then, you know, you may have several, and then trying to fire or what's, you know, what's the most attractive market, you know, to go after? And, and then, based on that assessment, well, which ones are we going to focus on? So, you know, you need to have focus, whether you're a large company or small company, but especially for startup, a figure, okay, well, here's what we're going to do, but then you have some other alternatives as well. So you can think of a you know, market opportunity. New down on the bottom here if there's market opportunities is specific application of your firm's abilities for a specific set of customers. So I just take you know, the company I'm at right now, we've got the sensor technology, well, there's a lot of different markets, that this could be used in you No, it can be used in Department of Defense, you know, applications, it can be used on ua V's, you know, in that market, the self driving car market, it could be used for imaging, you know, basically something called synthetic aperture radar, you know, imaging, a lot of different, you know, in places that the technology could be, could be used a lot of different markets. So we need to kind of figure out, Okay, well, you know, where, where we're going to have the most success and where we want to focus our energy. So for the navigator, you know, the, there'll be three steps, be able to address those three questions. So you'll come up with a market opportunity set, like you're all the different, you know, markets, we could go after you have an attractiveness map, where you say, okay, which ones are attractive? is basically, you know, how attractive is the market? And how challenging would it be for us to develop a product for that market? And the actual focus strategy is, okay, the decision time, okay, well, where are we going to, you know, what are we going to go after, and focus our energy on, and they've come up with these, you know, kind of worksheets and toolkits there, some of the worksheets, were part of the, the reading, you know, for the, for the lesson, and those are, you know, available to us. You know, for anybody that's kind of using the market opportunity navigator to kind of help them with the process. So, they've got these three worksheets, and what we'll do is we'll go through, you know, these conceptually, and then the case study, you know, I have a short little reading for augury this company that has kind of this acoustic sensing technology, we'll go through a specific example of how they use these worksheets with their, with their business to figure out what market to go after. So the first step is this market opportunity set. And this is where you're kind of trying to have an honest assessment of well, you know, what are we good at, you know, what's kind of our core technology? And then what markets can we apply those core capabilities that we have, what markets can we apply those to, and so, up on the top, you know, here are the worksheet you got the your different abilities, you know, where you list those, and then you say down below, say, Well, okay, it could apply to this particular market. And here are the different customers that you might have, you know, in, in that market segment. And so you kind of populate this thing. And then, you know, reflect on that, and then you'll have hopefully a number of those, and then you'll figure out well, okay, which ones are kind of worthy of going to kind of do an attractiveness assessment against. So, you know, at the end of that step, you'll have a marker 1234, maybe more, you know, that you've identified, they're not plotted, in a way, it's just like, hey, yeah, we think our, you know, product technology could apply to these four markets. Then you go to the attractiveness map. And here, you're really looking at like two axes, you know, one is, hey, how attractive is that market? And then how challenging is it going to be to go after that particular market? And then they've got this worksheet here, they've developed where you've got the kind of the market attractiveness on the left side, you know, okay, here's the potential for the market. So you'd have Okay, here's the market, you know, that we're, we're talking about, here's the attractiveness. And then what are the challenges. And once you kind of work through, you know, this particular worksheet, you know, you have a sense of where, you know, where this could be plotted on a graph. So, in this particular case, for this attractiveness map, on the x axis, you've got challenged from low to super high, meaning, hey, this would be pretty easy to do down here. And it's going to be super hard to do over here. And then the potential is, you know, along the y axis to it kind of low potential, you know, not really exciting to Wow, man, you know, we can make a whole lot of money up here on this upper portion of the y axis. So you know, they've got these names you know, they've given to a golden gold mine. So Gold Mine is something where, hey, you're gonna make a lot of money and it's not that hard, you know, to go make that money. So that's, that's always nice, you know, something that looks like is very doable, and there's a good payout. moonshot, you know, as you might imagine, it's like, Okay, well, payout could be just even, you know, more attractive than the gold mine, but the challenge is going to be super hard, you know, and so you may fail or risk of failure may be higher. You have like quick wins worth, like value and the payoff isn't that great. I mean, but it's okay. But then but the challenge isn't that hard either. So that may be a safe bet, in some cases to kind of go after that quick win. And then questionable, you know, stuff that's in that lower right quadrant, it's like, you know, why are we doing that, you know, it's super hard and the payoff is negative. So this stuff seems obvious. But you know, you'd be surprised how many, you know, how many questionable, startups get going, you know, and they really didn't go through and ask themselves hard questions, because for some reason, they didn't think it was questionable. But if they would have kind of used this, like the worksheet like this, they would have ferret it out. Oh, yeah. You know, maybe this is the best thing to go after. So anyway, you know, where you'll end up is this agile focus, dartboard, you know, where they should be trying to figure out well, what are we going to focus on, and what they, you know, what they recommend is, you've got something that you're focused on. But you also have like a backup opportunity and a growth opportunity. And this worksheet on the right, can kind of help you figure out what the potential backup and growth opportunity is. So, for a backup, you want to maybe pick an application a market area, that's different from your primary target, where the assumption the risk are different, you know, so if the risk are very similar, from your primary, your backup, well, you know, it's not a very good backup, because if those risks materialize, it's going to affect your backup as well. So you want your backup to be basically different enough, from the primary market, you're going after that if your primary fails, for some reason, it's unlikely that your backup would be affected by the same risk whenever, and then the growth, the growth can have similar risks to the you know, to the primary market you're going after. But it's just something okay, after we, you know, get started with our primary market, this, this other opportunity will be a way for us to continue to grow, you know, and expand our business. So anyway, when you get done with this worksheet, you know, you'll be able to kind of map those out. And we'll again, we'll go through this in more detail. But at the end of that step, you got your plan, if they Okay, what were we going to pursue, now, we're going to pursue market one now. But for market four, we're still kind of nursing that along, you know, we're dedicating some energy to that, either as a backup or a growth opportunity, in markets two, and three, were just kind of like, Hey, we're gonna put it in cold storage, you know, we're not really going to expend any resources on that. But you know, but we know, you know, it's there, we've done some work, and you know, we could pull it, if conditions change, we could pull, you know, pull that out of cold storage, and then act upon it. So Reed, Hoffman, you know, basically, started, LinkedIn, you know, was acquired by Microsoft, here is kind of his pitch advice for entrepreneurs. And he says, you know, you want to show focus in your decks by emphasizing what you're really betting on, however, shows the maneuverability, don't just say you have five different options instead, say that you're doing one. But you also have some fallback for maneuvering options. So that you especially if you're going out, and you're getting, you know, venture capitals, there's nobody's going to invest in your business. They want to know that your focus, you know, maybe if you're at a board meeting, and you know, we're venture financing our, our company, and so we have recurring board meetings every couple of months, we don't want actually next week, you know, in the board members, you have somebody that's investing you in money in your company, they don't want you to be wishy washy, well, we could do this, we're kind of thinking maybe we'll do that, or whatever. They're like, Oh, my gosh, man, these guys don't know what they're doing. You know, so you want to, hey, we're going after this, you know, but we want to show that, okay, we can we got this backup, which is, you know, the risk are not correlated with a primary path of one. So if you have these risks that we've identified those materials, we could go over to this backup, or, and we want you to know that, you know, once we're successful with our primary focus, we've got this growth opportunity that, you know, we could take off as well. So that just shows Oh, wow, okay, these guys have alternatives. They've got focused, they know what they're doing, but they've got, you know, they've got a well thought out plan. So anyway, that's the idea behind you know, this agile focus dartboard, hey, what are we doing? But then what are some other think about some other alternatives that are a backup or growth strategy? Okay, so, now we'll kind of go through detail You know, a case study of this company company augering. And so augury basically has this technology for predictive maintenance, you know, basically listening to the machine, they kind of tell you when, you know, a malfunction might occur. So you know, and so this could be applicable to a variety of different you know, types of machines and so let's, I'm gonna pop out of this thing again and then I'll share their little overview. So we can we can look at, let them describe their business before we get into the case study. Oh, wherever. Okay, here we go. What if you could predict machine malfunctions before they happen? Now you can. No matter the industry overtime, all machines with moving parts will experience malfunctions. This leads to unexpected failures, expensive repairs, costly replacement parts and labor and can cause significant interruption to your business. Traditionally, this problem has been addressed with preventive maintenance programs that are routinely carried out according to preset schedules. This labor intensive process does not prevent all failures. Fortunately, machines can talk that's where augury comes in. Now, you can automatically predict malfunctions before they happen. With Halo continuous diagnostics and August go portable diagnostics. augury solution characterized as mechanical systems by the unique sounds they make. When attached to a machine. augury captures the mechanical data and sends the information to secure servers. Their powerful artificial intelligence compares the data to the history of that specific machine, as well as to other similar machines from our database. This analysis is done in real time providing immediate and actionable results. Engineers, managers and technicians are alerted to issues as they develop anticipating the needs of their machines through automated diagnostics. Having accurate insight into machine health at the earliest sign of a malfunction enables you to act early and significantly reduce the cost of maintenance and repairs, all while increasing uptime. With augury your machines can be truly reliable. augury machines talk, we listen. Okay, so. So this company, I mean, that's, that sounds pretty cool. I mean, you can imagine the benefits of kind of having if you have a really good technology that you could attach to different machines, and, you know, wide variety. And then you can imagine that over time, you know, okay, here's when the machine is humming along performing well. And then where there might be signatures that would start to develop that would indicate the warning sign that there's some problem and then be able to allow that company who knows using that machine to take action. And the way this has been accomplished before is just with routine preventive maintenance. But that's, you know, periodic. And a lot of times, maybe it's not necessary, you know, if basically, the machine is healthy, but you don't know that, you know, unless you do the preventive maintenance with a system like augury, you know, and with AI, you could determine, you know, when there's an issue, so you can imagine that these guys would have a lot of different markets that they could go after. So what we'll do is, we'll take a 15 minute break, and then when we come back, we'll dig into their case study and figure out okay, how they went use this market opportunity navigator to figure out what the you know, what to focus on and kind of what their growth and backup strategies were. So let's go ahead and we'll say, come back at half a half past the hour and pick up again, okay, all right. See a little bit Okay let's go ahead and get started again. And then your Alexander, you had a question on the chat on this particular slide, I think these three horizons of innovation. And you're kind of wondering, Well, you know, why is a mature business over here left on the on the timescale? And I think, you know, this was kind of maybe when Steve came up with this graph, was thinking of like an existing like a existing business. So let's just take, you know, Amazon as an example, I'm not sure if is the best fit, but as an example, I can think of where, you know, when I first started out in the horizon one and there are a bookseller, you know, they're basically an online bookseller, you can go there and get any book you want and have it shipped to your house or whatever. And then they did that real well, whatever. And they're like, Hey, you know, how can we grow? Well, you know, what, you know, instead of just selling books, you know, we could sell something else, you know, and so they I forget what their next entry was, whatever, but it was similar, you know, like a retail item. You go on and you start to buy more and more stuff. And now like, you buy any thing, you know, on on Amazon. And so that would be like a reason to, and then you could think of like horizon three, you know, for Amazon is like Amazon Web Services, okay, something totally different, you know, we're not selling books anymore. We're selling compute capacity, you know, and storage capacity, you know, so I got totally new emerging business. I mean, I think that's one way you could kind of think of emerging business isn't new business. It's an existing business. Creating new, okay. Yeah, I think I understand the problem. I think the problem is, yeah. Yeah, if you, if you're, if you're a start up, like if you and some classes say, I'm going to go develop some, you know, new new software application and sell it, you know, you would be an emerging this. I mean, you'd be horizon, potentially horizon three, because you know, it's something new, it hasn't been done before, whatever you got to go discover, if there's a market if you have product market fit, all that kind of thing. I think he was kind of laying this to try to show Okay, how do you compare and contrast or rise in one with two and three, I don't know if I would have done this, I don't know if I would have had time on the x axis. Because you know, that I could see where that's kind of that could be a little confusing. But anyway, that is an example of how Amazon, you know, they started out as a bookseller, they expand into the retail and then they did like some totally emerging business with Amazon Web Services. Okay, let's get back to augur and figure out what singer is Audrey? Okay. So looks like Audrey's got some cool technology to kind of look at in measure the health of different machines. And so I put their opportunity stat, well, first of all, you start up in that, that top section go, you know, hey, what are our assets? What were what are we good at? Well, I think they're good at listening hardware, you know, they can record vibrations, ultrasonic, small, you can imagine, that's important. Because if you got some huge device, you got to have attached to the machine to be able to listen to it, well, that's a problem. So small, portable, high sampling rate is probably good, because, you know, probably for your AI to be truly effective, you'd be able to sniff out a sample frequency to pick at a high rate to pick up different signatures. So anyway, that's kind of the listing hardware that I think they got some special sauce there. And they think, okay, from an algorithmic standpoint, we're really good at detecting changes and doing real time analysis. And they think they've got, you know, a capability for machine machine learning, and are, they're able to then come up with a, you know, malfunction dictionary. So they know, hey, this, this one is trending in there in the wrong direction. And they're able to detect that. And then like, anything, you know, you got to have core software in the guts, which is the algorithm, but then the user interface, no matter what it is anymore, you know, especially since released to the iPhone, you know, iPod and iPhone, I mean, it's, it's, you're using that in your everyday life. If even if it's an industrial application, the expectation is super high, that it's going to be easy and intuitive. You know, it's gonna support iPhone, Android platforms, whatever. And so, you know, it may feel like okay, they've got, they're able to develop a, you know, they've got a good user interface. So now, where could they you know, work would they then apply this what are some different market applications as well? One vertical is commercial machines. So commercial buildings think, you know, heating and ventilation, you know, AC systems, elevators, you know, Okay, that makes sense. factories, okay. There's all kinds of manufacturing machines, you know, that were out or have problems, other infrastructure equipment, freight firms for cooling containers, refrigerated trucks thinking, Okay, those all fall into this vertical, we'll call commercial machines. Okay, but you can also apply it to consumer appliances. So, you know, household wide appliances or heating and cooling from a per residence, just like you know, heating and cooling for a commercial building. You know, you could apply the same thing for for residences, vehicle manufacturers, cars and motorcycles. Okay, yeah, you can see where, you know, maybe there could be some diagnostic on a car that would indicate, hey, there's some, you know, some problems occurring and they'd be able to pinpoint it before you're stranded. You know, in the middle of nowhere, you know, I have to call triple A, you know, to To have them come help you. And then medical purposes, you know, artery diagnostics and lung diagnostics. So there's a whole bunch of areas, you know, they identify with, okay, these could be potential market opportunities that we could pursue. But, you know, now they need to kind of do this screening and figure out, Okay, is there a real need there, you know, sometimes you can have, you hear what's called, you know, like technology trying to find a problem to solve, you know, or say, somebody, you know, comes up with some new widget, and they want, it seems really great, and they want to force fit it, you know, to some market. And the problem is that there's no market need, you know, everybody's happy, happy camper, you know, they're not complaining, you know, they don't, they don't have a problem that needs to be solved, and whatever. So you got to make sure that there is a, you know, a customer need or pain point. And then, then, you know, look at, okay, are there any restrictions that would prevent us from being able to execute on that opportunity, and then, you know, the opportunity conflict within their core values, you know, maybe they don't want to go into, you know, develop a product in a certain area, and so they, they would stay away from that. So, anyway, you know, based on auguries assessment, they, here's what they circled with over h fac looks interesting. Manufacturing machines, cooling containers, white appliances, and cars. So, you know, in those two different verticals, they have, you know, five different market opportunities. And so, you know, when they're done with this, this first step, here's what they had, you know, it's like, okay, we don't know which one we're gonna go after. But these look interesting, you know, these, these are worthy, you know, a deeper dive and deeper dive in terms of the attractiveness map. Okay, so now you want to figuring out, you know, well, what, what one of these market opportunities look like, what's the potential, you know, much typically comes down to like revenue and profit, you know, for particular market? And then challenge like, well, how difficult is it for us to be successful in that particular market? So, and then this is the, you know, worksheet to go through and take a look at that. And so let's look at what, both sides of that. So for potential sort of compelling reasons to buy? Well, what are the questions that you're trying to answer? You know, is there a real unmet need? And, you know, that is typically pretty easy to find. Because, I mean, if you start talking to customers, and you have a particular concept, there's a difference, sometimes you'll get customers will say, yeah, that's cool, interesting, whatever, you know, they're being nice and friendly. But the ones that have a real need, it's like, You're, you're off, they've been wandering in the desert, and they're dying of thirst, and you've got a cold glass of water. I mean, there's a real difference, you know, of how people's eyes light up, when you really, you're, you're getting to a need that, that they have a pain point that they haven't been able to solve. So anyway, you kind of go out and you try to figure out whether that's the case? Can we provide an effective solution to this need? You no need to be honest about that? Can we address it better than current solutions? So, again, honesty is really important here, you know, like, what's out there? And how are we better, you know, to be able to solve that need? Then, you know, you get into, you know, what can be really exciting for founders is what's the market opportunity? You know, what's the size of the current market? How are they expected to grow over time? And then, you know, what's the total market size? So the amount of revenue at 100% market share? So let's just say, we develop some new product, and we're going after and we got 100% market share? What are we talking about, you know, is this a billion dollar business? $100 million business $10 million business million dollar business? $100,000. I mean, I always like, when I'm looking at markets, look at order order of magnitude sizing. So like I mentioned, you know, we've got the sensor could potentially be used on self driving cars. Well, today that's small, but eventually, that could be millions of units, you know, and it'd be, you know, there's hundreds of millions of cars, trucks that are sold every year. And if you go to trucks and I'm talking Trucks like the you and I would drive but I mean, like commercial trucks, that's a whole other, you know, market. So when you think about, like, self driving car market over time, that's a could be a very, very large market. Versus think about, like, unmanned aircraft systems? Well, Amazon has very big ambitions, very big ambitions for their their UAP program. But still, you know, it's probably hundreds of 1000s of units, you know, may be low, single digit millions, you know. So, you know, if that's what you're trying to do is very likely, what's the order magnitude in terms of this business? And so you can you know, that that weighs the frame, okay. You know, and compare different markets that you're going after? What's the economic viability? Do you have sizeable margins? Are the customers well funded enough to pay the price? How sticky will customers be? You know, so, ideally, you know, you want high margins. I mean, that's been the, that's been the why the software industry have been so successful. Because, you know, you produce the software and a lot of effort, you know, and you haven't a lot of software developers and test team. And so it's not like, you know, there's a trivial investment. But once it's developed, you know, the marginal cost to sell additional copies, or to have other people subscribe, you know, if it's an online, you know, Software as a Service, is the almost zero, you know, so the margins were like there were equate to profit tend to be very high. Versus, you know, if you think about, like, a restaurant business, you know, it's tough, you know, I mean, margins can be can be low, or use other businesses where, you know, basically, they can barely cover their costs wherever. So ideally, you want a business, you know, where the margins are high, and where you've got customers that can afford to pay. And ideally, your customers are sticky. Well, what does that mean? You know, I mean, if they can just move instantaneously from your product somewhere else, I mean, you can find that you have a lot of revenue fluctuation. And that's not real desirable, you want to kind of get somebody say, it's a subscription service, get somebody subscribed, and then you can count on that revenue forever, you know, they just never leave you, you know, if you continue to provide good service and good customer support or whatever. So anyway, that's what you're kind of looking for on the potential side. And so augury, you know, they, when they applied this to h back for commercial buildings, Hill, here's what they found, you know, when it comes to compelling reason to buy a, the need for predictive maintenance in this market clearly exist, and current solutions require, you know, a lot of investment. So we're, they felt like they there could technology could apply, apply to the market, and, you know, would be successful, because, you know, wouldn't, it wouldn't be as expensive as other solutions that were out there. And for market volume, they identify 5.6 million commercial buildings in the US alone, you know, so that's not looking at rest of the world. And that's a lot of buildings. Okay. So they were estimating, you know, their revenue per building would be around $5,000, which is not a lot of money. Usually, somebody's got a commercial building, and they got h vac systems, you know, up and down that building, it would cost them $5,000, to be able to, you know, monitor their h vac systems. That's not a huge expense expense. But then if you look at the well, what's the revenue, well multiply 5000 times 5.6 million. That's like, okay, with a 7% growth rate. So that's a pretty high, you know, market volume. So anyway, that's that one, and economic viability. What they determine that the predictive maintenance program could save commercial facilities up to 13% of their operational budget. So typically, you know, for buildings, I mean, the operational budget is going to be hundreds of 1000s, if not millions of dollars. So 30% is a lot of money. I mean, so I mean, that's what you're looking for is a simple Why are these guys going to do their have to go attach this device, pay for the service? Why are they going to do it? Well, there's a good return on an investment, you know, they're gonna save 30% of their operational budget. So by doing this, it may pay for itself, you know, in a year, you know, they'd be able to pay for the system in a year based on the savings are approved. Another example, not related to augury, which, you know, for those of you that fly when you look outside Is the window at your wings at the ends of the wings. See these winglets, you know, well, a long time ago, you know, 20 years 30 years ago, the wings didn't have winglets, or whatever. And then a company in Seattle called aviation partners here with a design for these winglets or whatever that would save on fuel costs and basically make so there's drag on the wingtips or whatever. And so by putting these winglets on there will reduce the drag of the aircraft, whatever and save in fuel costs. And a friend of mine was working there. And when he told me, you know, what's a fuel savings would be just like a monthly fuel savings, it would pay for itself in like a month. And so I knew as I oh my gosh, this is gonna be the gold mine. And sure enough, now all these aircrafts now have, you know, winglets as part of their design. So anyway, that's what you're looking for, is where the customer, they've got some need. It's a good market. And that customer is going to, you know, saves the money, and they're gonna see realize some kind of benefit, where they're gonna go, Wow, okay, yeah, we want to do this. And once you get, you know, a customer, you get some testimonials, you know, then that spreads quickly, if some, if one building save and 30% of their operational budget, well, everybody wants in on that action, whatever. So anyway, that's an opportunity. That's a examples of where you get good economic viability. You know, and this seems to make sense. So, overall, the potential was pretty high, you know, for this one, they didn't they didn't score it in the super high category, but they said it was high. I didn't ask on the other side of the ledger and go, Well, what are some of the challenges? And, you know, what are the questions that you need to look at? Well, implementation obstacles were how difficult it would be for you to create and deliver your offer, you know, it's gonna be really hard to develop the product. And then we'll be, how difficult will be for you to access the market. In some cases, you know, markets are kind of closed, it's really hard to get to the end customer to make the sale. So you're looking for, hey, Howard has developed the product? And how are How hard is it to generate the sale? And then are you going to be able to raise money? You know, not typically, if there's a good market opportunity, you know, like we talked about on the last slide with, okay, the number of buildings and it's sticky. If investors believe that, then they're gonna, they're gonna want to, you know, lend you money. But in some cases, you know, there is stuff that kind of comes in and out of favor, you know, where, okay, hey, maybe people were really super excited about unmanned aircraft vehicles, you know, and then people invested a lot of money, and the markets been kind of slow to develop. And now the new crop of VCs, like men, and we're not investing in UAE V's, you know, now, the hot thing is self driving cars, you know, so, if you will get those variations, we're like, okay, you know, maybe for whatever reason, you know, investors don't want to invest in a particular market area, time to revenue. So this is real critical, especially, you know, if your startup if you're an Amazon, you know, that Amazon, and it exists now, oh, man, they can hold their breath forever, that doesn't mean that they want to, but they could, I mean, and that's actually what they're doing with their drone program. I mean, man, they, they've been at this for many, many years, you know, and they haven't generated really any revenue or savings from it, because it hasn't been commercially launched. But an Amazon can afford to do that more than burn that kind of cash, you know, as a startup, you can't I mean, you gotta, you gotta, you know, be able to develop a product and get to market and start generating revenue, because people are going to continue to loan, you know, lend you money, you know, give you money indefinitely. So, what's the time to develop the product? You know, is the market available today? Is the market ready for the offer? And how long as the sales cycle, you know, in some cases, like, we, we sell the product, to, like the Department of Defense, you know, and, you know, in the, in the US, and, in some cases, that can be great, because, you know, you can, there can be a lot of money, some large contracts, but the sales cycle can be huge. I mean, I mean, it's like, years, three years, you know, I mean, you're working and Nelson prototype has worked his way through the system, and then eventually becomes what's called a program of record. And then that's where you start generating cash. But you know, that can be very long time. So as a startup, you know, you have to focus on how quickly can we get to revenue? And then what are the you know, external risk? So, if it's a market you're going after, and there's some embedded competition, and I keep using Amazon, but I, let's, let's use Amazon, Microsoft or Google, you're going in and you're gonna go head to head, you know, dams are sort of Google's like, okay, man, you better have something really good. And if you do that, maybe you'll be acquired. I mean, typically, that's what What happens if you develop something? You know, so like LinkedIn, what's his name, he develops LinkedIn. And you know, he gets, it gets purchased for several billion dollars by Microsoft So, so you know, if you have something really good, you can still go in, in those cases, they there wasn't really a competitive offering. So they bought something that they wanted to have or whatever. But in some cases, you know, there is an offering. And maybe an example would be slack. I mean, slack has been going up against teams. And like I said, before, teams, you know, there was link. And so, you know, there are tools where you could do instant messaging within the enterprise and chat and that kind of thing. So you just have to think, think over who are my competitors in that market? And then, you know, are you have some dependencies of other companies or players, you know, if you pursue particular market, and then how strong are those relationships if you're going to have those dependencies? And then sometimes there's adoption barriers, you know, one that's not really called out specifically here, but can be huge is like, regulatory barriers. So, you know, I've talked a few times about Amazon and their drone program, and you might go on Yeah, what is going on with that? You know, what, you know, Bezos had that 60 minutes article years ago, and he said it was coming, you know, where is it? Well, there's this organization called the Federal Aviation Administration, and the Federal Aviation Administration governs, you know, aircraft, whatever, they're flying in the National Airspace. And because we have a very active National Airspace with a pretty good safety record, you know, they're a little concerned about having hundreds of 1000s of drones, autonomous drones, you know, flying in the airspace. So sometimes you'll get into these like adoption barriers, it could be a regulator, you know, where a government agency has to put in rules of the road before the market can take off. And that's really what what's happened with the drone market is that a lot of tests going out there, like the one I mentioned, that we participated in with linear inspection, but it's all kind of testing, because the FAA hasn't said, Well, here's the regulations that you need to comply with, or whatever. And so they've been struggling with that for several years. And until they figure it out, it's gonna be hard for a company like Amazon or anybody else to, you know, fully implement their business. So that's an example of like an external risk or barrier. So with augury, you know, what were their what were their risk, are we out there that they had to deal with one implementation obstacle, you know, they had time, medium to high. And one of the advantages was the H back equipment, which is kind of the target market that they evaluated for this sheet. There's a lot of standardization. So it makes it easier to develop a product, I mean, imagine, you've got the sensing equipment, you've got to develop for an H vac system. And there's like a million in one h vac systems that are all very different, well, then it's like, wow, how are we going to be able to handle that variety. So they found here was a Hey, there's quite a bit of standardization. And, you know, but then they found that, hey, delivery to that market would require a direct sales force, you know, they couldn't just go to some reseller and say, Hey, I got this cool, you know, sensing widget, you know, could you go sell that to the end customer if they had to do that themselves or whatever. So they're going to need to, you know, staff up a fairly large sales force. And so that drove the implementation off scope a little higher, to kind of development lower, but you know, market development, Salesforce a little higher, so overall, netted out kind of between medium and high in time to revenue, you know, was low, low to medium So, because development, you know, look pretty doable because of the standardization. And then look at that next one, no special regulatory requirements, you know, because think if they were doing like a health care product, oh, okay, well, good, I'm not gonna be really easy, you know, to kind of go through all those wickets. So that wasn't the case here. They you know, they can launch a product pretty quickly and then so that was good B's kind of a shorter time to market. But the sales cycle you know, is going to take a while so it's kind of a mixed here, they can develop a product pretty quickly, weren't really any regulatory gaps or requirements, you know, that wickets to jump through, but this is kind of somewhat new. So they'd have to develop a Salesforce and then go, you know, convince the buyer to take a look, you know, typically what companies will do it. Okay, well, maybe we'll do it on one floor and one building, you know, and we'll try it for three or six months or what Every now and then they kick the tires, and then you know, and then maybe they expand the pilot, and then they go all in, you know, so you, you want to get them to all in as fast as possible. But you know, you're saying, hey, it's gonna take a little longer. And then insurable risk. You know, and they said, war, current solutions were costly and complex. And so they had a competitive advantage. Their offer was a standalone solution. So they weren't dependent on other players, and there weren't any for regulatory risks. So, you know, they put that kind of in the medium category. So anyway, that's how they scored it. And they did that for all these different, you know, market opportunities in attractive maps, for each of them. And you, here's where they kind of net it out was h back was kind of in the gold mine category, where, you know, we talked about before, the money was pretty good, but they put it you know, high, and then above it over the moon shot, like cars and manufacturing machines is really super high, you know, revenue. And you could even understand why I mean, there's a lot more cars, and then a lot more manufacturing machines and say, ah, back systems in a building, so it's just a quantity, you know, those opportunities would be larger, but then the challenge would be higher, you know, as well. I mean, you can probably think, just like, not that I saw the worksheet that they came up with, for cars, but cars are complex, I mean, they got a lot of different systems. So, you know, it'd be difficult to come up with a general purpose sensor that could detect problems, you know, with the engine, or I draw like system or catalytic converter or fuel system, you know, so, you know, but if you could, you know, then the potential was quite, quite high. So, anyway, that's how they, you know, they mapped it out. And then, you know, it's like, okay, now we got to figure out how, what's their focus strategy? And then, you know, then you kind of know where they're trending to with their primary market opportunity. And we're going to go after that gold mine in Ah, back. But then what's the smart portfolio? What would be a backup option, you know, and a growth option. So then you have this worksheet here, you know, where you're trying to figure out what a backup and growth could be. And so we'll kind of walk through, you know, that. So for product relatedness, you know, is development, does the development require similar resources and capabilities? So things like technological competencies, required resources, IP employees, similar networks for suppliers and partners. So, you know, if, as an example, which we'll see when we get to augury, you know, and their assessment, residential h back is similar to commercial H. Mac, I mean, you know, maybe the commercial systems are bigger. I mean, they're not exactly the same. But you could imagine that the failure mechanism on an H vac system, whether it's for commercial building, or residential building are probably similar. You know, and so your machine learning, you know, approach could be similar, you know, so for product development, it's like, okay, you know, that could be high. But then, but then the market is different. You know, I mean, the customers for commercial buildings versus resins are totally different. Yeah. So that's going to be, you know, a lot more investment from that standpoint. So anyway, product related this, you're looking for those kinds of things. And then market relatedness would be marketing and distribution. So like I mentioned, you know, commercial versus residential would be different, it'd be a different market that you're going after, and it will require a different marketing and distribution. So anyway, with that you're looking for like, well, what are the values and benefits? Is there a brand carry over, you know, from one market to another, or the sales channels and word of mouth from customer similar or not? And so, and then, as I mentioned before, you know, ideally, you'd like to have a backup option that allows you to change direction, if necessary. So it's kind of like, hey, everything, we thought it looked good, but for whatever reason, something changed, or maybe you miss something, and you're not successful, what do you do next? And that's your backup option. And like I said before, should avoid the same risk or shouldn't rely on the same assumptions. Otherwise, you get bit again, you know, the potentially, and then a growth option is where you aim we are successful. What are we going to do next? Well, that's your growth option. You've kind of already thought about it, and then you move to then implement that growth option. So here's augury, you know, came up with. So you h back for commercial buildings was what they decided they were going to go after that was a gold mine opportunity. And then they looked at, Okay, what about these other three, so h factor residential elevators for commercial or manufacturing machines. And what they identify is, you know, h back for residential and elevators, for commercial as their growth opportunities. And then manufacturing machines was their backup. So for residential buildings, you know, the product related in this was high. You know, that's kind of what this circle represents, for the reasons that we talked about, you know, it's like, okay, yes, pretty similar new h vac systems are pretty similar, whether it's for commercial building, or residential. So a lot of carryover they're market related is not so much, you know, is the different channel to go after residential versus commercial. So that way, you know, this can be a growth opportunity will be successful for commercial buildings, and then we'll use the product, but we have to go and augment our sales staff to go after those residential buildings. And for elevators, for commercial buildings. It's like what a product relatedness isn't as high. I mean, there's some carryover, but it's different. I mean, elevators are different in nature back, whatever. So there's gonna be some differences. You know, in the software, at least, you know, if not for the hardware, market, relatedness is high. Well, why is that? Well, you know, you're already talking to these guys that own commercial buildings, well, these guys that own the elevator, so it's pretty good to up to do another, you know, sale that, hey, you love our h vac system, you know, you're going to love what we're doing for elevator. So again, that could be a growth, you know, opportunity. And their back up was manufacturing machines, where it's like, well, product relatedness is midway, market relatedness, Midway, or whatever. And, you know, it didn't rely on some of the similar assumptions with, you know, these other with these other other markets. So if this were to fail, this could potentially be a good backup, because it's pretty different, you know, from from what they were doing with h fac. So anyway, so then you get over here, you know, with the graph, and they're going after h back, but they're looking at these other, you know, three opportunities, they're keeping open. And there are differing, you know, cars and cooling containers and wide, wide, wide appliances until later. So that's how they did it out with their, their navigator. So let's give you an idea of you know, of, of how a company might implement this, and how it could be helpful, you know, rather than jumping, you know, hey, this is the first thing you see, like, oh, wow, that looks really cool. Yeah, our product could apply there, and boom, you go. After that. I mean, these are really pretty important, important process to follow and questions to ask yourself before you, you know, you make that jump. Okay. So that's the market opportunity navigator. And then for, for lesson two, we'll talk about kind of what Steve Blank in his protegees developed with the the lean model, starting with the, you know, the business model canvas, and go from there. And this will be applicable to like, auguries that, okay, we're gonna go after h vac, but then they could go dig into the business model canvas, and then continue to follow the process that Steve Blank, you know, identified. Okay, so now, switch gears, and talk about the class project. And what your teams are going to develop his, you know, concept for a new application, and can be either like a mobile or web application or website or new service. Most most teams have been doing, like a web, a mobile app, you know, but whatever, you know, it could be whatever, you know, strikes your fancy. And you when I first started doing this, I hadn't constrained you know, I kind of do this, you know, and then would have different variations on a particular concept. And, you know, and the feedback was, well, no, let us let us figure out what we want to do. And that makes sense. I mean, you something that you might have some passion around, you know, something maybe you thought about and thought would be cool. And you'd like to develop it further. So from that standpoint, it's it's wide open, you know, basically, you can do whatever you want. The goal is to create a concept, you know, create the concept and create a realistic prototype. And you know, what we're defaulting to, you know, for lack of a lot of different resources. It's just a wireframe and PowerPoint, okay, so but you know, you can then I'll show you an example, you know, within the, in the deck if you guys looked at earlier, you know, kind of what I'm thinking about or whatever, but it's basically something that you could take to customers, you know, you could run it through, and so they grok it, they'd go, Okay, I get, yeah, I get what you're trying to do, and they can provide useful feedback to you on, you know, on your concept. And, obviously, you know, it's 10 weeks here, you know, you don't have to develop a fully functioning application, it just needs to be realistic enough to engage, you know, and user and stimulate useful feedback. So, you know, in terms of the wireframe, there's some fit and finish, you know, so it looks like, okay, they can, they can get, yeah, I get what you're trying to do, and it looks good or whatever. But it's not a fully functioning, you know, piece of software, it's just a wireframe. And then you'll need to work in teams of at least five people, I mean, we've got so many people in the class, you know, sometimes I just want to work with my buddy and have a two person team, I mean, there's no way we'd get through to the end and less than 10, after the final, you guys walk through your project, you know, for for everybody else in benefit in the class. And so based on the work that should be required to do this, and the time available, we have for presentations, I need your work in a team of five people, you know, minimum up to seven people, so five to seven person teams. And, you know, ideally, you could just stop select, so I don't know how much interaction and project work you guys have done. But you may have folks that you've worked with and want to continue to work with, and that's fine. If you need help, you know, in kind of getting assigned to a team or forming a team, I can certainly step in and do that, what I'll do is I'll have you, and that was part of the email I sent out as he sort of thinking about it, and then by next class, you know, say, Okay, here's our team, your here's our team name, and here's your on the team, and, you know, appoint somebody kind of a de facto facilitator, to go ahead and fill out the form and send it to me, so I know what the teams are. And then that way, you know, if there's some gaps, where we need to kind of supplement and assign some folks to teams, I'll be able to do that quickly. So you can get after it, you know, and you can start thinking about what it is you guys want to do. And I'm trying to, like, introduce you, you know, obviously, to a lot of different tools that are out there. So, you know, we've talked about the market opportunity navigator talked about the Lean Startup kit, you know, here's another one, you know, that really is not related. I mean, for Google Ventures, they have this design sprint, but it does, in a way tie to this idea of coming up with a minimum viable product, and in a quick fashion a way to kind of get an idea, you know, develop it quickly, and then get it out there in front of customers to get feedback. So it's somewhat related, even though they're not, you know, it's not like Steve Blank, and the Google Ventures guys, you know, got together and thought about this are totally independent that way. But it's, I think it does tie to this whole idea of the lean startup. So anyway, so that's the idea for the project. This is going way back from, you know, when we, when we kind of initially did this a team, this particular project was kind of a productivity app. There's a guy whose was written a new york bookseller, he has some different ideas about how to manage your time effectively. And so what this team did was kind of be able to create a mobile app around that or whatever. And so here's one screenshot of where, okay, you know, they've got a task, they need to add in a mobile, you know, on a phone, and you click plus or whatever, you know, then they can pull up, okay, well, what's the new task name and add details around or whatever. And the idea is, just to kind of give you a sense of, okay, hey, you know, what are you trying to get to by lesson 10, you know, when you're doing your out brief, to talk about your particular application and walk us through, you know, some of the functionality, here's, you know, here's kind of what you should aspire to do, this is kind of a standard that that we're looking for, or whatever. And so that full PowerPoint deck is listed as a resource in less than one of Canvas. So you can download that and take a look at it. So that's the idea where you can kind of see, okay, you know, you can show this to a potential customer and they get a sense of, you know, how to use the app. Okay, so now we're going to talk a little bit more about this, this process sprint process that the Google venture guys developed over time. And it's kind of a five day process, you know, to kind of go from idea to something that you can get in front of a customer. And this guy, Jake Knapp, he does a quick 92nd overview. So let me hop out of PowerPoint, and I'll pull up his little 92nd spiel. Okay, here's Jake mgv. And this is a super fast intro to our sprint process. The big idea with a sprint is to build and test a prototype in just five days. That's kind of like fast forwarding into the future, so you can see how customers react. Before you get all the time and expense of building a real product. Every sprint starts with a big challenge, a team of about seven people and a clear calendar. On Monday, you'll create a map of the problem and choose one specific target. On Tuesday, you'll create solutions to your problem. But instead of a shout out loud group brainstorm, you'll work alone to sketch detailed competing solutions. On Wednesday, you'll pick the best solutions instead of endless debate and use a structured decision making process. On Thursday, you'll build one, two, or even three realistic prototypes. These prototypes are just a facade of a finished product, you can use tools like keynote, Marvel and envision to create fake apps and websites. Or to quickly prototype hardware, you can use a 3d printer or modify an existing product, or just prototype the marketing materials. Finally, on Friday, you'll test your prototypes and five one on one customer interviews, you'll find obvious patterns, some solutions will work. But some won't. Either way, you'll have clarity about what to do next, and a great start on that big challenge. To learn more, check out our book sprint, it's got detailed hour by hour instructions. And it's packed with stories about startups like slack and medium and flat iron health. Good luck with your sprint, and thanks for watching. Okay, so that's an overview of the script process. And we'll dive into a lot more detail of the various of what I you know, the way this is set up is you get a team together, and they would be kind of CO located for like five days where they would work through these, these steps. So obviously, we're not doing that. And this will be broken out over, you know, the 10, week course, whatever. But effectively will be, you know, we'll have like a Monday, okay, here's what's happening on Monday, Tuesday and kind of work through the various steps until you get to, like the customer presentation, and that'll be less than 10, where you'll you know, present your, your application. Something that's a little different to is the way the way, which will make it a little bit more challenging for your project teams as you have this new app. And what they're asking for is to kind of focus on the area that's like super critical, you know, to kind of get the feedback. So like in various case studies that they have, it's like, you know, there could be one area, which is really important to the success of the application. And then that's what you're trying to focus on. And then you develop, you know, the rest of the development that happens in the process is geared towards that. Yours can be more general, you know, where you're, you're kind of going through the various functionality of the application. But you should give that some thought because typically any, you know, application, Samsung Mobile app that you're developing, there's some area that's just like super critical to whether this is going to be adopted, you know or not. And so that's what you should think about and as we kind of walk through these, these steps, kind of go Yeah, you know, this is the area that We definitely need to get customer feedback on and focus your energy there and make sure you know, your wireframe is is, is attacking that area, and you're getting a lot of detail so that you could get rich, rich feedback, versus, you know, maybe there's some other part of the app, you know, which it needs to be there, you need to be part of an app or whatever, but it's not a needle mover, you know, you know, whether that's great or not, isn't going to make a difference and whether or not your application is adopted or not. Now, again, you don't, here's this book, you know, you don't have to buy Jake's book, whatever, they do a great job, you know, with a lot of online resources that are available. And so let me, let me pull that, I'll show you that link. Here we go. So just familiarize yourself, you know, with, with their process and their, you know, methodology, but there's a lot of different resources that are available. So tools and checklist, you know, what I attached as the reading for this class is the remote sprint guide. So this is something they've come up with, you know, in the age of COVID. for, you know, people just can't get together, you know, and co locate to kind of go through this five day process of come up with a way to help people do this remotely, which I think obviously, will be what you guys will need to do. And so that's why I attach that as one of the readings for this lesson. And again, we'll kind of go through the steps, and how you can walk through those steps by using Zoom In lesson lesson two. So what you need to do now, you know, is, and I'll give you a little time to do that, here, between now and the end of the class session is okay, you know, think about who you might want to work with on a project team. And then just independently, just start thinking about an application that maybe you have an interest in, that you'd like to develop. So when you get the project team together, you guys and has a hell I'd like to do this or Or how about this to kind of go through the pros and cons of the different applications that you might be interested in developing into a concept. Because it's kind of move, you know, you got to kind of move to that decision pretty quickly. So then start moving through the rest of the sprint process. So so that's I mean, that's a it's a tall order, unless, you know, people come to the class, and they've already had, you know, they have a bunch of different ideas they have had for an application. And so it's relatively easy. But basically, you got to get to that decision, get your team together, and then get to that decision pretty quickly. So then you can carry through and the rest of the project steps through this sprint process. So anyway, that's all I've got, or whatever, what I'll do is kind of open it up for questions. And then after, if there's, you know, after the questions are over, just cut you guys loose. So you can spend some time networking to you know, find your project teams. And then like I said, I need somebody you know, to be kind of the lead person from the project team to fill out, you know, the the assignment for lesson one, which is nothing more than the team name, which you can change at a later date or whatever, come up with something more creative. But anyway, the team name and then who's on the who's on the team. Okay, any any questions? Feel free to get the chat window open to Sir happy to take any questions via chat. So it doesn't matter if it's like web app or a mobile app or any project that like even desktop app, it's gonna be right. Right? Yeah. Yeah. And we kind of wireframe. Yeah. So you need wireframes or actual sketching away. There's like scale more advanced sketching. Yeah, so the the PowerPoint, I went through the PowerPoint, I mean, that's that if you can get to that level of quality, that's, I think that would be good. I mean, basically, if it's too crude, you know, like, if you're doing this in real life, if it's too crude, the customer gets kind of hung up on you know, it's not looking very good. And so it needs to realistic as you could make it look, given the limitations of PowerPoint. Okay. At this point, are we like tech stack agnostic? Or do we want to kind of incorporate that into our prototype? You know, based on different features from different tech stacks? Yeah, you're us agnostic. I mean, just based basically what you know, what you're excited about and interested in, in doing? Yeah, there's not a particular you know, focus that I'm directing it in whatever its kind of some application that you think would be of interest. And you know, it could be an iPhone app, or Android, or it could be a desktop PC, or, you know, whatever, whatever. Whatever floats your boat, you know, it's just something that you have interest in passion on and want to, you know, spend spend your energy developing something that, you know, you could get useful feedback from customers on? And are we all going to be programming? Or is it we're going to take on different roles within the group? Yeah, I mean, you you'll be similar to like, Well, in this is somewhat self organizing, there are like in the sprint process, as you go through different steps, someone that's like, independent. So I say you're, you're sketching up some ideas for, you know, some element of the application. The way the sprint, the Google Ventures sprint process works, if you're all supposed to do that. So you all do it, you get together, you look at everybody sketches, and then you, you know, use multi votings and say, Wow, this is really cool. You know, and you identify kind of the cooler, what do you consider to be the team, because it seems to be the core ideas. But anyway, so that's like, an independent effort that everybody's doing. And then as you get closer to the end day, you know, where you're going to actually have the customer? You know, what would be the customer engagement? They're kind of some specific roles that they identify, again, I'm not going to assign those I mean, it'd be up to the team to figure out who's doing what, you know, so it's very much self organizing. Okay. Another question. If I'm enrolled in another class, where are we actually developing the app? Can I like, use some ideas from there? Or like, so basically, like mixing stuff from this class and that class because wireframes and prototypes from this class will have we have for another class was prohibited. So curl, you're trying to minimize your work? Nananana? Try, you're trying to get a twofer. You know, well, it's up to you in the team. I mean, you know, I it should be, you kind of go through the process of the sprint process. And so maybe I'm not opposed to like, if you're doing some work, and another class, and then you could use the sprint process, to refine your ideas, you know, and tune them and develop, you know, your, your your UI, that's fine, you know, but I think you'd have to get whoever's part of your team would have to be on board with that as well. Okay, cool. Thanks. I mean, they may not be excited about the other end of the app. I mean, I mean, typically what I've seen, it's been kind of, it's been impressive. You know, the teams will, you know, we I like last time, it was like, when one team, they were pet lovers, you know, and they didn't feel like, pets were getting high enough quality food. And it was almost like meals to go for pets, you know, you go in and you order this food, you know, and have it and that would be delivered your house, whatever, something like that. So another team did, since this was kind of the start of COVID. You know, it's kind of an app to go and it wasn't just COVID. But it's like infectious diseases, you know, so you could go and you could get stats, you know, on different infectious diseases and remedies. It's kind of like a hub, you know, to go for infectious diseases, I guess was going to be more accessible than like, the Centers for Disease, you know, control, whatever, CBC. So anyway, I mean, typically what happens, I think that the teams that enjoy it the most, they pick something they're passionate about, you know, and then they develop the idea around that particular passion. Thank you. Okay, guys, Well, anyway, yeah, you know, and we'll, we'll be talking about the project more, you know, next class as well and kind of starting to kind of walk you through the steps of the sprint process. But I would encourage you to go to that site, you know, look at their checklist, use the, you know, the remote, Sprint process document that I said, Get get familiar with that. And again, the idea is that, you know, this is like just another tool in your toolkit, that you know, where you're out of the company, they may or may not be familiar with it, you know, and you'd have some experience with how to kind of do this rapid prototyping. So anyway, I'll, I'll let you guys have a remainder of the time to kind of do some networking, think about your project teams. And then, you know, just like I worked during the day, but you know, I typically respond to emails in the evening. If you guys want to talk by phone, happy to set up a phone call, or, you know, the weekends typically are also a good time, whatever. So even though, you know, we're kind of doing this remote, I want to make sure you have access, you know, and you don't feel alone. And you know, so if you got any questions you need any help with, there's some concepts you don't quite understand. Let me know. I'm happy to try to provide as much offline support as I can. Okay, all right. Well, guys, I'm glad we got this. Lesson One kicked off, whatever looking forward to a good quarter, and we'll see you guys again next Thursday. Thanks, Jeff. Okay, thank you. Yeah. Thank you. Okay everybody, hope everybody's doing great. We're gonna get outside enjoy some of the sunshine today. Although I wasn't able to do that, but it looked great outside. So maybe, maybe I'll make my way out tomorrow. Exactly. Got just about everybody. Here's a few more people are joining. If somebody could let me know if you could hear me that'd be great. I can hear you fine. Yes. Okay, thank you. Okay, a few other people are joining Just a minute. Okay, can you guys see the us one more person okay. Okay, should be able to see the deck that I'm presenting? Are you able to see that? Yes, yes, yeah. Okay, thank you. Okay, so let's go ahead and get started. Here's what we've got on tap for tonight, just briefly kind of cover the key concepts from last time talking about the market opportunity navigator, and then we'll you know, get into the Lean Startup model, and just talk about the structure of that model. And then the key part of that is the business model canvas, which is, you know, kind of introduced last time, but we'll just spend a lot of time, you know, looking at that, for this class. And I'm going to spend a fair amount of time talking about the class project. And the first couple of deliverables. I mean, the first deliverable is just, you know, getting on a team. And there's progress, you know, along those lines, but there's, you know, several of you are, at least as far as I'm aware of that haven't been, you know, haven't got on a team yet. And so, kind of need to get everybody on a team. And then we'll talk about, you know, the sprint process that Google Ventures may created. And, you know, they have this five day process, and we'll talk about, you know, Monday of that sprint week, and the deliverable related to that isn't due for quite a while for several weeks, whatever it is, I kind of want to introduce it gets you familiar with it, you know, answer any questions you have before you actually, you know, apply it, yourself. So. So that's what we've got planned for tonight, got a couple of the people that are joining just map. Okay. So, you know, last time, you know, rule, super high level, we've talked about the systems development lifecycle and the sdlc, you know, that's frequently referred to, for software development, but really can be applied to any kind of project or development activity, it all starts with planning, and actually kind of what we were focused on last time, and then this, you know, as part of the Lean Startup model has to do with kind of planning, figuring out, you know, if you're going to do something, and in what area, whether you have the capabilities and the resources to be able to do that, you're kind of making a decision that you are going to move forward and do something, and then you're doing the planning around that. And then the analysis is where you kind of get in and you look at the requirements and start to transition requirements. That may be, you know, fuzzy, if you're kind of talking to, to customers, and you try to make it into a little bit more of technical language, that would lead to the design or whatever, you know, the product or services that you're developing. And then with that design you have, and then you move on to implementation, and, and then deployment, you know, of that new product or service. And like I mentioned last time, you know, you do this, whether you're doing a waterfall development model, or some kind of agile development model, with, you know, waterfall tends to be more sequential, you do kind of one big block, and then move on to the next, in an agile model, you do all of these things, you know, in a rapid cycle. So if it's like a scrum sprint cycle, from one week to four weeks, you know, you would kind of go through these through these steps and cycle through through but basically, you do it, you know, whatever methodology you're using, you know, you're kind of doing planning, analysis, design and implementation. And then last time, you know, we talked about, well, there's just kind of different horizons of innovation. And that first horizon horizon one, you know, the example that I use was like Intel, Intel's coming out with a new CPU. And they're trying to cram you know, more transistor transistors on a piece of silicon. And maybe they're trying to have more, you know, parallel processing or whatever. But basically, there's a well known market, you know, for CPUs, and they've got a well known customer base, and they're basically just trying to improve the performance. So it's more about execution, versus discovering a business model. Horizon two and three are different where you know, horizon two is tangential, you know, it's like we're a company is doing something that's different, you know, maybe there's some legacy capabilities they have, that they can leverage. But really, they're kind of going off on on a different tangent. And so there's more unknowns associated with that. And then horizon three is like an emerging business. So it could be a just a startup, you know, that somebody is developing. And so there's a lot of risk of whether Hey, does anybody want what this company, you know, is developing. And that can be true within a large company, you know, when it's an emerging business, like, I mean, the example I use was, when Amazon did Amazon Web Services, I mean, that was an emerging business, that it had nothing to do with their selling, you know, products via their e commerce platform, it was really a whole new area. And so basically, you consider that horizon three, you know, type of business, or it could just be, you know, two guys in a garage, they get together, and they think they've got, you know, whatever it is the next Google, and but there's a lot of risk and unknowns associated with that. Okay, these pauses are me admitting other people in, so sorry about that. Okay, so lean is the process horizon two, and three, you know, they're kind of well known product management processes for, like, kind of rise in one type of project. But for for horizon two, and three, where there's really a lot of uncertainty about whether or not you know, there's customers for the product, this Lean Startup model can be very, very helpful to, you know, basically determine that, that, hey, there is there is a good business there. And, you know, we got these elements that we're going to talk about, you know, in a lot more detail tonight, you know, the business model canvas, and then this whole kind of customer development steps. And then the iterative model, basically using kind of an agile approach to add on to the product, you know, over over time, but something that's iterative and rapid small releases, so that you can capture feedback quickly. And then, so Steve Blank kind of came up with this a while ago, and then these other folks, you know, came up with this market opportunity navigator, which you could think of, as, you know, an initial step here, the way they kind of characterize this is the market, or the the Lean Startup tools tell you kind of how to play, you know, and the market opportunity navigator tells you where to play, I mean, should you be playing, you know, football, soccer, baseball, basketball, you kind of make that decision, and then you kind of get into the details of that the Lean Startup toolkit, you know, provides. So, what is the market, you know, opportunity navigator? What does it help you do? You know, basically, it's trying to help you determine if there's a customer need, you know, for whatever technology product, you know, service offerings you have, can you satisfy that need better than other, you know, existing solutions? are what are the challenges from being able to kind of go after that market opportunity? And then, you know, how does that align, you know, those market opportunities align with your core values. So, last time, we talked about this company, augury, you know, basically has some technology to listen to machines, and then using kind of machine learning, be able to determine whether or not you know, the machine is operating properly, or may have some health issues, you know, so that some preventive maintenance could occur, you know, in advance of the machine going down and causing some, you know, maybe significant damage or causing some downtime, which would make an end customer really unhappy. So, anyway, this first step is, in this first step is you want to kind of figure out well, what markets could we play in where you start with, well, what are our abilities? So in their case, like, Hey, we got really good listening hardware, you know, small portable, high sampling, right? Hey, we got a great you know, Ai, great, great machine learning with a, you know, a malfunction dictionary that we've created. And everybody you know, we think we got a really good user interface, you know, and it's basically works on the iPhone, and Android platform, so makes it great for people that are, you know, out in the field, you know, to be able to tap into that user interface. So that's what they think their kind of their core capabilities are. And then they mapped it to these different market segments. And so they had a predictive maintenance for commercial machines or consumer, you know, appliances, or medical purposes. And then, you know, based on, you know, an assessment of these core capabilities, they said, you know, we think we're really good fit for like h vac and commercial buildings, manufacturing machines, cooling containers, white appliances, and cars, you know, so then that takes you to the next step, even if it was first step is just okay, hey, what do we think are some good candidate markets to go after? And then that second step is really Okay, we got to fill out this attractiveness map. And so they did that, and there's kind of two pivots along Next one is potential, which is kind of like, hey, how excited are we about this market? I mean, is there a need there that, you know, that we satisfy? And then if there is, need, how much money can we make? You know, I mean, what's the, what's the market volume? And is there growth? You know, so maybe it's pretty big right now, but it's also a high growth rate. So, you know, that's what you're looking for here on this side of the ledger is, you know, kind of how, what's the potential of that particular market, and then, you know, you're fit to it. And then the other side of that market opportunity, or market opportunity, attractiveness is really the challenge, you know, with with being able to go after that. So maybe it's a super attractive market, a lot of potential, but there's just a lot of obstacles to going after, you know, that particular area, as the I mean, so as it turned out, you know, with this particular example, the potential was pretty high, you know, because you look at, like, 5.6 million commercial buildings, and if they sell their equipment, like and generate, like, $5,000, for building, you know, do the math, you're talking billions of dollars, you know, I mean, there's a lot of a lot of potential money to be made. And then when they looked at the challenges, like, you know, yeah, there's challenges there. But it's not super high or high, it's kind of in this mid, you know, this mid bucket or whatever. So then they, you know, map these things out on this grid, on the attractiveness map. And they've got, you know, they put this H back in the gold mine, right, hey, we make a lot of money. But it's not that hard. And then they had some that were really high, really super high volume, like cars, but the challenge was going to be super high, you know, as well. So anyway, they go through this process, and they kind of map these things. And then they get to Okay, well, what are we going after, you know, and so they want to, like, kind of figure out, Okay, what are we going after right now? But what might be like a growth option, or backup option? And what are like, you know, it doesn't look too interesting, right? Now, we're gonna put it in storage, but you know, I don't want to forget about it, whatever. And so there's a, you know, this worksheet to kind of figure out what the backup and growth opportunities could be. So, you know, here, they decided, Okay, we're gonna go for the H vac for the commercial buildings, but they have these other markets that we're looking at. And, you know, they look at it against two different criteria, the product relatedness, and the market related. And so the product relatedness, and this would be like, high, there's a lot of overlap, for H HVAC for residential buildings. Well, why? Well, it's h HVAC, you know, they're doing h HVAC for commercial buildings. Yeah, there's differences between h back and residential buildings, but it's not that significant. So that's why there's high overlap, but it's a different channel, you know, the people we're selling to are different. So there, you know, there's some similarities, you know, in the language we would use to sell the product, you know, the, the kind of the market positioning, but it's not super high, you know, overlap whatever. versus if we're selling to for elevators, the market relatedness is pretty high, because we're selling probably to the same people. But the product relating this is a little little different anyway, they go through this process, and they identify, here are ones that could be good growth opportunities. Here's one that's like a backup opportunity. And the difference there is, you know, the backup should be should should not have a lot of the same risk. Okay, because you're safe, this doesn't pan out. And a lot of the risks are the same with the backup, then you're kind of screwed. I mean, you're basically Oh, wow, you know, I mean, the same risks could affect you with your backup. So you don't you want your assumptions and your risks to be different for your backup. for growth. It's okay to have that overlap. You know, so anyway, you end up with this focus, dartboard. You know, which is Okay, here's our target. But here's some stuff, we're, you know, we're keeping open, which is like a backup or growth opportunity. So that's kind of how that market opportunity navigator, you know, works. And then you know, that would feed this Lean Startup model, which again, you know, the first step there is that the business model canvas, then you go to, you know, figure out your customer development, you're basically talking to customers a lot to basically validate, you know, the assumptions you made in the business model canvas, and then you're iterating. So, you know, the business model canvas is, hey, the hypothesis of how you create and deliver value for the company and the customers. And we'll get into that in a lot of detail, you know, these are the kinds of questions that you want to answer, you know, questions you ask, and then the answer, come up with a hypothesis or a guess, for each of these segments. And so the, it's a guess, you know, when you're starting out, it's a guess that you have to go then talk to customers and validate. And, you know, what Steve Blank really uncovered, is that, you know, for, for decades and decades, you know, founders would get together. And, you know, they may not have been using this template, but basically, they were making guesses about their value proposition, their customers and their channel, and how they're going to make money. Maybe they were writing some of those down or not, or whatever. But the key thing that he discovered is that, you know, a lot of times they're not out talking to customers, so they think that what they have in their business plan is fact. And what Steve Blank says, No, you know, it's what you think I mean, you think that that's what the customer cares about. But you got to realize this is just a guess, and you got to get out and basically talk to, you know, to customers. And so you change these guesses to facts, but the facts aren't going to come from you and your team, they're going to come from the customer. And through this process, you know, called customer development, where you take these hypothesis, you go out, you talk to customers, and, you know, you either prove out that Yeah, okay, these actually are pretty accurate, or they're not, and you tune it. And if it's way off, then you've got to pivot, you know, it's like, Okay, wow, we're gonna kind of go down, we're going down this one path. And guess what, if the dead end, you know, then there's nothing there, there's no customers there. And so we need to pivot. And so you get to the point where you think you got something, you know, and then you go to customer validation. And that's where people are paying you, you know, for, for what you're doing. I mean, that's kind of the validation, you know, that the acid test for validation is people were part with their colder heart, you know, earn cash, to buy your, your service your product, and then you cross over from Okay, this is the search process we work for, like horizon two, and horizon three, you know, you're trying to search for a business model. And then when you cross over here to execution, it's like, yeah, okay, we got it, you know, we tuned it, we've got momentum, we've got people paying us money, and now we need to scale. And so we scale our customers, we scale our company, or whatever. So how is this different than the way things used to be done? Well, this is where most of the startups they were here, you know, mean, basically, they'd be in a closet, you know, in the garage, you know, in stealth mode, you know, developing their thing, thinking it's gonna be the next Google, okay? And they're gonna make a ton of money, and everybody's gonna love their product, and they haven't talked to any customers. And then they just, they get go out and raise money. And they start still hiring people, and you know, getting a bunch of sales people and they get out there. And they find out, guess what, you know, nobody wants this. And, but at this point, year, I mean, year know, many months, if not years have gone by, and a whole lot of money has been spent, and probably wasted. So anyway, that's the whole idea behind the Steve Blank, lean startup model is is like, hey, let's stay lean. Let's discover our business model. Let's discover, you know, this product market fit, then, you know, once we've nailed that we'll scale. So, you know, what are these phases of customer discovery, which is this part, you know, over here? Well, you know, you're in the building and you come up with your canvas. I mean, so basically, yeah, you come up with your guests. Yeah, here's what we think we're gonna have, we're gonna do this, this is going to be our value prop, you know, here's the customers, we're going after, here's how we're going to reach those customers, here's how we're going to generate all this revenue, you know, blah, blah, blah, blah, blah. And so that's phase one, phase two is you go out, and now you're starting to talk to customers, is trying to find out what is it that you need, you know, and they're going to try to see what she does, does our value prop match up with what these guys are telling us that they need? The key thing is, it's no longer in the building, you're out talking to a bunch of customers getting out of the building, and you're putting something in front of them. So they kind of understand, you know, what it is you're talking about. And so you can kind of, you know, get some accurate feedback. And, you know, then with that you kind of get a high fidelity app or prototype. And you're kind of testing, you know, the understanding that you have the customer need with that, and then, you know, getting some more feedback here. And you come over to Yep, this is what I need, or not, you know, and if it's not, then there's like this pivot, and it's like, okay, yeah, you're on, you're on the right track, then you need to go to this customer validation phase, where, you know, you're, you're basically starting to develop some, you know, a higher fidelity, minimum viable product. Again, it's not like, a totally finished product. But it's more than, say, the wireframe, you know, that you were showing, you know, in the in the last step. So it's an initial, you know, MVP, and then you've got some sales collateral you've developed, and then you're getting out, and you're, you know, just trying to sell that, that solution, and you're developing your positioning you're finding out well, and what positioning is, is like, you know, how you're describing your product or service, and why it should be of interest to the customer. You know, a lot of times, you know, certain things that you can say, will resonate more, you know, with the customer, you know, so that that's part of the discovery is you're kind of talking about your product, and, you know, some of its benefits, and you find that certain things really resonate, like, Oh, yeah, well tell me more about that. Yeah, I'm really interested, you know, in how you can help me do whatever, you know, and so you go, okay, you know, we're finding, you know, the talking points that, you know, really are resonating with the customer. And then you get to this, you know, phase four, again, where it's like, okay, is this repeatable and scalable. And if it is, then you kind of move over, you know, you cross that chasm into customer creation, where you're scaling out the number of customers, you're going after, and you're scaling up your company, and you're, you're starting to raise more money, and then hire more people, whatever. But again, you know, you may find you go through this and you go, you know, what, no, no, no, it's, we thought we were onto something. But we're still we're not there or whatever. And you got to pivot, you know, again, before you go on to, you know, customer creation and scaling your, your business up. So, you got these guesses with the business model canvas, you've got this, you know, these two sections of kind of discovering the business model, through customer development, and then scaling your business, once you've been able to dial that in. And throughout the whole process, you're, you know, you're using your agile, you know, you're not doing some big thing that takes months and months and months, and then you get in front of customers, no, you're getting what's critical in a minimum viable product. And you're getting that in front of the customer. And if they like that, you key, add some more, and you add some more, you add some more, you know, and that's the whole idea that this, this agile approach ties in with this, you know, with this lean startup, part one and part two model. Because, like for traditional product management, what would happen is you'd have product managers, they go through their studying, you know, what they think the customer wants, and they come up with this big huge document, you know, and they're kind of telling the customer, here's what I think you won or whatever. And a lot of times with little input from actual customers. So it's people in a built in their own building, you know, coming up with, with what they think that should be in the next product. And a lot of times that would be geared towards like a waterfall model where you know, it could take a long time, you know, sometimes many months or years to Get a product out the door. And a lot of times when you do that you find out this, this isn't what I wanted, you know, so months or maybe years of effort have occurred. And then the customer says, No, that's not what I need or whatever. And so the idea, you know, obviously, that's a horrible waste. If you've done that, you know, you've had a development team working for months and months and months, develop something and nobody, nobody wants it, or a lot of the features and functionality that you develop, nobody's using. So that's why, you know, this whole concept of the minimum viable product is part of lean, which is, like, you know, requires you to focus like, Okay, what are the most important features, that we need to be able to go out and get feedback about, you know, the business, the market we're going after? And so you do that, and then you're able to demo it, you're able to get feedback? And well, what do you think about that, you know, change this, it's better, but, you know, hey, I love it, you know, thumbs up, or whatever. Anyway, there's this iterative loop that occurs, by being able to rapidly, you know, increase the functionality, but not not the full functionality, just add in layer by layer layer. So anyway, it gets this virtuous cycle where you're getting feedback from customers. And in in short order. So for the minimum viable product, you know, it's really trying to limit the feature set, so that you can get the most learning feedback, you know, in the shortest amount of time. And, you know, ideally, since you've got this business model canvas, it's going to, you know, what is going to enable you to test the hypothesis or the guesses you have in your business model canvas. So that's kind of the idea behind it. And then the pivot is just, you know, hey, you know, maybe you're going to be wrong, you know, that you're kind of going down one path, and you find out that it's not the right path. And so we got to pivot. But it's not a crisis. In the old days, I mean, silicon on says, the old days is, a lot of people are using this. So it's still like today, you know, you'll you'll have crisis where a startup was formed, they convince some people to give them a lot of money, they built up a large, fairly large company, and they've got no business, you know, nobody wants their product, or whatever it is, and then that's a crisis. With this model, it's not a crisis, because you're small, you're lean, it's not taking you a lot of time to get to this point of the pivot. And so, you know, weeks and $100,000, versus, you know, months and millions of dollars. So that's the idea behind the, you know, the the pivot is that you get out, you get the, you know, the MVP in people's hands, you get the feedback. And, you know, you decide, okay, hey, we're on the right track or not. And if you're not what, so it's not, that's not a problem, it's like, okay, you know, what can we do, you know, what, how can we maneuver to be successful? And a key thing about, you know, a pivot is this pretty substantial, you know, it's a substantial change, you know, it's not like, okay, we added some additional features, you know, we just be would be like an iteration, you know, like another sprint in a scrum model. A pivot is like, yeah, we were heading one direction. And, you know, it's a pretty significant course correction. And, you know, pivot cycle time matters, you know, you want to be able to, you want to, you want to get to this execution phase as quickly as you can, you know, because that's where the real money is. But you don't want to get there prematurely. You know, you want to get there with a product that people really want or whatever. So this cycle here, you know, you want to go as fast as you can, you know, because it minimizes your cash needs, because, like, right now, maybe you're making some money, you know, as part of this customer validation phase, but it's not a lot of money. You know, so you're trying to, you know, say, okay, you know, where can we make our money, and then as soon as we're locked on, like, Okay, we've got a good business model, you know, we got a good value prop, we got a good product market fit, boom, then we can get over the execution. So the minimum feature set, you know, speeds up cycle time, and you can, you know, you guys are developers, you would understand that, that, you know, if I give you like, you know, 1000 different features that have to be implemented before this thing, can, you know, a software product, you can launch? Well, it's gonna take a lot of time, you know, to be able to do that, are all those features equally important? Well, of course not or whatever. So, that's why is like, hey, what is absolutely necessary, you know, to get the feedback, you know, from the from the customer, and that's what you focus on. Okay, so that's Like the, you know, the the Steve Blank model for the lean startup. And then now we kind of move into this business model canvas. And we'll get into the granular detail you know about these different elements, you know, in the business model canvas. And the first step, you know, first off, I got a I got a little not a quiz, but knowledge check. So let me see if I can. Okay, so let's see if you can see the Yeah. Okay. So take the poll. Can you guys see the pole? Hopefully you can? Yes. Okay. So this one I'm gonna be using, you know, instead of like, if we were in class, I just be calling on people. Hey, you know, this is a way for me to just see if you guys are getting if you're getting it or not. And if not, then you may go back and talk a little bit more about a particular topic. So try to go ahead and complete this as quickly as you can. It's all simple. true, false. Can you guys see the poll? One student said that disappeared? Oh, no, I was able to complete it. Yeah, I can put it into. Okay, after competition goes away. Yeah. Oh, after you get the last, okay. Yeah. Okay, don't sweat this too much. I mean, I'm just trying to get a gauge of like, Hey, you know, if everybody's getting one wrong, like, Okay, I need to go talk about that one some more. Because it wasn't clear. It's not going to stop it. Three minutes here. So looks like question one in three needle for more people to respond. Oh, no, we're pretty close. Okay. Okay. Well, no, we're there. Okay. So let me go through the so the Lean Startup model is best suited for horizon two and three process Yeah, that's that's right. You know, rising one, again, think Intel or something accident existing product, you're doing a follow on product, you're already generating a lot of revenue, you got a lot of customers in that particular market, then you don't need you don't need lean slean is trying to Hey, you know, do we have the right market? You know, do we have the right product market fit or whatever? Number two, the market attractiveness map plots a market opportunity by its business potential and challenges to pursue it. Yeah, that's right. Yeah, that's exactly what you're trying to do. You're trying to find the most attractive market to go after. And then the last one, in addition to the market opportunity that you will pursue is recommended that you have five to 10 backup opportunities that you pursue in parallel. No, you know, they kind of recommend, you know, having a growth, opportunity and a backup opportunity, you know, but yeah, you need to have focus. I mean, even if you're a large company, you don't want to have like 10 different backup opportunities that you're pursuing. So yeah, you want to have a backup and a growth opportunity. But, you know, so just a handful, you know, maybe two or three, not five or 10. Okay. Okay. Sure. Okay, cool. Okay, let me get back in the, in the deck. Okay, so, so now we're going to talk about the business model canvas. And the first thing is like, what is the business model? You know, and it's not that complicated is like how a company creates value for itself, while delivering products and services for customers. But there are these different, you know, elements to consider. And we'll go through each one of those in detail. So value for itself, you know, it's a lot of times comes up in terms of revenue, you know, how are you making money, you know, as a company, and then you're obviously going to do that by providing something of value to, to customers. So, I'm going to get out of PowerPoint again, and I'm going to talk to you about I'm going to show you a video of this company, Blue River technology. So they were, you know, they were kind of some early adopters, they went to some, I think, like a Lean Startup launch pad that Steve Blank had or whatever, but it's an interesting story, you know, so they kind of had this idea for robotic lawn mowers, again, it's a combination of hardware and software, you know, that, that idea that they had, and, you know, they thought they were gonna, you know, go sell these things to golf courses. So, you know, they've got all these automatic lawn mowers out there mowing the, you know, keeping the course looking good. Anyway, so we'll, we'll look at the founder story. And, and then we'll kind of, you know, get up to speed on like, well, what are they doing now? You know, how is it evolved, whatever. And I think that's kind of interesting to see, you know, a lot of this stuff, it'll, that's the thing I like about the lean startup is, it's very practical, you know, it's not just theoretical pie in the sky. I mean, this is something that you know, the companies are using, and you can, it can help you, you know, and so by looking at some of these testimonials, it will make it more real for you. So let me, let me try to share the Okay, it's my work. I'm the CTO and co founder of Blue River technology, roboticist. And my expertise is in computer vision and machine learning. I'm Jorge Harada. I'm the co founder and the CEO. My background is in engineering and got to learn precision agriculture really well. Started out the lean Launchpad class with designing an autonomous lawn bar. And we went out, we talked to all these different customer segments. And they didn't want to fund this llamar really exciting from the engineering side, not really a viable market there. We started talking to some of the guys on the ag side, they had big busloads of people coming in and pulling weeds. And that's what they needed. They didn't need somebody to drive around their tractor, if they had people to do those operations. They needed people to go out and they needed the weeds to be removed. Steve Blank had been talking about a minimum viable product, this concept of MVP applied really well to two software companies. But we were wondering, gee, can we use the same the same idea to hard work. And so that was what we did, it was it was kind of this incredible, you know, it's time to build moment, you just sleep in lab, you filled the whole robot the whole week, then you go and you take it out, you test it with the customer. But that was actually a crucial point in getting the next stage and credibility with the customer. Even though it wasn't perfect, or a bunch of parts of it. That didn't quite work. But getting it out there getting it in their hands, having them give us a first pass and looking at it really taught us which parts of it, we need to go back and redesign in which parts they're just stunned and blown away by original Canvas had to selling the equipment through a value added reseller. But what we got from talking to customers was that they were paying a service currently, and that we would come in and we would be almost a direct replacement, in that instead of buying a piece of equipment. They would hire us as a service to go out and do the operation. We met a customer that we had really liked. They given us a lot of feedback. They were very willing they'd actually tried to build let us thinners at several points in their history. So was just kind of like a light coming on, in that if they're willing to go out and try to build these machines, they really have a pain point, we'd found that lettuce thinning was a perfect opportunity. And so we pivoted away from weeding and carrots to them building a lettuce there, we were able to raise money from angel investors get a grant from the NSF and SBR grant, we were able to show our prototype to our first potential customer, the largest lettuce grower in the US and get them excited. And with that excitement, we were able to bring some of the VCs can even see that machine into the field, talk with the customer and eventually get our series a funding from Khosla ventures, which is a prime VC, especially in the area of agriculture. And without going out and talking to customers, we wouldn't have gotten their insights. And so the customers have way more insights that we had, and that we could have come up with different sets of machines. But they had been thinking about their own problems for so long. If you just go out, you try to sell, maybe you'll find some buyers, maybe you want, but you really won't be learning about what you should be doing. So let's check in with these guys again, and just see where they're, you know, how some of their technology products have evolved. Since then. We're seeing lots of resistance to Roundup, we're looking for other ways to combat the weeds and still have cost savings. On top of everything. We saw an opportunity to take cameras, computers and artificial intelligence to allow ag machines to see every plant in a field, we thought that we could give farmers the ultimate flexible tool to treat their field and manage the field in whatever way they want it by having the knowledge of every plant and its situation and an ability to spray very precisely, whether it be herbicide only to the weeds or fertilizer or fungicide directly on each plant that needed it. Each field they go to has a different set of conditions, and they need to be able to adjust and correctly set that machine's performance for the field. One could be the protection of the cotton plant and how big of a buffer a safe zone that we provide the plant so that when you apply selected materials or not selected materials that we have the appropriate buffer. Another dial is how aggressive Do you want to be at going after anything that looks like a weed. There's also some opportunities to inform the grower of how many weeds the system see, even what kinds of weeds exists in the field that they can start to tailor their herbicide programs towards those weeds. The cameras and computers on a scene spray machine are using deep learning algorithms that are similar to what's used in facial recognition. The first time we saw pigweed, the machine didn't know what kind of planet was, but we taught it by giving it 10s of 1000s of examples of that pigweed. And now it's an expert in pigweed, we save up to 90% of the amount of herbicide that you would spray if you were spraying the entire field, the weeds have become a little bit more of a past and what they were originally they become resistant to a lot of the herbicides that we've been using along with the rig which have other options open to us, we can spray different chemicals that were not able to spray before we can take one man and put him on a tractor and we can do the work of eight to 10 people, we're seeing no end to the use of this technology, essentially anything that may be cost prohibitive, or more difficult to do when you're spraying on a broadcast basis. But much more grower beneficial if we're spraying on a very precise basis. That's kind of interesting to see what's happening in the ag space. You know, I mean, tech Tech has been an ag for some time, you know, with the tractors being able to, you know, drive a certain profile, whatever, but you have like applications, like Blue River. And then with drones, one of the one of the market areas that looks to be very attractive is what's called precision agriculture, where drones will be flown autonomous drones will be flown over fields, and with different sensor packages, and then they can determine maybe, oh, there's a certain area of field not getting enough moisture, or maybe there's some pests, you know, in a certain portion of field and yeah, you could have these drones flying several times a week. And then that's that information then downloaded to the farmer or you know, they have basically a heads up of what's going on, you know, on their in their particular field and then he could combine it with kind of stuff that Blue River is doing, you know, to be able to compensate. So anyway, a lot of things Exciting stuff happening and a lot of exciting stuff between software and hardware, you know, there's kind of these IoT, the information of things in our Internet of Things, rather, where, you know, they're gonna be more hardware devices, but then using sophisticated software and then network together, to be able to, you know, provide better answers, you know, to, to problems that are out there. Me, so let's go back. Okay. So anyway, so, you know, Blue River has a whole bunch of, you know, case studies that Steve Blank has of companies that have used the Lean Startup toolkit and the business model, you know, Canvas, and kind of the, one of the key areas of the business model canvas, that, you know, if you're, you've got a new product is like, well, what's your value proposition, and you know, where the value proposition should start is with the customer meaning, you know, the customer has some need or problem. And that's what you're, you know, addressing, you're trying to get a really good fit between what you can offer a customer that's, that solves some problem they have for, you know, satisfy some need that they have. So, you know, what are different types of value propositions? You know, a key one is something new, you know, until Apple's been famous for this, you know, coming up with some cool new gadget, you know, and, and basically, it satisfies some needs that customers have, that maybe they didn't even perceive, you know, like, why didn't even know, I needed that, you know, until it was developed. So that happens all the time, you know, if you ever find yourself saying that, like, yeah, you know, Wow, I didn't, you know, I didn't think I needed that, but now I can't live without it, or whatever well, is probably the value prop was, had newness associated with it. Performance is another, you know, key value prop. And so, you know, kind of the Intel example of cramming more transistors onto some silicon, you know, where you can get higher speeds, or, you know, more memory, I mean, that's an example of, you're increasing the performance of, of the product, sometimes people you know, that they have a specific need. And so customizing the product to meet that need is, you know, part of the value proposition, or just value in getting something done, there's some problems, some challenge that somebody has, and you create a solution that helps them get, you know, just get that job done. brand, and status is another type of value proposition or whatever. So here, you know, you could think of like luxury brands where, you know, maybe the product is really nice or whatever. But then, you know, really what you're buying is status. So, I mean, maybe, you know, best example here is just think Nike, you know, Nike shoes, and Michael Jordan, you know, or LeBron James, you know, it's just like, okay, hey, yeah, it's a great shoe. But when somebody you know, back in the day, you know, when Michael Jordan was playing is like, hey, I want to be like, Mike, well, you know, it's, oh, well, I gotta have Nikes, you know, so that's the idea. You know, typically, we have a brand or status, somebody, you know, is being paid, maybe you got some movie star, sports, figure, whatever, there's some way you're creating, you're saying, hey, if you buy this product, you're going to be like this person. Anyway, that's the way you know, companies sometimes differentiate their products through brand. And status. I mean, Apple does this to some extent, you know, if you think of motorcycles like Harley Davidson, you know, again, as a cool motorcycle, but there's this status associated with you know, owning a Harley or whatever, you know, price, we all use price to kind of differentiate, you know, if you feel like you're getting good value for a product, you know, and it's reasonably priced. Well, okay, that makes it more attractive. cost reduction, you know, is another area where, okay, if you can come in, you know, I mentioned that example, had a friend of mine who was working on winglets for aircraft, you know, where it would reduce the drag of the aircraft and reduce their fuel costs. So here you come in and, you know, they have a certain fuel cost before the winglet. And then after a is a dramatic reduction to where these winglets pay for themselves in a matter of months. Well, that could be you know, the value proposition you're going to you're going to reduce my costs by some amount, and the cost and the amount of money I have to pay to get that cost reduction is far less so it's attractive for me to do that. You know, accessibility bringing products and services to people you know, that lacked access. access to them before as another type of value prop. And then of course, you know, this is something Apple is very good at is convenience, usability, you know, making things easier to use more intuitive to use, I mean, so that's kind of almost like the anti, any more with any some type of software product that, you know, I mean, if it's, if you've got to have a user manual, you know, for somebody to use your product, you probably need to work on, you know, the convenience and usability because they're not going to read the user manual. Although I do for some reason I, I go through user manuals, but anyway, so those are types of value, you know, proposition. So as you're thinking about this new product, you get your team together, and you want like, okay, you know, we're going to build this new product, you know, well, what value prop, you know, what is the value proposition that you think you'll bring to bear, you know, with that new product or service. Another part of the, the business model canvas is the customer segment. So, you know, just basically understanding who it is you're going to be selling, you know, to, and typically, you want to get a good, very good understanding of who those customers are. And so at larger companies, you'll have something like a persona, you know, their customer persona, which is basically trying to describe, you know, who you think those, those core customers are. So, hey, 24 years old, male city dweller, you know, avid social media user, single income, you know, you try to kind of get some idea of who it is that, you know, you're going after, and they you know, it broadly though, they'll fall into these different categories. So like, mass market, you know, the value prop distribution channels, and customer relationship, relationships, all focused on one large group of customers, with broadly similar needs and problems. So think, you know, like consumer electronics, think like an iPhone, or an Android device, or whatever. I mean, there's, they're selling to all different kinds of ages, male or female, you know, variety of different income levels, US market international markets, I mean, so that's what is meant by a mass market, you're finding a group of customers who basically have broadly similar needs or problems and your product, you know, will address those, the other side of the coin is a niche market, you know, I mean, you're, you're selling cute sweaters to owners of, you know, a Siamese cats, you know, or it's just easy. So, there's some really, really niche market, but that's who you're, you know, catering to, and they have a very specific need that you know, or problem that you're trying to address. And then you get into, like, you know, segmented customer segments or diversified. So, a lot of times, you know, larger companies have a, you know, have a diversified customer business model, where they'll have customer segments that, you know, basically are somewhat unrelated and have different needs, you know, and problems. And so the products are adjusted to be able to kind of handle that diversification, maybe through different models, you'll have, you know, a model for one segment, and then another, you know, totally different model for, for another, and they may share some core, you know, some core elements, they may ride on a similar platform. And then you have multi sided platforms or multi sided markets. So, an example here, you know, you can think of like, you know, the Google search engine. So, obviously, you have, you know, end users that are trying to find some information, you know, on the internet. And so that's kind of one constituency. And then another constituency, are advertisers, you know, that are trying to get their message in front of that audience or whatever. And so, you know, these are two different types of customers up there, what you would call interdependent, you know, where, obviously, if there aren't a lot of eyeballs on the search platform, the advertisers aren't going to be interested so you got it, you do things to kind of keep, you know, people searching, but then there's also needs to be hooks, you know, for advertisers to be able to get their messaging in front of the right customers. So you'll see that like with a search engine, gaming, you know, like the place to And Xbox platforms are, you know, similar where, you know, Microsoft would build the export Xbox platform, you know, and it had a lot of capability that would drive gaming developers to develop, you know, new games for that platform, which would then in turn, attract gamers to go buy the console, you know. So anyway, those are examples of multi sided platforms, where you have interdependent customer segments. So, you know, you have to think about, okay, hey, are we are we going, you know, mass market? Are we developing some type of, it's a website or mobile app that before the mass market, or, you know, we going after the owners of Siamese cats, or you know, it's a niche market, but we're going to provide something that they really, really want and are willing to pay for, you know, etc? Are we developing some kind of a multi sided platform? And that's the, and then we'll have maybe two to three different customer segments that are tied to that. And there's this concept of channels, which, how does the product, you know, get from our company to the customer? So we, on the old days, it used to be physical, you know, typically did with shoe stores, you know, it's like, okay, we have our own stores, or, you know, do we sell our product, to some retailer, or retailer, you know, now you get a lot of products, you know, through web and mobile, you know, channels, so. So there's different types of channels, and then there's phases of the channel. So let's just start up, like you have your own sales force, you know, you're you're selling directly. So like in that augury example, you know, where they were going after commercial buildings. And they were going to try to get their systems on h fac systems within commercial buildings. Well, they have their own sales force that goes down there, they're calling different building owners and saying, Hey, we got this great product that you know, is going to reduce your operating budget by 13% a year. Anyway. So you know, that's one example of a direct sales force. Sometimes you work through partners, you know, so you sell your product to a wholesaler, you know, who might sell it to a retailer. And it's the sales force of that retailer, which is selling your, you know, your product. So if that's indirect, and, you know, sometimes you might have your own store, so you might just just sell over the web, you know, you have no physical, you know, brick and mortar at all, you know, and basically, all the sales are over the internet. So those are channel types. And then there's these phases, which is like awareness. Like, you'll think about this, like, okay, yeah, we developed this new, cool app, or how does anybody know about us? I mean, how are they going to even know, to go download, you know, our app? How are they going to, you know, find out about us? So, you know, you got to create, find a way to create awareness. You know, sometimes this is through news articles, you know, some magazine says, oh, there's this new great app, you know, you should try it out or whatever. And there's a link to your, you know, your app on the apple marketplace, or the Android Marketplace. And then how to, you know, how do people evaluate it? How do they purchase it? How do they get it, you know, how's it delivered to them, and then support, you know, I mean, which is actually, sometimes a big problem these days, where, you know, it's hard to get after sales support, you know, you, you call the customer support number, and you find out that, you know, your, your call is very important to them. And you hear that, you know, message for like three hours and you kind of figure you're, you're you're actually not that important. So anyway, these are, these are kind of the fate channel phases. And then here's how you kind of get your product to market. customer relationships. So there's like channels, you know, they're different ways to build relationships with your customers. So you want to get customers, keep your customer and ideally, grow your customers. So, you know, how do you go about that? And there's different ways you could do that, you know, sometimes there's personal assistants. So actually a human on the other end of the line. Sometimes it's very personal, so dedicated. So imagine, you know, for a lot of people that have investments, they may have, you know, their own investment advisor. So instead of getting just anybody that answers the phone, you know, Susan answers the phone, because she is she's working on your investments, you know, for you, you know, a lot of times, you know, company or for many years, companies have tried to save money, you know, they wanted to provide better service, but they also want to save money. And so they've used self service and automated services, you know, self service. So you go on, and there's some kind of, you know, help files that you get directed to, or automated services or, like, you know, if you want to know, your balance, press three, or whatever, you know, and he basically get directed to, you know, be able to get the information you want. But in an automated fashion, without a human, you know, having to think beyond the line, communities are huge in the software area, you know, so, you know, Microsoft would develop, you know, experts out in the field, that would didn't work for the company, here's their, like, independent consultants, that would get special training, and will get early releases of software, and then for that, they would help build a community, and then respond to community questions that are, you know, somebody has a question about the product, you know, those people would weigh in. So as a way of kind of augmenting, you know, the customer support team at a company like Microsoft, for free. And the benefit to the consultants is that they may get some consulting business, or they develop a rep reputation as an expert, for a given, you know, product or service. And so they could generate some business that way. And then co creation is where, you know, there's some partnership between companies and their customers. So like Lego did this with like Lego allowed customers to come up with a customized, you can basically come up with their own Lego kits, and then sell them, you know, and the customer was responsible, there were some tools they could use to develop the little Lego pieces or whatever. And then those could be ordered, you know, by people in the Lego community. And so it's a way for Lego to kind of increase the number of offerings without having to develop them all themselves. So. So that's kind of an idea of like, co creation. Revenue Streams is another, you know, important part of the business model canvas, which is, hey, how's the company going to make money from each of its, you know, customer segments, and what is that value that the customer is willing to pay for. And so there's a lot of ways to do this. You know, in the old days, it used to just be an asset sale, you know, and if you go to Costco or a grocery store, I mean, that's still the way it works, you know, you go in, you get some, you know, food, and then you give money, and then you have, you're able to take that home or whatever. So, that's still in wide use today, you have usage fees, where somebody gets access to some physical product for, you know, a period of time subscription fees, which in software is huge now. So I think, you know, office 365, you know, used to be packaged product, you know, that you would buy at a retailer, and you would take, you know, Microsoft Word home and load it on your computer now, you know, you get it over the internet, you know, so it's a subscription. And every year you you know, you re up or whatever. And then a company like Microsoft or sales force, that has a CRM tool, they just continue to add functionality to and so you continue to get new, new functionality and continuous access to that software. And you're paying a subscription, though, it's not a you know, not what used to be a licensing model. So this is the way it used to be, you know, you didn't own the software, but you have a license to use the software, basically indefinitely. Although, you know, software companies would say, Hey, we're not going to support this product anymore. So, you know, they would make updates, updates, updates and at some point in time, hey, okay, we're not making any more updates. And you know, in the day before all the security breaches saying yeah, that wasn't that risky say, Well, yeah, I kind of like the functionality on the product. And so I'm not gonna go upgrade to the new version. Now with you know, security breaches being prevalent and, you know, older software being at more risk. That's another reason where, you know, getting something online, you know, you know, it's got the most up to gay up to date security protection that's available. But anyway, those are you know, Ways to sell software subscription licensing, lending, renting, leasing, you know, if you pay rent an apartment now, you know, that's kind of you don't own the apartment, you're just, you know, leasing and renting it for a period of time. And then you know, you know, brokerage fees where somebody is an intermediary, and then you pay them for the service that they provide. And then, you know, advertising is a very common model, especially say, from broadcast media, where, you know, you get to watch television for free based, basically, you know, if you're getting over the air, you know, channels, and the advertising that's on, you know, TV is basically paying for that, if that's how the broadcast companies are making their money is by selling re advertising. So these are different ways to, you know, to, to make money, you know, again, for software as a subscription, and, you know, licensing are still, you know, quite common as is advertising. You know, if you think about, you know, Google as an example. And then, you know, pricing mechanisms are kind of tactics under you know, how you, you generate revenue. So, you know, you can have fixed menu pricing, you know, our dynamic pricing that changes based on market conditions, or whatever. And sometimes, you know, the, the pricing varies based on the features, you know, so you will have a, you know, platinum version, or basic version, or a low end version, you know, so that's quite, quite common. And then sometimes it's volume dependent, you know, so if somebody buys a lot, you know, buys a lot of a particular product or service, well, they're going to get, you know, a higher discount than somebody who's only buying one. And then, you know, dynamic pricing, you know, could be based on a negotiation that occurs, could be on what's called yield management. So, you know, think airlines, you know, and probably, I know, it's frustrating for me, it's probably frustrating for you to go in, and you want to book a flight, and from like, one day to the next, you know, the price of a seat can vary dramatically, you know, and so that's all yield management, it's based on how many seats that airline has booked, you know, and as time goes on, and they, you know, they haven't booked, same thing with like hotels, you know, they the price could change based on, you know, the, the seats that are available on that particular airline, real time market, I mean, you know, you could have this, for, like cloud computing resources, where there are times where, you know, certain times, you know, where a lot of the assets are not being used. And so, you know, you can get a better deal than if you're kind of using something in primetime, you know, when there's a lot of demand for it. So services, like cloud services, you know, whether you're talking about compute and storage, networking, that can vary based on kind of real time, you know, changes. And then of course, like, the stock market is an example of, you know, a real time market where, during the trading day, I mean, the price of a stock, you know, is very all over the place, you know, based on supply and demand. So, anyway, these are, you know, different pricing mechanisms that can factor into, you know, how you generate revenue for your company. Another key part of the business model canvas is, well, what are the resources that are, you know, that are needed, and typically fall into, you know, these types of categories. So, these are the most important assets that you, you know, for your company, so, for it to be, you know, functional, so, as physical, you know, which, in the pre COVID days, you know, you need a lot of buildings where people can get together, you know, and work, you know, if you produce a physical product, like, you know, my company does, well, you still gonna need manufacturing facilities, but I think what COVID has shown is that, wow, you know, people can actually work effectively, you know, remotely, and so it's going to be interesting to see if commercial office space, you know, if there's a glut of commercial office space going forward, as companies try to save money on physical office space. You know, I don't know you know, people, you know, still I think you do your best work when you Together, you know, and working side by side, or you can get together in a meeting room or whatever. But people have been pretty effective, you know, using zoom and other resources, you know, in teams, and slack to be able to, you know, work effectively, remotely. But anyway, if you've got, you know, physical facilities or machines, I mean, that's all something you got to pay for. And then there's intellectual, you know, property. And that could be, you know, brands that you've developed or proprietary knowledge or patents develop, up, which I say, my particular my current current company, we, you know, kind of our some of our special sauce is what's called metamaterial metamaterial design approach. And there's a lot of patents that have been developed around that. So that is a protection for the company, but it costs money to develop that intellectual property, you know, basically talented people to, you know, to develop that. And then human resources, you know, I mean, that's obviously very prominent with, you know, if you're developing a software product, you know, you got a lot of intellectual property, but then, you know, human resources, developers, testers, sales people, you know, that are required to, for your business to be successful. And then financial resources. So, you know, you need money, you need lines of credit, you know, stock option pool, you know, and in typically, in tech in the tech industry, you know, you want your employees to feel, you know, connected and feel like an owner. And so you make them an owner by having, you know, stock options that that you provide them. So, those are some examples of key resources. And then key partnerships. You know, the main point here is that typically, most companies, you know, they don't want to do it all, it's just that doesn't make sense for, you know, the company to be extremely what's called vertically integrated where they do everything. And so, you know, you'll have partnerships companies that you work with, and you divvy up some of the responsibility or maybe some of the risk. So that's the idea behind, you know, partnerships. I mean, there are examples of companies that are out there that are extremely vertically integrated. One example, that I'm very familiar with, this is SpaceX. So SpaceX is one of Ilan Musk's his companies. And so, you know, he, he, you know, so he went in, and he, you know, after he made a bunch of money in PayPal, and he said, Hey, you know, what, I'm gonna develop my own launch vehicle, you know, and before that time, I mean, the entities that developed launch vehicles, were governments, you know, the United States government, you know, who then basically pay a aerospace prime contractor, like Lockheed Martin, you know, or Boeing, a lot of money to develop one, but it was the government that was developing it. And so yeah, Musk goes, and he develops his own launch system. And you would think that, you know, hey, that's a tough problem, you know, to solve and there are these companies out there that make parts or they make engines, or they make avionics systems or whatever. And so you might think, Okay, I'm gonna work with those companies, I'll buy, you know, from those companies, and then I will integrate the system together. And, you know, he decided that, you know, yeah, I mean, there were some competence there. I mean, obviously, you know, they knew what they were doing, but they were really like, bloated and expensive. And he wanted to disrupt the launch vehicle marketplace. And so basically, he did everything, you know, he built the tanks and the engines and the avionics system and everything, the launch site, you know, and people thought he was crazy at the time or whatever. And guess what, you know, he pulled it off, okay. He had some early failures, whatever, and it was nip and tuck, you know, whether or not he was gonna make it, but he made it, you know, and now, you know, he's very successful. And anyway, but that's an example of somebody who basically was kind of going alone. But in most cases, you know, companies decide, hey, it's good to work, you know, with other companies. And sometimes, you know, there's things like strategic alliances, you know, between non competitors. I like joint ventures where this is especially true when say a company has some good product or service, and they want to move into a new geography, you know, and in that new geography, you know, they don't know anybody, and they work with a company who knows that geography, you know, and then they, so they may provide the product or service, and the joint venture partner basically becomes the channel, you know, to get that product to market, many ways to joint venture could be used. And then, of course, there's a lot of buyer supplier relationships where, you know, we produce a product, but like, a lot of the electronics that are in the product, we don't make the resistors, and the capacitors and the FPGAs, you know, those are purchased from another company. And, and then our re assemble and, and test those, those components, whatever, so that's quite common, where, you know, an apple with the iPhone or any but you know, that producing complex consumer electronics product, they've got a huge supply base that they manage, you know, and manage effectively, and they have huge buying leverage, because the volume that they that they provide to their suppliers. So anyway, these are, you know, something for a company to think about, as they're going to market as well, what are we going to do? And then who are we going to leverage? You know, who are we going to work with, to be able to get our product or service to market? Okay. And then, you know, another key part is, like, the key activities, so, like, what are the most important things that the company must do, you know, to make the business model work? And, you know, there's a couple different places to look like a production of producing something, are you a problem solving company, are you really good at, you know, managing supply chain. And so, you know, there are companies that are, you know, their core competence is production, you know, think about, like, automobiles supplier, you know, like a General Motors or Ford or Toyota, you know, you've got to have or Boeing, you know, in aerospace, you got to have extreme, you know, knowledge of how to produce design and produce products, you know, effectively, otherwise, your costs could be seen as sky, you know, sky high. So, that could be an area or somebody like focusing on, you know, production, problem solving, you know, where you could think like consultants where they come in, and their expertise is helping companies solve challenging problems that they have, a lot of times, software is meant to problem solve, you know, some issue a company has, so, like, you know, Salesforce developed their CRM tool, you know, to help companies figure out, well, who are our customers? What's our relationship, who are the key people within those customers, you know, what's been our communication with those customers, and we need like a tool to be able to kind of manage the relationship we have with our customers. And so, you know, that was a problem that existed and a company like Salesforce said, Hey, we're gonna go out, you know, and develop, we're gonna develop software to solve that problem. And then, you know, you have companies that are good at developing platforms and, you know, networks. You know, from a supply base standpoint, you know, a company that still is very good at this, but they kind of cornered the market early on, on being able to manage supply chains effectively, was a company called Dell computer, you know, you could still buy Dell computers or whatever, Michael Dell Dickey on off, he was an undergraduate at the University of Texas or graduate student, you know, he kind of came up with this idea of developing very capable PCs that were highly customized, but can be delivered very quickly. And, you know, the key there was managing the supply base, you know, effectively and so, he was able to do that and really carve out significant market share by providing very capable PCs but at a reasonable at a reasonable price, because he was able to manage his supply chain effectively. Cost structure. So, you know, what are the costs operate the business model? You know, I'm talking about revenue, Well, okay, how are we going to make our money? And then that's important. But really, at the end of the day, it's, you know, also about, what profit are we making, you know, and so the difference between, you know, revenue and cost is profit. So if you, you know, if you make $1, on every unit you sell, and it costs you $1 and a quarter, you know, to sell that unit, well, you're gonna go out of business pretty quick, because you're losing money on each on each unit. So, you know, it's like, what's your cost structure? And then how does that cost structure change as you scale, I mean, for most companies, hopefully, as they scale, they have higher volume, their costs go down, you know, on a per unit basis, and so they make a lot of money, or they can make more money. So that's the idea, you know, behind cost structure. And I mean, and that's why software, business models, software products and services, are so attractive, is because, you know, yeah, a company, you know, might develop a might spend a lot of money developing, like the office 365 suite or whatever, but then, you know, the cost to produce an additional, you know, unit is close to zero, you know, so the cost structure, on a relative basis to get software in people's hands is very, very low. And with cloud computing, now, it's even lower, you know, because, say, this company that you can't, your you and your teams come up with, a, you know, in the old days, you might have to, at some point, go invest in your own data center, you know, and as you scaled up your users, you would have to then increase the size of your data center to handle that volume. But now with AWS and Azure, you know, if you're native on the cloud, you just spin up additional cloud instances. And so it's made it much I mean, it was already fairly economical for a software company to you know, keep their costs low. And now it's even much easier because of cloud computing infrastructure. But anyway, what are some, what are some elements of cost structure? You know, you have certain businesses that are very focused on costs, these are companies that maybe don't compete on performance, but they're basically going to be the low cost solution. And sometimes, you know, quality takes a hit, you know, you've seen, especially with hardware products, you've seen these, these, these products that are out there a they're, they're really dirt cheap, you know, they're, they're not that great, either, you know, they're, they're cost driven, value driven, or ones where, you know, you basically provide some capability. And, and a lot of value to customers. And so the focus isn't so much on the cost, but on the value creation, and you basically have more pricing freedom, because of the value that you create. Another, you know, element of cost structure could be like fixed costs. So these are costs that remain the same, despite the volume of goods and services that are produced. So let's say I build a factory, and I've got all this equipment in the factory, and what you know, that cost me a certain amount of money, okay. And if I produce one unit, or if I produce a million units, that fixed cost is the same. So fixed costs remain the same, regardless of volume of goods produced, variable costs are what vary with the, you know, with the unit volume. So obviously, you know, there's components that go in a product, and as I produce more, you know, of that product, well, I have to have more inventory of those components. And so that varies with the amount of products that I'm selling, fixed costs, you know, do not and then there's benefits of scale and scope, you know, so as you get to, I mean, think about like, you know, Amazon, with the amount of scale they have in retail, you know, and the logistics engine that they have. They're able, you know, and if, if you're a small Company competing with an Amazon, you know, so just let's just use like the old bookseller example, you know, you can buy a book on Amazon, or you can buy a book, you know, from Joe's bookstore or whatever, Joe's bookstore is going to have a higher cost structure. Because Amazon, Amazon has so much scale, you know, and so much leverage, even logistical leverage with companies like FedEx and UPS. So anyway, there's advantages of scale, as you get to higher volume, you're able to reduce your cost structure. And as you get to a different scope, you know, scope of operations, where you're serving multiple different channels, then it makes it easier for you to roll in new products or whatever, and, and leverage that, that scope that you larger scope of operations that you have. So I mean, for example, let's say you're International, you know, you're a company that has an international footprint, and you're selling products, in France, you know, in the United States, but also in France, well, if you want to sell another product in France, we are already there, you know, so it's a lot easier for you to be able to do that in a cost effective manner. So the larger the scope that a company has, there's cost advantages of that. So, you know, if you put this all together, and just look at, like one example. So like, say, the apple iPods, and you know, if they're filling out their business model canvas, you know, you start with a value proposition. Well, their value proposition, you know, the seamless music experience, you know, when the iPod came on the scene, there were other like mp3 players, I mean, so there was a hardware device that you could load on your own software, and listen to it, you know, but it, it was hard, you know, I mean, there was work required to go get the music you wanted, and assume music came out, you know, you had to then go to the hassle of downloading it. And, you know, it wasn't super hard, but it wasn't easy, you know, either. And so what Apple did is a, we're gonna have a seamless music experience, that's going to be our value, Prop, whatever. So we're going to have this itunes store, you know, we're, we're going to sell music and make some money that way. But it's also going to be really easy, you know, for customers to be able to get the music that they want, you know, we're gonna have a broad partnership with record companies and OEMs, or whatever. So whatever music somebody wants to listen to, they're going to be able to do it. And of course, we're going to do what we always do at Apple, we're going to come up with a super cool hardware design, I mean, people are going to really love our design or whatever. And, you know, they're going to, they're going to love being associated with the apple brand. And, and so we're going to do that. And we're going to do that on a mass market basis, because everybody loves music, you know, and, and not just in the US, but across the world. And so we're gonna, we're gonna sell this this solution, the seamless music experience to the mass market. So, you know, this is how to put it together, you know, to say, Okay, what, you know, what's our idea for a product? And then what's that value proposition? What's that problem or need that we're solving? And is that a mass market? Or is it a niche market? You know, who, who's basically the customers? How are we going to make money? Well, they make some money, you know, from music revenues, but they make they're one company that actually makes quite a quite a good margin on their hardware, you know, because the, the designs are so cool, and so user friendly, or whatever. And they map this out, and, you know, came up with a pretty successful business for iPods, and then iPads and iPhones and, and, you know, and they're still going pretty strong here. So anyway, this is like a example of how that business model canvas could be, can be put together. Okay, great. So that's gets us to kind of the class project. Let's, let's take a 15 minute break. I'll do a knowledge check. A couple of knowledge checks or whatever, and then we'll get into the class project. So I will see you guys back online. Let's just say 745. Okay let's go ahead and get started again as the comp check, can you guys hear me? Yep, yep. Okay, see, you guys should see the poll, whatever, quite a few people are already responding to it. So I was give remaining folks here a couple more minutes and then we'll get going. And while we're waiting for the results, whatever, I'll talk about one of the questions, which is a pivot. And that is our says pivot is when you add some additional functionality or product based upon customer feedback. And, you know, right now, it's kind of like 59% saying true and 41% false, and it's really false. So pivot is like a major move, you know, in a different direction. Okay, so as you're out there, you know, you're capturing feedback. And you're taking that into your iterative software or product development process, whatever you're, you know, making some maneuvers here and there. But, so when you think pivot, think something major. Okay, so let me give you one this, like a real major, you know, change. So, I don't know how many of you you use Slack, okay. But we you use it, you know, at our company. And it's a really good tool, real good collaboration tool. Well, Stewart Butterfield, you know, he had a company, and he was developing a new game, you know, call a new game called glitch wasn't going to be an online game. And, you know, what he determined was that, you know, there really wasn't a great collaboration tool for development teams, it was on the market. And so they kind of developed this, you know, internal product, you know, that became slack or whatever. So, it's like, here's this company that was gonna do this online game called glitch, and then say, Well, hey, you know that there's no market for glitch. But guess what, everybody loves this thing called slack or whatever. And so then, you know, probably within I think it was like 24 hours of launch. They had 8000 companies signed up for slack back in 2013. So when you think pivot, thank you. We're going to be an online autonomous lawn more for golf courses. To know we're going to, you know, spray weeds, you know, in a field, you know, I mean, it's a big shift with different customers, you know, a lot of business Canvas, model changes, whatever. So kivinen minor, it's a pretty major move, if you're just iterating along the same path, that's not a that's not a pivot. Okay, now let's look at the other questions. The Lean Startup model consists of three parts, creating your business model canvas, customer development, and an agile development approach. That's true. And 92% of you got got that right. In customer development, you test your business Canvas guesses to see if they are valid, that again, is true 79% of You got that right. And that's the whole idea behind customer development is you have these guesses, you know, here's what we think we're going to do. Here's what we think the customers are going to want. And you get out and actually talk, you talk to customers, and then you either validate Yeah, that's right. or not, you know, and if it's just off a little bit, then you iterate. And if it's off in a major way you pivot, you know, to something else. Okay, we talked about the pivot. So it's major, not minor. And then for a minimum viable product is the smallest feature set that gets you the most learning and feedback and enables a test to my prothesis 88% of you said true, and that's correct. So that's, you know, that's what you want with an MVP is get those core features out there. So you can get good feedback, you know, and test whether or not your hypothesis is right about, you know, whether you got product market fit. Okay, so that's that's that one. And then I'm going to do one other and then we'll get into the class project. So this one, you know, it's kind of this business model canvas and kind of the stuff the last section that we went through. So take a couple of minutes to answer these Okay, so let's go through these. So the first one a business model is how a company creates value for itself are delivering products or services for its customers. That's true. And 92% of you got that, right. Product performance, product price, product usability are all examples of value propositions. That's true 76% of you got that? Right. So I mean, there are other there are other value propositions as well. But you know, certainly by enhancing, you know, increasing the speed or capacity or performance of a product, that's one way to, you know, for to have value prop price is always a lever, you know, for value props, you have an attractive price, you know, with good functionality, then customers like that. And then usability, especially in software products is huge, you know, Now many people just won't tolerate a product that's difficult to use. Three, a niche market is a market where the value proposition distribution channels and customer relationships, all focus on a large group of customers with broadly similar needs and problems. So obviously, that's false. So an eighth 8% of you got that? Right. So that's a mass market, you know, if it's got broadly similar needs and problems, a niche market, you know, is just Yeah, something that's off the beaten track, you know, a certain customer set that has some unique, unique needs. But but it isn't broad. subscription fees are a type of revenue stream that is generated by selling continuous access to service. So that's true. 96% of you got that, right. And fixed costs are costs that vary proportionally with the volume of goods or services produced. So that's false. 88% of you got that? Right. So remember, you know, if I go buy a factory, if I produce one or a million, you know, my costs are the same, you know, so variable costs are when, you know, based on the number of units that I produce, the components that go into those units will vary with volume, but fixed costs, like the factory, the equipment that's in the factory, you know, that's a, that's a sunk cost. Okay. Cool. Let me know how this is working. I mean, it's effective for me, you know, to kind of know, Hey, are you getting the information or not like the one on the pivot, that was a good one, because it was a okay. little confusion about, you know, what's meant by a pivot, it takes a few minutes to go through this, that's not as quick as kind of a in the classroom, you know, q&a, or whatever. But I think I'll keep doing this for probably no more than, you know, two or three per per lesson. Okay. So let's get back to the, the deck here. And we're going to talk about the business model canvas. Okay, let's talk about the class project. So, here's where we're at now, project deliverables, zero, which has no money associated with it, no points, but it's, we got we got to have the project teams. And so that's due now and before class started. These were the folks where I didn't didn't know if you had a home for, you know, with the team. So please, after if teams have been formed, well let me know one way or another. If you're if you're on a team, you know, somebody from that team, let me know you know, fill out the form and let me know who's on the team. I've created the project teams, you know, in Canvas have started to do that. So if you're, if you're on a team and you just haven't let me know then somebody on that team you know, send me the form if you're not on a team you know, and you need some help getting on a team will then let me know that and I'll you know I'll make some assignments and get you on a you know, on a team that if I send you that email he did not receive it. So I guess I guess no, yeah. Oh, I send you at five that me and curl join in and I sent to so many other these people, none. Some response. Some did not. Send it I send it through inbox in Canvas. Yeah. Okay, I'll check Yeah, I might just miss it by four o'clock. It's not a big deal. We just need to, you know, I mean, it is a big deal to get the teams formed. Because until the teams are formed, you guys can't start, you know, working on the deliverables. But so yeah, I'll look for that. And then like I said, any other folks that need help getting on a team, just let let me know, one way or another, either, you know, somebody, send me the form with the team that you're on, or just let me know, you need help getting on a on a team. And we are happy to get the member if anybody wants to join us. Thank you. So yeah, yeah, if you're, if you're a little low, you know, I can't help but there are some folks that are looking for teams to be on. And so what I want to do is just like, give you guys the chance to get on the team that you want to be on. And then if say you need a couple of additional members, I mean, I'd like to be at this five to seven, range or whatever. So if you're a little low, you know, I can bump bump up a team with some folks that you know, need some help getting on a team. Okay, so we'll do that, you know, if you could do that today. That'd be great. And then we'll have, you know, the teams will be ready to go then. And then then the first deliverable you'll be working toward is basically a product description. And it's due less than four. So you've got a couple of, you know, lessons, a couple of weeks to get this done. And basically, you're just going to define the application, you know, and the thing I'm looking for here is just clarity, you know, so like, me, or somebody else can read that and go, Okay, I get what they're, you know, what they're going to, they're trying to develop, and then you're going to have a business model canvas, you're gonna there's questions related to that, okay? What's your value prop, who are your customers, that kind of thing. And you're gonna put in what you think your, your guesses are. So that should help provide clarity, you know, you define the application in text, you know, with like, a short paragraph. And then you fill out these business model canvas elements. And so that'll give me a sense of, okay, you know, here's the type of app, they're gonna develop, whatever, here's the value prop, or the customers they're going after, etc. And here's how they're going to make money or whatever. And so the thing I'm looking for, you know, on the canvas, I mean, it needs to hold together, you know, with what your application is, but then I'm looking that it tracks to kind of what we covered in this in this lesson, you know, so you're, I say, for value prop, you know, maybe it's newness, you know, or maybe it's price, or, you know, one of the elements that, that we covered, that I can just see that it's tracking to the business model canvas structure that we, that we covered, you know, again, their guesses. So I'm just looking that, you know, the guesses make sense. But obviously, they could be wrong, you know, because they like, like, we're talking about the Lean Startup model, you know, you would go out, you would test this with customers and get feedback, and then iterate and modify your business model canvas. So anyway, that's the first, you know, deliverable. And this really ties to what we've been covering. And then what I'm going to do is kind of cover the Google Ventures sprint process, because the other deliverables will kind of tie to that to that process. So again, you know, I covered this last time, we have that 92nd overview. But this is a process that's been used at Google, where they would develop, you know, an early, you know, prototype, to get in front of customers, to basically get feedback. And, you know, Eric Rees comments on it. But you know, and he's one of the guys that the Lean Startup model. But you know, this is totally independent. I mean, Google Ventures kind of came up with this, for like, new, totally new ideas or enhancements to existing products. But I think it ties pretty nicely to kind of the Lean Startup model, you can think of what you guys are going to do is that that initial pass, you know, where you're doing customer discovery, and you got to get something in front of the customer. It's not really an MVP, you know, a minimum viable product. It's not to that level of fidelity. But it's but it's also something you know, where the customer can go, Oh, I get what you're trying to do, you know, and then can provide good, good feedback. So I think, you know, even though they weren't developed together, I think they fit nicely together. So that's the this is the prototyping process. process that we're going to follow. And, you know, the way they these guys would do this is they'd have a team, you know, map out like five days, and they get together. And the first day would be mapping, you know, and we'll talk a lot more about that in just a second. And then they would sketch up ideas, you know, they think of a potential solution. And they kind of rank those ideas and then decide, you know, which ideas they really like. And they turn it into a storyboard. And then, and then a prototype that they could get in front of a customer. And then on Friday, they put it in front of like, five different customers. And the whole idea was that, you know, and this is, this is true, what they found at Google, is sometimes you know, people are talking about stuff talking, talking, talking, talking, and nothing gets done. And so this is a way to kind of focus energy, you know, in like, a five day period, to go get something done, and get in front of a customer and get feedback. And just avoid kind of the analysis paralysis that can happen, you know, within companies, especially larger companies. And so that's kind of the idea, you know, behind this Google Ventures sprint process. Okay, so what we're going to do is talk about Monday, you know, what happens here, and this isn't, do you know, for you guys, and so like lesson six, because the key thing is, like, you got to get together, you got to figure out what was the app, we're gonna do, you know, and kind of think about that, and, and have some kind of a very good sense about that. And then this other the the steps that we're going to walk through, you know, with the Google Ventures process, they're going to be a lot easier, you know, until you have a pretty crisp idea of the app and mind, it'd be hard to kind of start this, start this process. And typically, that's what happens at Google, you know, or the people that leverage this process, you know, that Google developed, they have something in mind already. And then they apply this process to it. And so I'm trying to give you a few weeks, they kind of, you know, get a crisp idea of the app that you have in mind. And then you'll use this process to kind of get the prototype developed. So let me get out of this. And I'll have these guys from Google Ventures describe what happens on on Monday. Hey, I'm Jake, from gv. And i'm john, also from gv. And we're going to talk about Monday of the sprint week. So congratulations, you're starting on a sprint, that's awesome. By the end of this week, by Friday, you're gonna have a realistic prototype, and you're going to be testing it with five target customers. So one thing to keep in mind throughout the week is that you're going to have a lot of decisions to make. And just keep in mind that you're going to end up with a concrete prototype, and you're gonna end up with some data at the end of the week, you don't have to make every decision perfectly, you just need to keep moving through the sprint and getting that prototype. And that test is going to go a long way towards giving you the benefit, you need to start this project off in, in a strong way. Yeah, when you when you start your sprint on Monday, it's going to be really tempting to start thinking of solutions right away. After all, that's, that's why you're there. That's the whole point of the sprint is to try to solve this problem. But we think it's really important to slow down a little bit and try to build a foundation first to have everyone talk about what they know and sort of share knowledge and also build a shared understanding of that problem. And that's to make sure that you're not wasting your team's time and effort focusing on the wrong part of the problem. So the way that we do that is to create a map of the problem. And to select the specific point on that map that you want to focus on, it can feel a little bit slow to do that, because it's basically a full day of talking and writing on the whiteboard. But you'll have to trust us, it's super important to make sure that the rest of the week is really fast and really efficient. So let's talk about what happens is activities on Monday, first thing, you're going to do something we call start at the end. So that means you're going to fast forward, you're going to look ahead to 612 months even further. And if this project goes perfectly if you put on your optimistic hat, what's it going to look like? And you're going to write down a long term goal that sort of expresses that perfect future. And then you're going to put on your pessimistic hat or put your optimistic hat on backwards. And you're going to list out all the questions, all of the risks, all the assumptions, all the things that might trip you up. and prevent you from getting to that golden future expressed in the long term goal, then you're going to make a map. So you're going to make sort of a simple diagram showing how a customer moves through your product or your service. And, and you're just going to start with a rough draft of that map. Yeah, all of that is, is in the morning. So after lunch, we're going to come back, and we're going to do ask the experts. This is where you talk to people, some of whom are already in the sprint with you, and some of whom may work in other parts of your company who are experts on some part of the problem. And you're essentially just going to interview them, ask them questions should use a timer to make sure that those conversations don't go on to too long. But the big goal here is to have them improve your your map to look for things that can add to your map mistakes, they can fix ways they can enhance your understanding of the problem. While everybody's listening to those interviews, you'll have the team take notes, using a technique called How might we now it's a little dorky, and it's gonna feel a little bit unnatural to some people. But we think it's really helpful because it makes sure that the notes are all in the same format. And that makes it a lot easier to organize and sort through those notes later. And that's exactly what you're gonna do. After the interviews, you'll paste all the notes up on a window or a wall or a whiteboard. And you'll have the group, sort them out into into different categories, and then vote on the ones that seem the most interesting or the most useful for building your prototype. And then you're ready to pick a target for your sprint. So this is the deciders job, at the end of the day on Monday, look at all that stuff, look at the map, look at the How might we use and choose one specific target customer, one specific spot on the map, and then look at those questions from the morning and choose the ones that you want to try to answer in your sprint. And this sounds really hard. But by the end of the day, Monday, when you've gone through all that information, it's usually pretty easy for the decider to sort of make that call. And then that's it, the information is booted up, and everybody's had the focus of the sprint should be clear to everyone on the team, and you're all ready for Tuesday, when you're going to actually get start sketching coming up with solutions, you've set the stage for for an excellent sprint. Okay, so we'll go through, you know, a little bit more grain or detail what's happening on Monday, you know, so and, you know, obviously, you're not the way this is gonna be spread out over the 10 weeks or whatever. So you'll kind of just have to look at when these deliverables are due, you know, so deliverable two, is due on lesson six, and kind of map out with your team, how to get these various elements, you know, done, but basically, you're kind of defining the goal. And since all of you guys are coming up with something new, you know, some new idea or enhancement anyway, to an idea. You know, it's probably he might have a goal related to adoption or revenue, or, you know, or some aspect of using your, you know, your software that you're that you're developing. And then, you know, you'll have these sprint questions, which are, you know, questions that should be key to the success of the, of the application. So you're coming up with a new application, you know, and there's going to be certain aspects of it, that probably need to rock, you know, that has to be great in order for this application to add value to be adopted or whatever. And so you kind of need to figure out well, what are you know, those important things that we need to figure out? So as an example, you know, from the book that they the, you know, that they wrote about this one of the projects was a little robotic delivery system in like hotels, so say somebody checks into a hotel, and they forgot to bring some toothpaste or something. And so they could call the front desk or whatever. And this robot would be dispatched to their room, you know, and then they would get this the phone rang, you know, by saying, hey, the robots here or whatever, and they go and then interact with the robot. And I used to, they had a variety of question, and basically, they focused on the delivery. You know, there are a lot of aspects of that, but basically, the delivery of, of, you know, the robot showing up at somebody's hotel room, but one of the questions that they had was they wanted to know if people would actually Select a hotel, because the robots were there, you know, it's kind of like, like, Wow, that's so cool. You know, I want to go to that hotel, whatever. So that was like, a question that they wanted to get out of the sprint was, is it such a unique, cool experience that people will actively decide to go to hotels that that, you know, have this service? In addition, they had other questions about, you know, how smooth the delivery was, and that kind of thing anyway, the key is you're thinking about questions that are critical to the success of your application or whatever. And so that's why you need time to kind of, Okay, well, what is the application? What is it going to do whatever and kind of noodle on that? Because then some of these questions have questions about whether or not you know, people would use it or not, you know, and whether or not this should be a sprint question will become easier for you. And then you create a map, you know, with, like, actors on the left side of the map, and we'll go through this in detail in a minute. And then the process flow through the application on the right, but it's not super detailed, you know, it's really at a very high kind of crude, you know, level, and you'll see what I mean, in a minute. And then they talked about these, how might we, you know, questions, and the, the goal there is to get you to do something innovative, you know, so it's kind of like, how might we you know, and then what would follow is something that would differentiate your application, you know, from something else, so that, so, so basically, you know, it would, it would really encourage adoption of the application. So that's kind of the idea behind the How might be questions. And then you identify your target for the sprint, which is kind of the main area of the application that you want to get the most customer feedback on. And so it should tie to, you know, the critical sprint questions. So let's just imagine, you know, you're you're doing, you know, this click through, you know, in PowerPoint, well, yeah, you know, you're gonna show maybe how they get on the service, and that kind of thing, and, you know, kind of a, starting at the beginning, and then going to the end, but the meat should be, you know, kind of what is the core value prop and functionality of the application. So, as you're thinking about your target, you know, that needs to come to life of like, Okay, well, we're gonna, we're gonna be successful or not, you know, this application, if this part of the app really resonates with customers, and then obviously, that should be your target. So does that mean you don't have any click through? You know, in other areas? No, no, I mean, it could be like a thorough run through of your application, but most of the time should be spent in that heart of the area, you know, that target of where you want to focus the most time with the customer. Okay, so this is like, you know, the day one checklist, so, you know, they talked about set a long term goal, you know, and, you know, it probably has something to do with adoption, you know, or comments, testimonials from your customers, you know, about how this application, you know, made a significant change, you know, in their life in some way, or solves some problem or satisfied some need that they have, or whatever. You know, think about your sprint questions, again, get pessimistic, how could we fail, you know, and then basically turn those fears into questions that you want to get answered, as you are going through the prototype with customers. Make a map, again, we'll talk about that in detail. So you'll know what I'm talking about there. You know, project vision and goals. I mean, here are examples of, you know, that, that other groups companies have have used or whatever. Like for business opportunity to increase revenue or user engagement, time or depth, this is a lot of times what applications will, you know, that you want to be you want the user to be in the app constant. So think Facebook, you know, when people complain if people spend their whole lives in Facebook or whatever, but that's like a metric of Okay, obviously, they're very, very engaged because they're spending a lot of time in the in the app, return us things like that, or what's the differentiator between, you know, maybe there is, maybe you're going to do a product, and there is a competitive offering out there, but you don't think it's very good and what you're going to do You're going to have a whatever the certain font is certain functionality, which is going to be better than the competitors or whatever. So I mean, these are examples of, you know, different goals and opportunities that you could be trying to achieve and create with the application. Some types of sprint questions, you know, what problems needs motivations do people have? How do they evaluate and adopt products? You know, do they understand your value? prop? You know, I mean, if they go through your app, you know, on, and they're like, okay, I don't get it, you know, what is this? What is this supposed to do for you? Well, that's not a good sign, you know, if they go through, and they say, wow, this is really cool, you know, I can see how I could use this. And this would save me time, or this will help me connect better with friends or whatever, you know, whatever the value prop is, you know, if that's resonating, then obviously, that's good. Okay, so this is, you know, an example of like, an app for a map, this was like a company was developing software to help match patients, or new types of, you know, pharmaceuticals. Okay, so maybe there are trials out? Well, I think COVID you know, I mean, think like, initially, when Pfizer, and Madonna, you know, had the two RNA vaccines, they had to go through, you know, clinical trials, and they had to find people that were a good match, you know, so different genders, different ages, you know, different health issues, or whatever. And so they had to match those, well, that's true without any pharmaceutical. So this particular, you know, companies trying to accomplish the software to make it easy to do that, you know, to match patients to trial. So, you'd have the patient's, you know, doctors, and then a coordinator, you know, that was trying to match these people to trials. And that's what you know, that's how they mapped it out. And then they circled this searching for matching trials, you know, as the target. And so the key thing is that, you know, it's the general flow through through the application. And it's, it's simple, you know, it's like five to 15 steps. So if you're getting over like 15 steps, you're probably getting into too much granular, you know, detail. So I'm gonna pop out again, I'm going to show you this YouTube video, that this company that you know, basically is applied the gv sprint process, he talks about mapping, and I think he does a good job to kind of something you could leverage and he could anchor to, to kind of help you, you know, develop your own maps for from for your app. So let's go to that. here from AJ and smart, and today, I'm going to show you the best and easiest way to draw the map from the design sprint. Okay, let's draw a map very quickly, just to show you the absolute baseline of how the map works in the design sprint. And I'm even going to use an example from the book from Blue Bottle coffee just show you the most simple form of the map. And the most simple way to draw on. So we've got blue bottle. So generally, you're drawing the map after you've created a long term goal in the spring question. So you have an idea of where the ending is going to be. But I'm just going to show you now set up step by step how this works. So the first thing that I do to make it as simple as possible, is I create some top level categories so that I'm not starting with a blank page. And what's important here for the moderator is not to immediately ask the group, okay, Hey, guys, what should we do, it's more about getting started and having something moving on the screen on the whiteboard from the very start, so that the audience or so that your participants don't feel like they have to put all the effort in. So usually I start like this discovery. Learning. You can also write, learn or discover, and then using and then goal. So I have these as some top level, just placeholders. This is not in the book, but we found it's a much easier way to get started a next step. The next step is to add your actor to the left hand side. In this case, we're just going to keep it super simple customer. We want to figure out what the endpoint is as well. So you start with the start amazing. And now we're going to create the endpoint immediately. And the endpoint in this case for blue bottle coffee was pretty simple. It was just that the customer buys beans in the online store. Because in the earlier part of the sprint and the long term, Golden's in the questions, we figured out that what bluebottle wanted to do was have people buy beans in the online store, right, so now we just need to fill in everything in between. This is where people start getting a little bit worried, because they're thinking about customer journey maps, they're thinking about all of these things which have the word map in their name, which are usually very complicated. But the map in the design, Sprint is supposed to be as simple as possible. It's not a tricky exercise, and you shouldn't go into it with the feeling that you need to spend two hours or three hours like it is in the book, The exercise itself should take no longer than 45 minutes. Because really, you're only using this, you're only creating this map so that you can create the target. So you have an idea of where your focus for the rest of the sprint needs to be. It does not matter if you get this right or wrong. It doesn't have to be perfect. And you shouldn't waste time trying to make it perfect. But let me show you a real example from the book and how basic it can be. Let's start with discovery. So how does the customer discover the thing that we're going to show them? So Blue Bottle coffee, let's actually think about how they make their way to the website. There's a couple of ways that might work. Right, okay, done. It doesn't need to be much more complicated than that. We don't need to maybe you're going to be having a few discussions, you're going to be asking people in your in your group. Like just to shout these things out. And you're not trying to have people discuss and argue you just say like Facebook ad Okay, writing down, and maybe someone's like, yeah, we don't do that many Facebook ads. What I say is the moderator doesn't matter. We just let's just put it down for now. Right? We can change this at any point. Okay. So let's say this is how people discover blue bottled coffees website in the first place is that they've heard about it in the store. Maybe they the barista told them or maybe they saw like a poster. They've done a web search, or they have a Facebook ad. Okay, let's How did they learn about how they learn more about the webstore? How do they get a bit deeper into it? Right? So let's say they go to the store, maybe they learn about it from barista. And by the way, I'm asking the participants Okay, to help me fill this out, how do they learn about the site, they're probably okay, probably the first thing they would do is talk to a barista, then they would have a coffee. And they're like, Huh, that's good coffee. And then this web search part, probably, they're going to be looking at other competitors. So they're going to be comparing competitors, maybe then they find blue bottle. And up on the blue bottle website, the Facebook ad might go directly to the blue bottle website, right, it's really just about being as basic as possible in the sprints, one of the problems I see in the map is that people, they do want to get into way more detail. And I could have gotten into way more detail here. But really, the point isn't to have a detailed map. The point comes later when you target it, and I'm going to show you that in a minute. But let's finish out this map, we can probably speed this bit up like boom, done. That's actually what a real map looks like. This is a real example from the real design sprint book from a real company. And it's as basic as that. Now, this is a nice example to start with, because we just have one actor, because we're just focusing on one person who needs to be taken care of here. And we're looking at just the touch points from their perspective, right. And the easiest thing to think about that the easiest way to think about this is just what are the touch points that these people have potentially with our company. So you can think about it like that you're saying okay customer goes to the store talks to the barista has a coffee goes to the blue bottle website chooses beans buys beans. And another thing that's kind of important here, you don't have to worry about the user's emotions and deep internal needs. So some people they like to change something like buys beans into is now happy and has a better life. Because a lot of people are used to design thinking this is too emotional. This is too deep. This is not what we're looking for. We're looking for the cold, sad, like hardcore, just what they do, right? What did they physically do? We don't give it how they feel right now. That's not in there because they YouTube doesn't like that anymore. So perfect example of a super basic map. Now let me show you how to make the target. Okay, we have these voted up how might we use from the previous exercise, the expert interviews, or if you're doing it in the next as the next exercise as it is in the book. You'll also have these so we're coming back to the map at some point anyway, with these How might we just a quick aside at AJ and smart we now do the expert interviews at the very start of the sprint instead of after the map because we find that it makes making the The map a little bit easier because you already have a bit more context. So here's how you actually target the map. Okay, let's have a look. These are the top voted, how might we? How might we give people an understanding of where the beans are from? Okay. And remember, the focus here is on the website. So it's not about in the real shop. So probably, it's, it's around here. It's somewhere on the website, but actually, even more specifically, probably where you're choosing the beans themselves. Okay, let's have a look at another one. How might we help people select the right beans for them? Again, that's in the Choose beans section. Okay, this one might even be a little bit in between. So how might we encourage people to buy more than one type of beam that could be either in the Choose beans section? Or it could be in the buys beans section? Now, how do you target your map? How do you choose the point on the map that you're going to be focusing and using as an anchor point for the rest of the sprint, it doesn't mean you're going to be ignoring everything, it just means that this will be a focal point, when you're coming up with the concepts later, you look at where the How might these are clustered, maybe there's like one here, but maybe there's two here. But you can see usually a bit of a pattern for where you want to mark your map. And approximately here would be the target, then maybe even hear these two steps, the choosing the beans and the buying the beans in the prototype, you still might prototype the start, you still might prototype some of these things. But here's where you're going to be focusing solving these problems in more detail. So this is the design sprint map in its most basic form. Now let's get a little bit more complicated. And let's think about what happens when things get a bit more tricky or start to go wrong, like they do in the real design sprint. So we're gonna start in the same way to discover I know I put discovery last time but doesn't actually matter. That's how little this matters. Okay, let's do one of these laundry services that you have an app for, like zip cart. And basically what you say is, I want my clothes to be picked up my shirts and whatever I want them to be picked up at this time, and then dropped off at this time. So there's the there are these laundry services which come to your house, pick up, wash them and bring them back. I said, in this case, because the delivery itself, or at least what we've decided here is that the moment of delivery is also quite important. And the moment of pickup is an important part of the experience, we're going to include the person who's delivering as well in this story. So when we're creating the actors this time, so we're going to call this long magic laundry service. So the actors in this case, customer, oh, let's get a bit more complicated. B to C customer. So this is like your standard customer, your consumer b2c, right? What about B to B customer. So this is when we're working with other businesses, often they have a different story and delivery person. Okay? Because we've already written are discovered. Because we've already written our discover, learn use and goal, we know where to go. Next, we're going to go straight to the goal. Now, what could the goal be here, there could be multiple goals, but we just want to focus on one usually for the sprint, let me interject something. So in this case, Jake, or the magic laundry service, one of their long term or the focus of their long term goal, people use it more than once per month. So actually, what we're looking at is people reuse the product. And so the goal here would be that these customer use again, that's our goal. We can get them to use it the first time pretty easily, but most people don't use it again. So the goal of this sprint and what we're trying to do here is to map it out until the customer uses it again. Okay, let's start with the b2c customer. Can someone give me a different one of these instant? Oh, that's a smooth one. Okay, let's do let's just do BTC first, okay, Facebook ad, let's do landing page, whatever they're learning about it on the landing page. Okay, now they are using it. So they're going to set delivery time. Hand over their clothes. Then they're going to get their clothes back. Hopefully clean. And hopefully, somehow, they're going to use it again. Okay, perfect. That's the b2c customer journey. What about the b2b customer journey? Probably they discovered this a little bit differently. sales call. Let's just focus on one right sales call the b2b customer got a call from magic laundry service and said hey, we can wash all of your towels and all of your carpets and all that kind of stuff. Okay, a sales call happens to the HR person maybe so maybe we can even be more specific and say who that is based on the sales call. They all learned, so that kind of can be skipped. Right? Maybe it's a follow up email. And then they're going to do pretty much the same as the b2c customer. So let's just say they do the same as the b2c customer. What about the delivery person? What about the company? What about us when these things happen when they set the delivery time receive pickup order, so they receive a pickup order. So they basically are just sitting around until then then they pick up the clothes. So they pick up the clothes here, and then they bring clothes to depart depot where they wash them. I don't know how it works, and then they give clean clothes back. Okay. So this is a messy map. Is this too messy? No, this is fine. Right now, as the moderator, I wouldn't have written this all myself, I would have been asking people in the group to help me fill this out. But I probably would have started writing things as soon as possible and just started to rub things out and change them. Okay, let me quickly summarize how you can make the perfect map even though it doesn't need to be perfect, and how you can make your life as a moderator moderating a sprint just much, much easier. So you start with having some sort of frame, well we do is discover, learn use and goal, it doesn't really matter if nothing fits into these things. It's just a loose frame to start with. So you're not starting with a blank screen. Next, we want to put your actors on the left hand side. So customer, b2b customer delivery person, whatever is possible, because you want to keep this mapping exercise to a minimum amount of time, maybe 45 minutes, if possible, just focus on the main persona that they want to talk about very often that the b2c customer or just what you call the customer, the next step is to go right to the goal, go to the very end of the map, fill that in, what is it that we're aiming at? Is it that the customer uses it again? Is it that the customer understands the product? Is it that the customer gives us a million dollars, who knows right? Write that down, it can be changed while you're filling in the rest of the map. Now all you got to do is you need to fill the map in always start with discover, because discover is easy, right? That's the easiest part to fill out. How did they find out about this product, even if that's not what you want to talk about in this sprint, just do it, it's a great way to get the momentum started. So everybody, I hope you enjoyed that video, I hope it helped you. What I'm actually doing at the moment is I'm doing a little series on YouTube called design sprint one on one, where it's basically just me with a camera, this is one of the high quality videos, but there are some lower quality videos on our channel too. And so I thought, you know, he does a good job of kind of describing the mapping process, and I like the framework, you know, the lays out because I think it does kind of allow you to Okay, start with a discovery, you know, learn and then work your way through to, you know, what you have as a goal for the, you know, for your particular product watching. Okay, let me get back in that PowerPoint. Okay, so, again, you don't have to, you won't have to do this for a few lessons or whatever. But just remember to refer back to it, I would encourage you to use that framework that, that he mentioned, you know, get your actors over in the left side and keep it simple, you know, no more than 15 steps and think about that goal, you know, what is the goal, the end that you, you know, that you're targeting? And then once you map in the How might we questions, you'll get this, you know, kind of center of gravity of Hey, this is the part of the prototype that we need to focus a lot of energy on, but like he said, you'll you'll have the flow through the entire app, but you just want to have more detail in the area around that you consider the you know, the target. You know, something that you're not, I mean, you could but you know, is this whole idea of Ask the Experts, okay, so, kind of the way this might be done within a company, you know, like using that example of the pharmaceutical trials where there's new drugs that are coming online, and somebody is trying to match up patients with those. There could be a variety you know, of experts that you bring in of how the process works, and you kind of go through that. That provides the context for you to kind of develop your, your map and maybe come up with your How might we notes for you guys, I mean, you could do that. I mean, depending upon the application, you come up with other people you want to interview, you know, and do that feel free to do that a little challenging, you know, in our current circumstances. So the assumption is kind of you guys are you're the experts, whatever the application is, you're doing the research, to kind of understand, you know, how the process might work, you know, to benefit the customer. And, you know, you have these, how might we notes? Which, again, hopefully go towards innovation, you're trying to figure out, Okay, how can you really make this application compelling for users? And so that's why it's like, Okay, how might we and then you have your, the ideas that you come up with? So anyway, you know, the way this would work, you might have experts come in, you talk to them, you take notes, you come up with these, how might we, you know, and you want to make sure that, that, you know, they're specific, they're not too broad, like, how do we how might we make people happy? You know, Okay, great, you know, what do we do with that? Or it's too narrow, like, make the buy button blue? You know, it's like, Okay, how might we use location to show relevant results. So I mean, obviously, that's used a lot like with Google Maps, or something, you're trying to find a restaurant or something to eat at. And you show restaurants on a map, you know, around a particular location. So anyway, you know, as a team, you'll come up individually, you'll come up with these, how might we notes, and then you'll, you'll organize them a lot of times, they'll be you can use like an affinity diagram, and I'll talk about that in a second. And then you'd vote on them, you know, and each person has like two to three votes, I mean, you can figure out what that should be as a team. And then you can see kind of like, the ones that appear to be compelling, you know, that are kind of getting the attention of everybody, and you do that voting, and then organizes, how might we notes on a map. And then a lot of times that can help gear you on the target for the you know, for the prototype, it's like, okay, like he said, you know, for the coffee, the coffee website, it's like, kind of finding the right coffee and going through the purchase process that was kind of, you know, the center of gravity of the How might we notes or whatever. And so they pick that as the as the target. So anyway, when you come up with these, how might we stickies, you can do some affinity mapping where, you know, maybe, you know, your, if your team of five or six people, there may be similar ideas, you know, it's like, yeah, okay, these three, these three, how might we notes are very similar, or they're in the same category. And so you kind of go, you know, group them into categories that are relevant. And then you'll, you'll vote on them, you know, again, in this case, it says, Hey, she may, team member gets three dots. I mean, you guys can figure out whether it's two dots, three dots, or whatever. And it basically says, Hey, you can vote on your own idea, you can put more than, you know, say you got to two or three dots, you can put them all on one idea, if you think that's a really great idea. The goal is basically to see Hey, what is resonating, you know, with with team members, and one of the benefits of this multi vote decision making is, you know, it, it cuts down on kind of dominant personalities, or somebody who's very vocal, I guess, and really advocates for certain particular idea, it gives everybody a chance to say, hey, Bo, you know, how, you know, for the ideas that they think, you know, are the best ideas or whatever. And it's quick, you know, it's a way to kind of do this fairly quickly. And I think you guys can leverage, you know, zoom and the whiteboard, you know, in some of the ideas were part of the remote sprint process document that was part of the reading, you know, to do this, so you have to get together, you could do it, you know, over, you know, zoom or another collaboration tool. And then, you know, again, you'll be picking a target again, for these guys. The target was searching for matching trials. And so that's where, you know, they were putting most of the energy in the prototype is, you know, along that area, but again, like the guy said in the video, you can show the whole process from discover, you know, Learn the goal. But just focus more of your prototype, you know, your, your energy on with the target that you identify on the map. Okay, guys, that's that's it for tonight, and the only thing is just let me know Who, who, who you want to work with or so I'll check email, you know, for the, for the other team submission. And then either let me know I see some people chatting with like who they want to be, you know, teams they want to be on. So I'll take that information. Or you can just send me an email saying, hey, I need help getting on a team. And then you know, hopefully, by tomorrow, all the teams will be formed. And you guys can start, you know, collaborating on that first deliverable and kind of talking about the application that you want to, you want to develop as part of the project. Okay, so that's it. Any, any questions? No, thanks. Oh, okay. Yeah, I will feel very free to email me if you if anything comes up. And like I said, I'll love you getting the team's all formed on canvas. And hopefully, that'll, you know, have enough information to be able to do that by tomorrow. Okay, and now next time, you know, we'll be doing is we're going to start to focus on the different software development methodologies. So, next time, we're going to hit Scrum, you know, which is one of the agile methodologies really hard. And we're going to span you know, a couple of lessons on Scrum. And then, in the second half of the class, we'll talk about some DevOps methodologies, particularly con bond and then XP, and, and then, you know, the tail end of the class talk more traditional methodology. So, the next set of mini lessons is going to be just different types of software development methodologies. But I wanted to lead off with kind of what do you do with that early phase. And I think the Lean Startup model is just a really good model that you guys should be familiar with. And it's got a lot of resonance, a lot of momentum in the software industry, you know, especially for new new new product development. Okay, alright guys, that's it. Have a good night. Thank you. Thank you. No, thank you, but Hello, Alexandra, how are you? Nice to see you. Hello. Hello. Are you doing good? I'm observing the class today. That's why I'm here. I'm going to be like sitting quietly hiding behind the wheel. Yes, yeah. Okay. Can you guys hear me okay? Yes. Yep, yes. Okay, great. Okay, and then let me all share the deck again and go ahead and get started. Okay, can you guys see the deck? Yep. Yes. Okay, great. Okay. Okay, so here's what we got for tonight. So briefly kind of just talk about, you know, review some of the key concepts from last time, which is really just going to be the Lean Startup model, and then how that ties in to kind of Agile software project management. And then we'll talk a little bit about the Agile Manifesto, kind of how the whole agile methodology and focus got started. And, and kind of give you a little bit of background on that. And then there's been several different offshoots, you know, from that, the one we're going to spend a lot of time on tonight. And next week, is Scrum. And then actually, for the next several weeks, we'll be talking about different, you know, agile methodologies. But tonight, and then next week, it'll be Scrum. And so got people joining here, so just a minute. And so what we'll talk about is you how or a scrum got started, kind of the two guys are responsible for that. There are so specific roles that are called out in Scrum. And so we'll kind of cover those, you know, in detail, review user stories and how you know, those really become kind of a functionality that you want in the software, that's kind of you get that feedback from customers and a turn that into user stories as he'll get familiar with the format for user stories, and you know, how to how to generate a user story. And then product backlogs are where then, you know, it's a prioritized list of all that functionality. And so we'll kind of talk about that and then how you kind of estimate the size you know, of a particular item. So there are some kind of techniques that can be used to try to figure out you know, hey, how hard is this going to be able to develop and get some, you know, kind of relative sizing it's not necessarily meant to be super precise, but you know, be more of a stack rank from my very easy to you know, something that will be more like an what will be called an FX or something that That would need to be broken down further into smaller user stories. And then we'll talk about, you know, the skeleton of Scrum, you know, which is sprints, and kind of what happens throughout the sprint cycle. So that's kind of a game plan for what we'll cover tonight. And then at the end, we'll talk about the class project. You know, the teams have been formed. And we'll just focus a little time on you know, what to do for prizes, deliverable one, you know, which is due next week at the beginning of class. And I'm going to have you guys brief, you know, your, your project, what the application is, you're going to be focused on. And so we'll talk about that, again, at the end of the end of the class. So that's the plan for the evening. And again, you know, we'll take a break, you know, kind of Midway, so everybody can stretch their legs. Okay, so we've been talking about, you know, over here on this right side, the Lean Startup model, that a guy named Steve Blank, you know, came up with with, and it's kind of been teaching this for many years now. And so Steve had really started a lot of start up, I've been involved with a lot of startups and early stage companies. And, you know, he recognized that, you know, 75% of startups fail. And it's like, yeah, we should be able to do better, you know, and the thought was, well, no, it's just for startups are hard. And so you're gonna have a high failure rate. But he just felt now you know, that there's some tools that are missing, or whatever. And that's the whole idea behind the Lean Startup model. And it's got three parts to it. And then, and then the people independent of Steve came up with his market opportunity navigator, which is really kind of a precursor to the Lean Startup model. So as we cover, you know, the market opportunity navigator, it's kind of telling you, maybe you've got some technology, you know, and you've got an idea for a product, and it could be several different markets, where you could apply that. And so where's the best one to focus your energy on, and so then once you kind of figure out where to play, I mean, that's kind of how they describe it, then the Lean Startup model tells you how to play. So that's, you know, big picture tools that are out there to help early stage companies or ventures. So this could be used within a large company, but also certainly, you know, within just a startup. Well, what's part one, you know, the Lean Startup model, the business model canvas, figuring out, okay, things like, well, what's our value proposition? I mean, so we think we got something great, well, what is it? You know, what is it, it's going to be a value to customers? And then more specifically, what, what are the customer segments, you know, that we're going after? So anyway, it's just the nine areas that if you're going to develop a company, you know, an a product you need to think about, and basically, you know, have a plan of care? What are, you know, what are you going to do in each of these areas? So, as an example, you know, we talked about the apple iPods, you know, and when Apple, you know, Apple came up with a number of very successful, you know, products, and kind of iPods got off on this very successful run. And it's like, well, you know, what was their value proposition, because, you know, there were mp3 players that were out there. I mean, they weren't necessarily first to market with this concept of a hardware device where you could have your music, you know, and have whatever music you wanted, you know, and play it. But what they came up with is this value proposition for the seamless music experience. So they took a really cool device, whatever, but then they have this store, you know, where you could go, and you could download, you know, whatever music that you wanted, and set up a subscription. And so they made it super easy, you know, by building this ecosystem around the hardware device. So anyway, their value prop was, you know, seamless music experience. Obviously, it was a mass market sell, you know, they had to have key partnerships. I mean, obviously, they didn't have the music or whatever. So they had to work with record companies and OEMs. To be able to have music to provide the customers they had to set up, you know, the iTunes Store. And then where do they make their money? Well, they made quite a bit of money, you know, on the hardware itself, but then some money on the music revenues. So anyway, you get an idea of like, Okay, well, how would somebody use this business model canvas? Well, these are the kinds of things that you'd have to think about. And, you know, there'll be a little bit more detail behind this, but not a lot. I mean, you're trying to, you know, you're you're trying to capture the big picture, in terms of you know, what it is that your product and What is the value prop to customers, you're going after how you're going to make money? What are your costs, that kind of thing. So that's the business model, canvas. And kind of one of the revelations of the Lean Startup model that Steve Blank had is that for a lot of startups or companies, like, you know, hey, I'm going to come up with this new cool software application, you know, you think that you already know what the customer wants, of course, you love it, or you wouldn't have this, you know, idea. And so it's like, you know, we just need to go, you know, we need to build our company and start building and selling, you know, this product or service. And so what Steve Blank did with this, you know, this part two, is that no, you know, what you need to realize is you're searching, you know, many cases for a business model, don't go into it, and assume that you're going to be, you know, successful, you've got to prove that, okay, you know, when you come up with your, your guesses for each of these areas, initially, you got to recognize they're just a guess, and then you're going to go try to prove out, okay, is that are we right or not? And so you go, and you search first, and then you're basically trying to discover, okay, who do we have customers for this particular idea. And so you go talk to customers, I mean, the key thing that Steve Blank talks about is getting out of the building, so you come up with your initial guesses, and that's in the building, but you got to get out of the building, talk to customers, and then you'll know if you're on to something or not, and that's different, you know, in the past, while he was still here, today, you know, a startup is in stealth mode, you know, I mean, basically, they're kind of, in some, you know, room, figuring out all this great stuff, and functionality is going to be in a product and it's like, Man, you know, it could be a good chance that they spent a lot of time in stealth mode, spend a lot of money, hire a lot of people, and then find out, they really don't have a successful product or business at the end of it. So when he encourages, hey, you get out, and you talk to customers, and you get feedback from customers. And when you have some feedback on Hey, you know, you're onto something here, it's a good idea, you know, then, you know, you go from maybe a crude, you know, wireframe, and your something that kind of similar to what we're talking about with the Google Ventures sprint, something that, you know, you can put in front of customers, and they go, Oh, I get it, I get what you're trying to do. But it's not necessarily a working piece, as opposed to say, software in this case. But then, you know, if you get that feedback from from customers, and wow, know, you're really on to something, then maybe you develop what's called an MVP, you know, a minimum viable product, and you go to customer validation. And, you know, and that's where you're may start to get paying customers. And, but it's, it's early days, and only when you basically have determined that you've got something that's successful, you've got something that people are willing to pay money for, do you move over to this other side, which is execution, which is about scaling, you know, your business, scaling the number of customers, you know, and certainly you can serve us, and, you know, building out your company in hiring, you know, more people. So anyway, that's kind of, you know, you know, part two, and as part of part two, you know, we talked about this minimum viable product, it's, it's this idea of getting, you know, just enough functionality, where you can, you know, enable the test of a hypothesis, basically, you want to prove to yourself, okay, we're onto something we've got, you know, something that's a value, there is a real value prop here for customers, you know, or not. And if you get into the or not, you know, area, then you pivot, okay. And, you know, like we've talked about before, a pivot is major, you know, I mean, it's not like, oh, we're just gonna add some new functionality or modify that, I mean, that's an iteration on an existing product, a pivot is, we're heading one direction, and then now we're gonna move in a pretty, pretty big way and in a different, you know, different paths. So we talked about Slack, you know, a slack, initially, the guys were trying to develop a new game, you know, and they weren't getting much success there. But they said, Hey, we know, there needs to be a better collaboration tool for developers. And so that's how they kind of came up with slack and basically pivoted to say, let's develop that into a commercial product, which ended up being pretty successful. So it's a, it's a, it's a pretty major move, but it's not necessarily a crisis, because you haven't invested a lot. You know, that's the beauty of the Lean Startup model is you're experimenting, you're getting this feedback, you know, and if you need to pivot, you can, you know, versus somebody who's like in stealth mode for 18 months, and they spent a whole bunch of money, you know, and then they find out okay, they've got nothing, then you know, That's, that's a, that's a pretty dangerous situation, either they go under, or they can convince somebody, you know, to give them, you know, to give them more money. And then, at the end, the part three here is that this is kind of intimately tied to agile development methodologies. Well, why is that, you know, if you're developing an MVP, you know, and you're iterating, or whatever, this isn't, you know, really geared towards a long drawn out waterfall flow approach. It's like, you focus on what's most important to the customer, you develop that you get that in front of the customer, you get the feet, you know, their feedback, and then you know, you go from there. So it's, it's very much tied to agile methods. And you know, we'll talk about Scrum tonight, you know, and you'll kind of get the sense of Yeah, you know, you know, Scrum works. So like a one week to one month, kind of a rhythm, where you can get some working software in front of a customer. Okay, so now let's, let's dive right into Agile Software, project management, and talk about the Agile Manifesto. Okay, so this has kind of kicked it all off. And basically these guys, and we'll go through these values in more detail on the next slide. But these guys were, you know, they were out in the software industry, they were kind of thought leaders. And they were going, you know, and most of them were using more of like a waterfall project management approach. And they were just like, you know, it's just not working, you know, the system's broken. And, you know, and so they had been going to different conferences and talking about different parts of the CES, things that were broken or whatever. And, you know, they basically got together, you know, came up with this Agile Manifesto. And, you know, one of these guys, Ken schwaber, I'm going to try to play a video here, hopefully, the audio and everything will come through. And you can just hear him describe you know, how this came about. Experiment. And I think it was Jim Highsmith, he said, Why don't we get together because I think we pulled together enough information to make the statement. And so we got together, not in Ohio, not Indiana, Oklahoma, we got to get in Snowbird. His skis here season, a lot of them were skiers. And we start talking about the things we had done that were common. The things we found work, the things we found that didn't work. And we said, well, we're not. We're not going to tell people what to do. The idea of this is you're doing creative work, what you need are guidelines and values and in things that can help you not constrain. So we said, Why don't we come up with a bunch of principles. And also, let's come up with with some value statements. But let's not say them as you should, this is important. Instead, let's say, if you're in a real life situation, ie we have these alternatives, we would recommend that you do this instead of this, because this may lead you into blind alleys, where this may be more open. And we published this, we call it the Agile Manifesto, whoever came up with that name, brilliant and great name. And Ward Cunningham, the master of wikis, he first built that whole philosophy, I'm putting it up on his wiki. So that's kind of how it came about, you know, these guys got together at a ski resort. And the nice place to kind of talk over software development methodologies, anyway, and in two, early 2001. And anyway, here are the here are the different statement of values that they came up with. So individuals and interactions over processes and tools, so one of the things that they found is that, you know, it got it gotten a little too process heavy, and people just weren't talking to one another, you know, and so that was leading to problems in the software development, you know, processing causing delays, or just errors, you know, because of lack of good communication. The other thing that they highlighted was, you know, hey, you know, working software is more important than comprehensive documentation. And, you know, that seems pretty obvious. But if you get into a very heavy, you know, waterfall approach, I mean, basically, it all starts out with some pretty heavy, you know, documented requirements, documentation, as they're saying, you know, not it's not like, like Ken said, it's not that you know, the stuff on the right side is bad or whatever. It's just that we value these things on the left more and that's like getting working software and then customer collaboration. Over contract negotiation. So this was, you know, a pretty big problem then. And then I saw this even like internally at Microsoft, say you have the IT organization at Microsoft, that was using, like a waterfall development approach. And they're developed developing an enterprise application, say, for the finance department, and you know, where the waterfall approach work is a, you get all these requirements, you know, together, and you get to a point that you call baseline, okay. And then, you know, the whole concept was okay, after baseline, nothing changes, you know, because then the development team goes and does their work or whatever, and then you tested or whatever. And then months and months later, you know, you get that in front of a customer. And, you know, many times they say, well, this isn't gonna work. I mean, this isn't what we need, or whatever, and you'd have a lot of conflict, because there's a, what are you talking about, this is what we agreed, you know, this is what, here it is, you know, and you here's the requirement, you know, in baseline, you know, and we meet all the requirements, whatever. And so, you know, they just said, Hey, you want to satisfy the customer, you want to collaborate with the customer, a lot of times, the customer doesn't know exactly what they want, until they see the software, you know, operate. And so it's like, a, it's a little bit more important to collaborate with the customer, we have a process that will enable that, then just, you know, trying to sue people. And then, you know, because when you, when you collaborate with customers, they're going to be changes, you know, that are wanted, and so you need to have a system, you know, process that can respond to change, versus just being religious about, you know, following a plan. So anyway, these were the kind of the key values that came out in the Agile Manifesto. And then again, there's been these different agile methodologies, and they've tried to stay true, you know, to these values, but each in their own way. Now, you know, there's a thing called define process control, you know, where, if you know, you know, say, say, the requirements are quite firm, it's like, we're building a bridge, you know, and you know, how many cars are going to go over that bridge, and then you can determine the loads, you know, that the structure is going to have to withstand and things like that, well, you know, then you can map out these requirements, and then carry out, you know, your design and basically define all the requirements, front, come up with a work breakdown structure, estimate how long that's going to take. And anyway, that's where, you know, software, project management started, because it was basically, hey, we've got this product, we need to develop, you know, what, what's out there that we could leverage while there was, you know, the waterfall approach was in use, you know, to build bridges, roads, cars, etc, or whatever. And so that's what was leveraged. The problem is, is that, you know, when you don't really when there, the process is quite complicated. And it's difficult to define everything upfront. And empirical process control, you know, that type of approaches is sometimes better. And with that, what you do is you use inspection, and adaptation, and you'll see that in a big way in the scrum process, where they have you sprint reviews with the customer, you know, basically say, Hey, here's what we've developed here, you know, is our product, you get feedback. And then based on that feedback, you adapt, you know, you make changes or whatever, and you do that in a short enough time span, that it's not a big problem, let's just say your sprint you're doing two weeks, Sprint's Well, two weeks have elapsed, and maybe you come up with something and it's not exactly what the customer wanted? Well, okay, you know, maybe at worst case, you wasted two weeks, versus you know, in approach where months and months have gone by, it becomes very difficult, you know, to recover. So agile, you know, I mean, agile has been around now for for quite a while, I mean, it's been over 20 years since the Agile Manifesto, and there are organizations out there that are kind of tracking the performance of, you know, software projects, and you know, what's successful, what's not or whatever in this one group is kind of tracked as well versus waterfall and there appears to be a significant difference in the chance of success for projects that are using, you know, agile software development, where it says here, you know, 60% greater chance of success than non agile projects. And so this will continue to be tracked, you know, over time, but it looks like there are, you know, some significant advantages with using agile methodologies and software development. The other thing you'll notice, you know, if you go out to like, indeed, you know, another job search, you know, platforms and you look for, like, you know, software developer jobs at Amazon or Microsoft More and more, you know, you're gonna see a scrum or TDD, you know, which is an extreme programming, you know, technique. And so the industry really has pivoted to embrace, you know, agile methodologies. So just from, you know, your own professional development in career success, it's a good idea to be knowledgeable, you know, these techniques and, you know, know the process and know how to, you know, to operate within it. Okay, so before going into Scrum, we'll do a little one of the polls, you know, one of the knowledge checks or whatever, so let me fire. Yeah, here it is. So let me fire that up. And you guys have a couple of minutes. To complete that. We'll just see. If there's anything we need to kind of review and a little more detail. So go ahead and, and start to complete that. Okay, looks like we're getting close, but maybe one other person do. Okay. Okay. One person's computer froze. So I'll go ahead and end the polling, and we'll talk about it. Okay, and I'm sharing the results, hopefully, you guys can, can see the results. So let's go through these. So the first one was kind of a little Trello trick. So because of failure, multiple high profile government software projects, President George Bush organize a meeting at Snowbird ski resort of prominent leaders in the software industry, leading to the creation of the Agile Manifesto. That is false. George W didn't have anything to do with the Agile Manifesto, although they're probably you know, we're all a lot of software projects that failed within government at that time. These were all guys that just, you know, we're in the industry, and we're just frustrated and felt like there needed to be some changes. And so it's kind of a grassroots, you know, effort, and you'll find a lot of change happens that way. You know, it's like bright people that are down, you know, they understand a problem, you know, well, and then they they decide to leave and make change happen. So anyway, that was false. In the statement of values, working software is valued over comprehensive documentation. That's true. So 76% of you got that. Right. So, yeah, you know, there's nothing like working software and being able to get that in front of customers to get feedback to help you stay on the right path. Okay, when a process is too complicated, defined completely upfront, empirical process, control, use Word inspection, and adaptation, play important roles. So 88% of you said true, and that's right. You know, it's just, history is kind of proven with software. element when you if you think you can, because it's not like with a waterfall approach, you're not talking to customers, of course, we're talking to customers, you're, you know, you kind of capture, you know, their feedback on what needs to be in an application. The problem is, is that, you know, that could be misinterpreted, the customer isn't exactly clear in their own mind what they want. And so with the working software, when you get that in front of them, you know, that sparks additional thinking, creativity, and then you get better and better feedback. So that iterative empirical approach has been found to, you know, sometimes lead to, you know, better, better products. Okay, so that's the first poll. Oh, okay. So let's go ahead, I'll share the screen again, and we'll get going. And you guys ever have questions, feel free to you know, just just just chime in, whatever and just let me know, you know, if something's not clear, and, you know, we can cover it right, then I'll have these these little knowledge checks spread throughout, you know, the presentation. So you could use that as a time to to just ask for clarification. Okay, so let's, let's get back into Scrum. Okay, so Scrum is an agile methodology. And Jeff Sutherland, Ken schwaber, you know, basically, were independently doing something very similar, that then was merged into become, you know, Scrum. So they're both they're kind of concentre, considered co founders of Scrum. And over on the left, there were these guys they developed, or they submitted a Harvard Business Review article. And, you know, they were kind of seeing what, you know, the Agile Manifesto, you know, members were also seeing with the, you know, the relay era approach to product development may not, you know, provide the most speed and flexibility. And so they had this kind of idea of the rugby approach where you're familiar with rugby, you know, the team kind of moves back down the field together, you know, passing the ball back and forth to one another. And so it's kind of more of an integrated, interdependent approach. And so Southern London particular picked up on this, you know, rugby, and that's how they came up with Scrum. Scrum is one of the formations that occurs, you know, in a rugby match. And so that's where that came from. So what are some of the scrum values? Well, courage is one, you know, having to have the courage to work on tough problems, do the right things. Focus. So this is one of the things that I really like about Scrum, in particular, is that because the timeframe for the sprint is quite short, you can't boil the ocean and take on a lot of functionality. It's like, Okay, we got a short period of time, what is it that's most important to the customer. And we're going to focus on that now. And so you have really good focus in using the scrum process, commitment, you know, people personally commit to achieving the goals of the scrum team. So, you know, the, the scrum development team is self organizing, they decide, you know, what they work on, and who works on what or whatever. And, you know, so there's a lot of ownership from that process. And so you get a lot of commitment, you know, because of that. Respect is important, because obviously, you're working very closely, you know, with your other team members on the development team, but also the product owner, the scrum master. And I mean, for any team to be healthy, there needs to be you know, you need to have respect and treat people with respect. And then openness, you know, being open about all the work and the challenges with performing the work. This is another thing I like about agile methodologies. The Scrum in particular, is it's very transparent. And you'll see that as we go through it and look at some of the work products where you know, every any anybody on the scrum team or outside can come in, and basically see, hey, what's happening, you know, what's in work, and see what the burndown chart looks like, and, you know, see if the team's on track or not, or whatever. So there's a lot of transparency in the process. Okay, so what are what are the roles in Scrum Um, so kind of the center of gravity is obviously the development team, and they try to keep the team, you know, relatively small, you know, five to nine, you know, members. And it really consists of, you know, whoever is needed to complete the sprint, ideally, you know, that the teams are, are cross functional. So, meaning you have, you have different functions, but also people can perform multiple, you know, functions as well, you know, on occasion, you might have a specialist that joins you as part of that particular sprint, but in general, you know, you kind of have, like people that are cross functional, you know, with flexible roles. And ideally, you know, co located to enable a lot of face to face communication. So, you know, in general, what we found is that, you know, if teams are together and co located, you're going to get better performance. Now, COVID may have kind of changed that, you know, in a big way, because, you know, tools like zoom and slack and, you know, have made it easier to collaborate effectively, you know, remotely, but in general, you tend to get better work product, you know, people are co located, and can have very quick face to face communication. And Scrum scales by adding teams, not by increasing the size, and we'll talk more about that next time. And where you have Scrum of scrums, whatever, but one of the key ideas is, Hey, keep the team size, you know, in this range of, you know, seven plus or minus two, key aspect, a very key aspect of the development team is its autonomous, you know, so I don't know, you know, to, to you, you know, this may not seem like a big deal, whatever. But you know, when you're older, like me, and you've kind of seen how things have changed. This, this was bigger was a bigger shift or whatever, where the teams, you know, autonomous self organizing, and ideally, if Scrum is implemented properly, outside involvement is limited, you know, so it's not like, you know, some executive comes out of left field and says, Okay, I want you to doing this, and that, and you're, you know, this is, this is more important than that, you know, there's a well defined process, which we'll go through, you know, but one of the things that's kind of sacrosanct is that the team is self organizing, and you give them the what, but they define the house. So the product owner, basically, is prioritizing the features in a product, you know, and will they they're prioritizing the product backlog, and we'll talk about that later tonight. The product owner defines that but the team does defines what they take on off the product backlog, or what they're going to work on for a given sprint, how much they can take on, and then how they're going to implement it. So anyway, so that's a key part of the development team. So what do they do they commit to the sprint, they own their estimates, they plan their own work, they do the work, they have the authority to do whatever is needed to meet their commitment, and they rely on the scrum master to help remove obstacles. So you know, that's, that's a role, the scrum master that we'll talk about in a minute. Like right now. So, the Scrum Master, the way to think of the Scrum Master is like a coach. And, you know, like, how long is the scrum master role needed within an organization? Well, if the team is like, just implementing, you know, agile, you will need a scrum master, basically, somebody understands the process very well. It can help guide not just the team, but the organization to implement it, you know, properly. But then once you you know, there's a rhythm say an organization has done this, you know, month after month, year after year, you know, the role can change and, you know, get some more worse focus on best practices within the organization, and not, you know, down in the trenches necessarily with the teams, but initially, if they are, they're down in the trenches, and there will be impediments that come up, and the scrum master will help, you know, the team, resolve those impediments of the team, you know, can perform at their highest level. The other thing that, you know, you'll find is that, you know, teams aren't going to naturally perform at an optimum level. I mean, just think of like a sports team, you know, they Okay, hey, we don't need a coach. We got really good players, whatever those you can get out in the field and they're gonna win the game. Well, you know, there's a there's value in a coach that you know, can kind of see what's happening, see where there's the issues, you know, and then help That team make changes, you know, to achieve their potential. And so anyway, that's how you want how you want to think about the scrum master. And the thing the Scrum Master is focused on is the velocity of the team, you know, and improving that, and making it stable and predictable. So, whereas the product owner is really focused on the product, and making sure that whatever is released is going to resonate with customers and generate revenue, the scrum master wants to get to the very best process that they can they want that team, achieving, you know, the, that optimum potential, you know, so everybody in every group of people, you know, whether it's your sports team, or a software development team, there is some upper limit of how good you can get. But typically, you know, teams, especially when they're starting out are really far from that limit. And so over time, the goal, the Scrum Master, they get that velocity of a team where basically the, you know, the functionality, the software that they're developing, it gets faster and faster, but maintains a really high quality. And then, you know, the scrum master focuses on the scrum values and practices. And basically, it's kind of a guardian of, you know, those within the, within the organization. And a lot of times when you're starting up, you know, there can be impediments and external interferences. So this whole idea of the team deciding what they do, that's the shift from, you know, organizations where they have a management structure, and the hierarchy, decides, you know, and allocates work or whatever. And so, the Scrum Master has to, you know, basically help, you know, the organization figure out how to, you know, make that change. So, what are important, you know, Scrum Master skills, you gotta be able to listen, you know, listen, really listen deeply, to what's happening, what's being said, what's not being said, obviously, you got to facilitate, you know, and get people, you know, to talk to one another, you know, and resolve issues. They need to help, you know, teams become self organizing, you know, I mean, a lot of times, I mean, I found, you'll have teams, when they make the team members themselves, you know, they've always wanted to be able to kind of control what they work on, and how they work together as a team. But then once they get that responsibility, it's a little intimidating, you know, because you're used to having somebody tell you what to do. And now it's like, Okay, well, we got to figure it out ourselves. So it's basically more responsibility on the team. And so the scrum master kind of has to help the team figure out, Okay, how to, how to organize themselves, and it's a servant role, you know, like any good coach, whatever it's leading by serving and serving by leading when needed, meaning, you know, sometimes there's some difficult situations, maybe you have, you know, an executive or manager who's kind of interfering in a team and they shouldn't be, well, you know, it's gonna take some leadership to kind of step in and say, No, you know, you got to be to back off, but do it in a way that, you know, maintains relationships. So, you know, there's a lot of like, with any good coach, there's a lot of important skills, you know, that are that are required. And, you know, where, you know, where that's us, I mean, we're scores for masters, you're used to making basically, you know, turn product development into a profession and, and really move organizations, you know, forward to deliver great, you know, great software, but there's a lot of challenges when they're when organizations are kind of making, you know, that making that transition, because strong is very transparent. So, you know, okay, what the work is got to be done. And you have a limited amount of time that can get done in a particular sprint. And so you know, this this idea of Scrum masters have things that contend with the belief in magic. Kind of being a senior executive myself, sometimes, yeah, you want magic to happen, you want something to happen, that is just Hey, there's just not enough time to get something done. And you know, so Scrum masters have to basically contend with, you know, people that want something, it's unrealistic. And then the other thing that, you know, people say they want transparency until they get it, you know, and then and then, you know, once you have transparency, good or bad, you know, what's happening as an organization, you know, what's happening. And so there's some organizations where now they're kind of unused to kind of hiding things, you know, the dirty laundry under the carpet or whatever. And no, that's not the you know, Scrum is a culture of sunshine and providing transparency, you know as on what is happening. And so anyway, that's they have to deal with sometimes people can't stand it, you know, they, what Scrum exposes. And so, you know, those are, those are other things that like, if a organization has a dedicated role, you know, of Scrum masters, that's what they, you know, have to deal with. And then the final role, so there's really three kind of the development team, you know, scrum master and the product owner, then the Define, you know, roles, you have the product owner, and the product owner, just you think of is like, okay, here's the buck stops here with respect to the product. So what you'll find in your careers is, everybody has an opinion on the most important features, you know, an application, oh, the application should do this, or should do that, or, I talked to this customer and say, they said, this was critically important or whatever. And, you know, and this is within the engineering, team marketing, wherever, whatever, and the product owner is the focus, okay, so they're not a tyrant, you know, a dictator, they're listening, and they're getting all of this information about, you know, what should be in the product. But ultimately, it's their responsibility to make sure that whatever is released is, you know, is successful. And you know, where the product owners come from, a lot of times, they come from product management, marketing, you know, project managers, so it could be technical project managers, or maybe somebody, even who's been a developer, you know, wants to migrate, sometimes even like a real customer. So, you know, it's kind of a lot of different sources for a product owner, anyway, they develop the product roadmap with the release days, they prioritize the features based on what they believe the market value is, and then, you know, they maintain enough detail on each feature, to anticipate you to get into the next sprint release, whatever, this is something, you know, we'll talk about later with the, with the product backlog, as you move up the product backlog to what is most important, and what is going to be worked on next, you got to have more detail, you know, so you basically, it has to be more defined, and that's the product owners responsibilities to kind of get in there, make sure that you're there continuing to update the user stories and breaking them up, if they're too broad, you know, to so that the development team can take an item go, Okay, I understand that I know how to, you know, I would know how to implement that. And then ultimately, the product owner, you know, accepts or rejects the work results. So, you know, basically, the buck does stop with them and whether or not Hey, this is good enough, you know, or, or not. Okay, so I'm going to, there's this really good this guy, Henrik Nyberg, has developed this video on agile product ownership. And he talks a lot about, you know, the product owner, you know, so you kind of get a sense of that role and what the effective product owner has to do. But it also kind of talks about the overall, you know, Sprint process. And so it's, it's the probably the best video that I've seen, you know, on how the process should should work. So I'll drop out a PowerPoint, and I've got that video queued up, and we'll play that. Okay, here it is. Let's talk about Agile software development from the perspective of the product owner. Here's Pat. She's a product owner. She has a product vision that she's really passionate about. She doesn't know the details of what our product is going to do. But she knows why we're building the product, or what problem is going to solve and for whom she talks about it all the time. Here, the stakeholders. They're the people who are going to use and support or in any way be affected by the system being developed. Pat's vision is that these people here will love our system and use it all the time and tell their friends about it. The stakeholder needs and Pat's ideas are expressed as user stories here. For example, if this was a flight booking system, people need to be able to search for a flight. And maybe that would be one user story. Both Pat and the stakeholders have lots of ideas. So Pat helps turn these into concrete user stories. Now somebody has to actually build a system. So here they are a small colocated, cross functional self organizing development D says this is an agile team, they don't save up for a big bang release at the end. Instead, they release early. And often. In this case, they usually release about four to six stories per week. So that is their capacity. capacity is easy to measure, just count the number of stories released per week. Some stories are big, so they count us to somewhere small and count as a half. But all in all, it adds up to about four to six stories per week. So people call these story points, but I'm just going to call them stories per week. In order to maintain this pace, and not get bogged down by manual regression testing, the team invests heavily in automated testing and continuous integration. So every story has at least one automated acceptance test at the feature level. And most of the code has automated unit tests. The problem is here are a bunch of stakeholders asking for all kinds of stuff. And they sure aren't going to be limited to four to six ideas per week. They have lots of ideas and lots of wishes. And every time we deliver something to them, they'll get even more ideas and ask for even more stuff. So what happens if we try to please them try to do everything they ask for, we'll get overflow. Suppose a team starts working on 10 news stories per week, if the input is 10, and the output is four to six, the team will get overloaded. That will cause multitasking, demotivation, and all kinds of bad stuff. And ultimately, it'll lower output and lower quality. It's a lose lose proposition. It's kind of like trying to shove more paper into a printer to make it print faster, or shoving more cars onto an already crammed highway system. It just doesn't work. It just makes things worse. So what do we do about this? Well, the Scrum and XP way of avoiding this problem is called yesterday's weather. The team says, well, the past few weeks, we've finished four to six features per week. So which four to six features Shall we build this week, and the product owners job is to figure out out of all possible stories in the whole universe, which four to six stories Shall we deliver Next, the common way is to limit work in progress, or limit whip w IP. Suppose the team decides that five is the optimal number of stories to be worked on simultaneously, they've learned that that's just enough to keep everybody busy without causing overload. So they decided that five is their whip limit. Whenever they finish one story, they will accept one new story, thereby making sure that they never break the limit of five ongoing stories. Both of these approaches work fine in the sense that the team will have just enough work to do and they will be able to work fast and effectively. a side effect though is that there will be a queue forming in front of the team. And that queue in Scrum is called a product backlog. The queue needs to be managed. Suppose stakeholders keep asking for 10 new stories every week. And the teams deliver four to six stories every week. That means the queue will just keep getting longer and longer, right. So before we know it, you have a six month long wish list in the backlog and growing. That means that on average, every story that the team delivers is something that somebody asked for six months ago, how agile is that? So there's really only one way to stop the queue from getting out of control. And that word is No. It is the most important word for product owner and pat practices everyday in front of the mirror. saying yes to a new feature request is easy, especially if it only means adding it to an ever growing backlog. The most important job for product owner is to decide what not to build, and take the consequences of that decision. And that's why it's hard. Of course, the product owner decides what goes in and what goes out. The product owner also decides the sequencing. What do we build now? What do we build later? And how long does this list actually need to be? That is a hard job. So Pat doesn't do it alone. She does it in collaboration with the team and the stakeholders. To be able to prioritize the product owner must have some idea of the value of each story as well as the size. Some stories are critically important, and others are just bonus features. Some stories take just a few hours to build and others take months. Now guess what the correlation is between story value and story size. That's right. None. Bigger doesn't mean better. Think of any system that you've used. And I bet you can think of at least one really simple feature that is very important that you use every day. And I bet you can think of at least one huge complicated feature that is totally unimportant. value and size is what helps Pat prioritize intelligently. Like here, these two stories are roughly the same size but have different value. So build this one first. And over here, these two stories have roughly the same value, but different sides. So build this one first, and so on. Okay, that sounds easy enough. But wait a sec, how does she know the value of a story? And how does she know the size? Well, here's the bad news. She doesn't. It's a guessing game. And it's a game that everyone is involved in. Pat continuously talks to stakeholders to find out what they value. And she continuously talks to the team to find out what they think is big or small. In terms of implementation effort. These are relative guesses, not absolute numbers. I don't know what this apple weighs for that strawberry. But I'm pretty sure that the apple weighs at least five times as much and that the strawberry tastes better, to me at least. And that's all Pat needs to know in order to prioritize the backlog. It's pretty cool that way at the beginning of a new project Our guesses will inevitably suck. But that's okay. The biggest value is really in the conversations rather than in the actual numbers. And every time the team delivers something to real users, we learn something and get better at guessing both value and size. That's why we continuously prioritize an estimate. Trying to get it all right for the beginning is pretty dumb, because that's what we know the least. So the feedback loop is our friend. prioritization is not enough, though. In order to deliver early and often, we need to break the stories down into bite sized pieces, preferably just a few days of work per story. We want this nice funnel shape, with small clear stories at the front and more vague stories at the back. By doing this breakdown in a just in time fashion, we can take advantage of our latest insights about the product and user needs. All this stuff I've been talking about estimating the value and size of stories, prioritizing splitting, all that is usually called backlog grooming. Pat runs a backlog grooming workshop every Wednesday from 11 to 12. One hour per week, the whole team is usually there, and sometimes a few stakeholders as well. The agenda varies a bit, but sometimes it focuses on estimation, sometimes on splitting stories, and sometimes on writing acceptance criteria for a story, etc. So I hope you're noticing the theme here, communication, product ownership is really all about communication. When I ask experienced product owners what it takes to succeed, they usually emphasize passion and communication. So it's no coincidence that the first principle of Agile Manifesto is individuals and interactions over processes and tools. So the product owners job is not to spoon feed the team with stories that's boring and ineffective. Pat instead makes sure everybody understands the vision, the team is in direct contact with stakeholders, and that there is a short feedback loop in terms of frequent deliveries to real users. That way, the team learns and can make daily trade off decisions on their own. So pet can focus on the big picture. Let's take a look at a few of the trade offs that need to be made by Pat and the team. First of all, there's a trade off between different types of value early on in their project. uncertainty and risk is our enemy. There's business risk, are we building the right thing? There's social risk? Can these people build it? And there's technical risk? Will it work on the platform, they want to run it off, and will it scale. And there's cost and schedule risk? Can we finish the product in a reasonable amount of time, for a reasonable amount of money, knowledge can be seen as the opposite of risk. So when uncertainty is high, our focus is knowledge acquisition, we focus on things like user interface prototypes and technical spikes or experiments. Maybe not too exciting for the customers, but still valuable because we are reducing risk. From a customer value perspective, the curve looks like this in the beginning. As uncertainty is reduced, we gradually focus more and more on customer value, we know what we're going to build that house, so just do it. And by doing the highest value stories, first, we get this nice steep value curve. And then gradually the value curve starts flattening out. We've built the most important stuff. And now we're just adding the bonus features, the toppings and ice cream, this is a nice place to be because at any point, Pat, and the team may decide to trim the tail to cut right here and move on to another more important project, or maybe starting a whole new feature area within the same product. That is business agility. So when I talked about value here, I actually mean knowledge value plus customer value. And we need to continuously find the trade off between these two. Another trade off is short term versus long term thinking, what should we build next? Should we do that urgent bug fix or build that awesome new feature that will blow the users away? Or do that difficult platform upgrade that will enable faster development in the future sometime. We need to continuously balance between reactive work and proactive work or firefighting and fire prevention. And this relates to another trade off. Should we focus on building the right thing, or building the thing right, or perhaps building it fast? Ideally, we want all three, but it's hard to find the balance. Suppose we are here trying to build the perfect product with the perfect architecture. If we spent too much time trying to get it perfect, we may miss the market window or run into cashflow problems. Or suppose we're here rushing to turn a prototype into a usable product. Great for the short term perhaps but in the long term, we might be drowning in technical debt that our velocity will approach zero. Or suppose we are here building a beautiful Cathedral in record time. Except that the users didn't need a cathedral they needed a campervan. So there's a healthy tension here between the scrum roles, product owners tend to focus on building the right thing. development teams tend to focus on building the thing right? And Scrum masters or agile coaches tend to focus on shortening the feedback loop speed is actually worth emphasizing because a short feedback loop will accelerate learning so you'll more quickly learn what the right thing is and how to build it right. However, all three perspectives are important so keep trying to find the balance. Finally there is a trade off between new product development and old product improvement. Product Backlog is actually a slightly confusing term because it implies that there is only one product and project is a confusing term two, because it implies that product development ends, a product is never really finished. There's always maintenance and improvements to be done all the way until the product reaches end of life and it's shut down. So when a team starts developing a new product, what happens to their last one, handing off a product from one team to another is expensive and risky. So a more common scenario is that the team continues maintaining the old product while developing the new one. So it's not really a product backlog anymore. It's more like a team backlog, a list of stuff that the product owner wants this team to build. And it can be a mix of stuff from different products. And the product owner needs to continuously make trade offs between these once in a while, a stakeholder will call Pat and say, Hey, when will my stuff be done, or how much of my stuff will be done by Christmas? As product owner, Pat is responsible for expectations management, or more importantly, realistic expectations management. And that means no lying. I know it's tough. But who said agile is easy. It's not really that hard to make a forecast as long as it doesn't have to be exact. If you mentioned the velocity of your team, or the combined velocity of all your teams, you can draw a story burn up chart like this. This chart shows the cumulative number of stories delivered over time, or story points if you prefer. Note the difference, this curve shows output, that curve shows outcome. That's the output. And that's the outcome that we hope it will achieve. Our goal is not to produce as much output as possible. Our goal is to reach the desired outcome. Happy stakeholders using the least possible output. Less is more. Now look at the burn up chart. And it can draw an optimistic and pessimistic trend line and do it using fancy statistics Voodoo or you can just draw it visually. And the gap between these lines is of course related to how wavy and unpredictable your velocity is. Luckily, that tends to stabilize over time. So our cone of uncertainty should get tighter and tighter. Okay, so back to expectations management. Suppose the stakeholders asked Pat, when will all of this stuff be done? When will we be here? That's a fixed scope variable time question. So Pat uses the two trend lines to answer most likely sometime between April and mid May. Suppose the stakeholders ask Pat, how much will be done by Christmas? That's a fixed time variable scope question. The trend lines tell us well, most likely finish all of these by Christmas, some of those and none of those. And finally, suppose the stakeholders say, Can we get these features by Christmas? Now that's a fixed time fixed scope question. Looking at trend lines, Pat says Nope, sorry, ain't gonna happen, followed by, here's how much we can get done by Christmas. Or here's how much more time we would need to get everything done. It's generally better to reduce scope that extend time. Because if we reduce scope First, we still have the option to extend the time later and add the rest of the stories. Vice versa doesn't work. Because darnit, we can't turn the clock backwards in time is rather annoying that way, isn't it? So Pat puts it this way, we could deliver something here and the rest later, or we could deliver nothing here and the rest later, which do you prefer? these calculations are pretty simple to do. So Pat updates the forecast every week. The important thing here is that we are using real data to make the forecast and that we are being honest about uncertainty. I said no line, right. So this is a very honest way of communicating with stakeholders. And they usually appreciate that a lot. If your organization doesn't like truth and honesty, it probably won't like agile. Now a word of warning. If the team is accumulating technical debt, if they're not writing tests, and not continuously improving the architecture, then they will get slower and slower over time. And the story burn up curve will gradually flatten out that makes forecasting almost impossible for Pat. So the team is responsible for maintaining a sustainable pace, and pat avoids pressuring them into taking shortcuts. Okay, what if we have a larger project with multiple teams, and we have several product owners, each with their own backlog for a different part of the product. Overall, the model is really the same. We still need capacity management, we still need stakeholder communication. We still need product owners who could say no, we still need backlog grooming, we still need a short feedback loop etc. Velocity is really the sum of all output. So that can be used for forecasting or make a separate forecast for each team. If that makes more sense. In the multiple teams scenario, however, the product owners have an important additional responsibility to talk to each other. We should organize the teams and backlogs to minimize dependencies, but there will always be some dependencies that we just can't get rid of. So there needs to be some kind of sync between the product owners so that they build things in a sensible order and avoid sub optimizing. In large projects. This usually calls for some kind of Chief Product Owner role to keep the product owners synchronized. Okay, that's it. Agile product ownership in a nutshell. hope this was useful to you. Okay, so that's, that's a really good reference sheet. I've got you got the link. I would definitely file that away somewhere, you know, because you may forget, you know what we cover, and then you're in your job where agile Scrum is being used wherever you could dust that off. And I think you'll, you know, it's a really good, you know, summary really focuses on the product owner, but it is it's a good summary of the overall you know, overall process. Okay, my Alexandra. Okay. So I've got another quiz right now our own knowledge check. So let me go ahead and go ahead and launch that. And it's based on these roles that we just covered. Okay. Okay, there we go. Okay, so here's the, the next poll. Okay, this thing we got everybody. So let me end the poll and share the results. And we'll go through this. Okay, so the first one is one of the scrum values is focus where we focus is on the sprint and the goals of the scrum team. And 96% a true and that's right. So that is one of the real benefits of the of the scrum process is that there's a limited amount of functionality that the team is working on in a given sprint, and so it does provide great focus. Number two, the work carried out by the scrum team as defined by the senior executive for that division at the beginning of each week in the impact memo. Well, that's false. You know, so that's, you know, one of the things we talked about is that the, the scrum teams are, you know, self organizing and you know, the product owner is deciding You know, what the key what's the highest priority, and then the team then pulls in, you know, certain items off of that product backlog. And they decide, okay, here's, you know, here's how we're going to go about, you know, saw are implementing those product backlog items. So, teams self organizing, it's not, you know, a lot of external interference with that was, like I mentioned before, I mean, you know, for organizations that are making that shift, that can be problematic, you know, I mean, we're, we're, sometimes managers executives have more trouble because they're used to maybe interfering, you know, reaching down and, and, and dictating what would happen, and that's not, you know, that's not what the scrum process works. Okay, one of the important roles of a scrum master is remove impediments and external interferences that the team is facing. And true is right, so 90% of You got that right. And then number four, the product owner is responsible for delivering a successful product, and therefore prioritizes the features the product according to the market value, so 84% said true, and that that is right. So and you kind of got that in the in the in the video. I mean, he used the word stakeholders or whatever, which is a more general term, you know, which we think of external people like a commercial product, you kind of think of them as customers. But if you have internal, you know, customers, like the it example, I mentioned, you know, they might be referenced more as like stakeholders. So stakeholders is kind of a general term for anybody who really has a valid concern about the, you know, the product is direction, and that will include executives, so it's not like the executives that accompany in Scrum, hey, they have no input whatsoever. Oh, no. I mean, they are responsible for the success of the company. And so they can be part of the process, but they can't, you know, just dictate what, you know, what happens on the team? Okay. All right, great. So that is the second knowledge check. Any, so I'll get into a habit of just asking, you know, hey, are there any questions on like, what we covered here, either on the poll, you know, the knowledge check or anything before, and then we'll kind of use these as little time for q&a. And if there are no questions, and we'll go on to the, you know, to have a little short break, so any questions on what we've covered so far? Okay, great. And well, you know, what I'll do is, as he covered a lot in the video, what you'll see is that, in today's lesson, we'll kind of be diving into a lot of those areas in detail, as well as, as, as next time. So he talked about how to scale and so we'll talk about a couple of different processes there are used to scale you know, Scrum, one, this kind of, basically, you know, Ken Shriver and Jeff Sutherland recommend called Nexus and another one is just something that Spotify Did you know, the music, online music company, use which we'll, we'll discuss. Okay, so let's, let's take a 15 minute break. So just come back at 730 and we'll get started again at 730. Okay, feel a little bit Okay, let's go ahead and get get started again, let's just do a quick comm check if somebody could just tell me if you can hear me. Yep. Can you hear me? Okay, great, thank you. Okay, so we've kind of we've talked about the roles, you know, if the development team, the Scrum Master, the product owner, you know, you saw kind of the product owner. In that video, it talked about the product backlog. And now we're going to kind of get into that. And we're going to start with you talking about user stories. And user stories are just a real simple way in Scrum, to kind of capturing an idea, you know, for, for business value, and taking some feedback from a customer and putting it into a very easy to understand format. And, and they're basically like a placeholder for like, a convert a conversation. So this is how Scrum, you know, avoids the need for like heavy documentation is they'll come up with these user stories. And they have this format, you know, as a user role, I want to accomplish some goal for some benefit. For example, you know, the example here is, as a typical user, I want to see unbiased reviews of a restaurant near an address, so I can decide where to go for for dinner. And then the development team, you know, with, quote, the stakeholder, or you might be an end user, you have to have a conversation about what exactly are you trying to do? You know, this one is pretty straightforward. Sometimes there could be a user story, you know, the little heart, you know, they understand and so it's just, the development team is just trying to get more, you know, more detail. But the whole idea is, there's conversations that are having the user story, you know, is this placeholder kind of the general idea. And then there's a conversation that occurs, what happens and, you know, we'll, we'll talk about, you know, waterfall and kind of traditional requirements generation, you know, much later, in the class, Doc documents are used for that, you know, that's where you kind of get, you know, some pretty thick documents that basically have a lot of information that's captured from customers. So, you know, there's some different kind of an acronym called invest, that describes what do you look for in good user stories, and so the AI is, you know, independent, something that you can schedule, and implement in any order. And stands for negotiable. Describe the what, not the how, so it's kind of been, you know, mentioned, with the development team, they decide how they're going to do something, the product owner could say, Hey, this is, you know, this is my number one priority, and I want you to work on that next, and that's fine. That's the product owner, you know, domain. But once you get to the development team, they decide how they're going to implement it. You know, these kind of obvious, that needs to be valuable, and they use stories need to be valuable, you know, something that the the customers want otherwise, it's ridiculous, why are we you know, why are we spending time on something if there's no value to the, to the customers, ie something that can be you know, estimated, so it needs to be specific enough to be sized and ranked. And what you'll see as we kind of go through the product backlog, sometimes you the, the initially the items are, you know, what are called epics are pretty large, it's like a placeholder. And as the priority for that moves higher and higher, you know, it gets more and more detail associated with it so that it could be, you know, size and rank as sized appropriately. So, you know, if it's going to be worked on soon, you know, it's like If it's at the top of the product backlog, then it needs to be smaller, you know, bite size, something is very easy to understand, you know, and then implement, if it's lower in the product backlog, and like I mentioned, this idea of an epic, you know, it's like, Okay, give me a more more general, because we're not going to work on it right away. So you work on stuff that's at the top of the product backlog. And then t needs to be testable, you know, in some binary way, so that you know, that you've implemented it successfully. So those are some ideas for what makes up a good user story, this acronym invest. And then, you know, on the back of the user story is some acceptance criteria. So it's information that has like conditions of satisfaction, like how do you know that you basically satisfied the intent of the user story? And so, you know, on the back, there'll be a description. So like, for example, if you're uploading a file, you know, and it's kind of describing the user story on the front, on the back, it might be specific about what are you talking about? I mean, there's a lot of different file types. So, you know, which ones do we have to implement, and the conditions of satisfaction kind of covers that. And, you know, again, the product owner has responsibility to accept or reject an item. And so they'll typically make, you know, a first pass and what the acceptance criteria should be. But then, you know, during sprint planning, I mean, there's gonna be a back and forth between the development team and the product owner. And they reach some, you know, agreement about what the acceptance criteria should be. But it shouldn't be, you know, something that's short, easy to understand, you know, it's like another example, you know, if you want to check your order status online, so, you know, when your packages coming, if you're clear about well, okay, what are the types of status checks while waiting for pickup in route delivered, you know, and have a date with each step, estimated time of delivery. So anybody that uses Amazon, you know, sees this as a, you go to want to check on your order, you know, you get this type of information, but you call it out. So they know, okay, this is what we've got to use what we have to implement to be able to be successfully, you know, pass acceptance criteria for this product backlog item. Okay, so we've talked about user stories in the user stories go into, you know, product backlog. So that's the next topic. And the thing that I love about a lot of things I love about Scrum and agile, but, you know, the product backlog is one of them, because you take, you know, all these different requirements, and it requires you to prioritize, okay, well, what is most important, you know, shouldn't we be working on the stuff that's most important first, and if something is less important to a customer, okay, maybe we get to it, you know, later. And so what this graph on the left is say, is showing, okay, what, what are features and function uses typical system? And what they found was, you know, these two categories have always or often, you know, basically it's only 20%, you know, so, and there's 45% that are never, you know, used and he you know, and we've seen this, you see this, I'm sure, in your lives in the software that you use. I was at Microsoft, I was in for one of my roles in Microsoft business division, that was run by Jeff RAIKES at the time. And business division had all the the office product line, you know, so we're Excel, you know, the whole office suite PowerPoint, and Jeff RAIKES had permission to study, you know, to look at basically do this find out, okay, what's, what's used what's not use, you know, that kind of thing. And, you know, the, the response back was similar to this was actually less than 20%. It was kind of like 13, or some percent of the, you know, the functions were in this often or always case, whatever. And, you know, that was pretty shocking. I mean, so because this was before the company have moved to Office 365 and a subscription model. So the way the company made money is like, Hey, you know, we did we develop a next generation Excel, and it's Packed with all this new functionality, and then that will get people to want to upgrade and buy this, this new version. But it was concerning if they will, golly, you know, people are only using the small percentage of the functionality, say in Excel, they're not going to want to upgrade, and that was starting to happen, you know, it's getting harder and harder to get customers and including enterprise customers to to upgrade. And so anyway, you know, the solution they had at that time was what become known as the ribbon, you know, they're kind of a different user interface to make some of the functionality, which they thought was kind of hidden, make it more visible, and you know, get that in front of customers. So they would try it and use it and learn about it or whatever. And, you know, I think that marginally that that help, but I mean, I think the reality is, is that in, you know, most applications, people know what they need the application want to use the application for, and then that's what they use it for, you know, those are, those are the prime priorities. And so adding on a lot packing in a lot of additional functionality doesn't necessarily always correspond to additional value, you know, for the for the customer. And so anyway, you know, what you want to do is you want to release like this, it seems to think of this as the product backlog with this being the most important stuff up here. And then here are all these prior to prioritize features, you got to mail the 20%, you know, you don't want the 20% down here, and, and you want the 20% to be done very, very well. And over time, maybe you iterate on it. So you know, on the following releases, maybe the 20% is attacked and improved and improved and improved, because that's what that's what people are using. So this is very different than, say a waterfall approach where at the beginning of a kickoff, you know, the next version, or a new version, or new product, or next version, or product, you know, you've done all this research, and you get all these different is big laundry list of functionality. The problem is, it's not really prioritized, you know, so some of it is going to be in this never used category. And some of its going to be in the 20% category. But it all goes out to the development team as kind of equal priority, you know, for the most part or whatever. So, with the Agile Scrum approach, you know, in teams that use a product backlog, that changes, you know, and then obviously, this ties this whole idea, or it can tie to this idea that Steve Blank, you know, and his guys came up with with the minimum viable product well, because, you know, maybe when you first come out with a minimum viable product, it's not 20% It's fine, it's the top 5%. But then you keep adding on, you know, and getting, you know, to where, hey, yeah, you're capturing this 20% and that way, you know, okay, you know, can we, that should resonate with customers, if you're working on the stuff that they consider to be, you know, most important. In any event, you know, as time goes on, you're adding on more and more, you know, functionality and attention. So there's some cut off where, you know, you're like, the product owner says, No, you know, we're not going to, we're not going to ship this stuff, it's just not high enough priority. But, you know, that's the concept. So the product backlog has, you know, Product Backlog items in them, you know, and so what, what's in those items, you know, well, there's features, you know, it says, okay, something that the customer wants, sometimes an item will be interested defect, you know, we have some problems in the product that needs to be fixed. Sometimes it's technical work, you know, to be able to build a strong foundation to build upon. And that's where, you know, When, when, in the video on the product owner, you know, you saw the curve of like, what was implemented and like, okay, the customer value might start out a little flat, because maybe you're focused on either knowledge acquisition or some technical work, then you start layering on the features on top of that, and then you get a growth in the curve of, you know, kind of what the customer considers to be valuable. So anyway, these are the different items, you know, that could be a product backlog item, a feature, a change or a defect, some kind of technical improvement, or some something for knowledge acquisition to you know, allow the team to come up with the best foundation for the for the product and So just like we invest in user stories, we want our product backlogs to be deep. So this is a acronym of like, Okay. You know, as you're creating a product backlog, things to consider? Well, one thing to consider is that it's detailed appropriately. So what the heck does that mean? Well, what that means is that, you know, stuff you're going to work on soon, it's up at the top of the product backlog, you need a lot of details, because the development team, you know, is going to go work on that, and they need to know where you're talking about, you know, so there needs to be specific enough and small enough size, so that they can pull it into the sprint backlog and work on it. stuff that's like down here that, you know, mace is kind of in the someday maybe category is not going to be worked on soon. Well, it can be more of a placeholder, you know, so you may have a large size, who details like, you know, we just don't want to forget about that, you know, we've had several customers mentioned something, you know, whatever, and we were capturing it, but right now, it's not that high and the product backlog, so detailed, appropriately mean stuff at the top very detailed stuff at the bottom, you know, not that detailed? Well, this is another, you know, comparison with like, waterfall, because, you know, you've got these big requirements, documents, your pack crammed full of all kinds of, you know, features and functionality, but it's not prioritized, it all has to have a detail, you know, associated with, that's why it takes a long time, because, you know, it takes time to you know, put the get the requirements, and then put the right amount of detail in the requirements document. The challenge with that is a lot of stuff, you know, it's not that important, you know, it's kind of a waste of energy to be, you know, putting a lot of detail in it, because you don't know if it's ever gonna make the product or not. So that's the first letter E, first, T stands for emergent. So you know, it's basically just means that, you know, with agile, we adapt based on feedback. So you know, you implement something, you get it in front of a customer, you get some feedback, and then you know, you factor that feedback into your, you know, into your planning. So, you know, a new idea might come in a row, I mean, a new idea, from a customer say you do a sprint review, where you demonstrate the product, and you get some feedback from the customer? Well, because product backlogs are emergent, hey, that thing may go in the next the next sprint, you know, if it's really if it's high enough priority, and the feedback is that important, you know, so it doesn't necessarily stuff doesn't necessarily come in at the bottom, it comes in where it needs to come in based on its relative priority. So that's the idea behind emergent. Again, if you're not starting with a prioritized list, so where does stuff come in at the end, you don't know any better, you know, to be able to, you know, pop it in the higher in the queue. So it just comes in the tail end, but hey, maybe it's a lot more important than something else that's higher. Okay, the second he is estimated. So what that means is, we're going to, we're going to go through kind of a product backlog item estimation exercise in a minute. But basically, you will have what could be called story points or effort hours, it's kind of relative sizing of the product backlog items. And that's true, you know, to a certain depth in the product backlog, and you get down to the bottom, it's like well, you know, we're not going to get too granular. So, what tends to be used there, you know, t shirt sizes, extra large, large, small, whatever, you know, that kind of thing. But basically you want you know, these product backlog items have to be estimated. And then finally, you know, the P is prioritize, so that, you know, you know, what your, you know, what was next to be worked on, and typically a product owner, you know, will will think about, okay, what is the release, what am I going to, you know, when this amount of functionality, you know, the release one is completed, you know, then we're going to ship it, you know, maybe we're going to release it into production, if it's an online, you know, service. And then you say notionally, they have, you know, these lines were for different releases. And obviously, that can change, you know, over time but they, you know, they kind of prioritize and then figure out what would go in the next release. Okay. So now we're going to talk about well, okay, you know, we're supposed to have estimates, you know, how do we do that, you know. And, again, I really like the approach that is used in Scrum, the idea is relative sizing. So, you know, with teams that I've run, you know, we used to have, like, well, how many man hours you know, or how many clocks, you know, 1000 lines of code, you know, and, and try to figure out, okay, based on that, you know, they come up with an estimate of how many lines of code and then try to figure out what's the time going to be required. And, you know, those were always quite lacking, because, you know, you could have maybe long lines of code, but really, the effort to do that is not that difficult. And even estimating lines of code, you know, is, is, you know, it's very, very difficult to estimate. So what, what happens is Scrum, is you get relative sizing. And, you know, you can have these kinds of this Fibonacci series, where you have, you know, something that, like, zero to indicate, you know, something's already completed or so saw a small, it doesn't make sense to size that to like a half, or like, really, really tiny items, 1234, really small items, five, 813, you know, some medium Anyway, you know, if you serve, you're using these numbers, and then you get to, like, 100, for like, a very large feature, you know, or an epic. And the goal of the team is not like to get super precise, like this item is, you know, 15.685, or, you know, some kind of false precision is basically to say, This item is bigger than this other item, you know, relative sizing. And over time, you know, teams will get pretty good at very good at the relative sizing, and pretty good at putting it in the right bucket, you know, but well, you will find that teams May, you know, they'll start out thinking something is, you know, in the small category, and maybe they find, they dig in a little more Oh, it's actually kind of in the medium category, that takes a long time. But anyway, through this exercise that we're going to talk about, I'm going to show you a little video, you can get a sense of Okay, the the key goal here is getting the product owner, you know, and the team and potentially stakeholders talking to one another about what is in the item, you know, so there's a very good understanding of what's in the item. And then different functions kind of vote, you know, on Well, here's what, here's what I think it's a large item, and somebody else needs a small item. And then it leads to a very good conversation. Well, you know, you think it's large, I think it's small, I think it's small, because of the following Well, why do you think it's large, you know, and then through that conversation, you know, then you get to, you know, where the, there's a convergence, you kind of converge around the relative sizing of an item. So anyway, this estimating process is sometimes used within Scrum, it's called planning poker. And the concepts are that it's consensus based you trying, in most cases, to get to consensus around a number, you're using expert opinion. So you know, somebody who really has a text test expertise may have a different opinion than somebody who you know, primarily a developer, or somebody who's responsible for the user interface, or whatever. So you get these different experts to weigh in, you know, you get a good discussion, you know, about the item. And the goal is to get to relative size, and not precise, you know, a false sense of precision, but just the relative sizing, and then you get accurate grouping and, you know, bending, and then you know, over time, you know, the team's gonna get better and better and better, you know, at estimating, and, you know, so you should have fewer problems where, you know, the team doesn't take on a bunch of work, and they underestimated how much you know, time would be required. I mean, that may happen initially as the team's getting going, but over time, that you know, the team performance at estimating will get better. So, you know, here are kind of the rules of the, of the planning poker, you know, product owner will pick out an item, you know, to discuss, and then the team members kind of discuss the item ask clarifying questions. And then each estimator privately selects a card representing his estimate. And then you basically expose that to everybody at the same time. You know, so you don't want to get any bias early on, you know, we're one person biases another. So at the same time, everybody has raises their card, and then you know, then you lead to a discussion. I mean, everybody says, Something was a three? Well, there may be there's not much discussion, you know, he's move on to the next item. But if there's some gap, you know, typically then there'll be some discussion, you know, to, to resolve it. And, you know, you do this until consensus is reached, you know, unless, you know, it's just like, you know, too big gap between two people, and then maybe the product owner would say, Hey, you guys mind, you know, I think we just put it here in this, you know, at this level, what do you know, you kind of get a get you to agree to that, or whatever, and then they move on. So that's the concept or whatever. So, there's this little four minute section of this video, which I think does a good job of giving you a flavor of how this planning poker exercise would work. So let me let me pull that up. Single top item for now grades. Proposed using estimation cards to get a better cross section of opinions about effort to get that PBI into potentially shippable form. This particular team likes to make estimation a game using four cards per person t shirt sizes of small, medium, large and extra extra extra large, we're estimating the effort to complete the grades PBI choose a card, then reveal it at the same time as everyone else. Let's see the reasoning behind these guesses. I picked small because displaying the grades to students is just a few lines of code. I picked extra large because I can't imagine how we'd start testing such a vague requirement. I picked large because I thought the requirement was to allow teachers to update grades, not just display them. Actually, what I really want is teachers to be able to update grades students to be able to view them online, and report cards sent to parents each semester. Now I realize I'll need your help refining the grades product backlog item. Team seems to feel the grades PBI is actually an epic which can be split into several distinct user stories. This is one of the purposes of this backlog refinement meeting. It turns out most people don't use most features of most products, even the features they do use can be split into more valuable and less valuable parts are well formed PBI to the top of the backlog is no bigger than a quarter of a sprint. And ideally smaller than that. Maybe we can split the grades epic into more valuable parts to get smaller user stories. generating the report cards will be really hard because it depends on the unreliable third party PDF libraries. I'm willing to put report cards on the bottom of the backlog for now if we can at least allow teachers to update grades online, they tend to lose their paper records before it's time to turn them in. It's often useful to identify who what and why and a product backlog item. For example, few grades as a student I can see my grades online so that so I don't have to wait until I get to school to know whether I'm passing. Okay, I understand that one now. It has the who the what and the why. It's somewhat independent, and it represents distinct business value. If we work together, it may be small enough to get into a potentially shippable form in a couple of days. At first glance it seems testable. We'll leave room to add some acceptance criteria. What about update grades? Okay, so that you know that gives you a sense of how that planning poker exercise can work. Yeah, The Music Man animation is, is the most hip or whatever, but it does a good job of like, okay, here's how, you know, here's how this could work where you get different expertise weighing in. And, you know, the whole idea is that you get to conversation. And, you know, then from that conversation, better understanding, and, and then hopefully a better, you know, better estimate. So when the, this is something, you know, I do if we were in class, or I'm not gonna, I'm not gonna do it tonight has the most business value. If we didn't finish up date, grade, just a minute, sorry. Okay, so, we're not going to do this, whatever. But, you know, obviously, you can apply this to your software product development, but just imagine, you know, anything you're doing, you know, kind of depends on the context, you know, in going and getting more information. So, like, as a friend, I want to cook dinner for six people, so we can enjoy each other's company. Well, some of you out there, you know, maybe master chefs, you know, and you might have a seven course meal. And for you to pull this off, you know, I mean, that can be quite an effort. You know, if I'm making peanut butter and jelly sandwiches, you know, I mean, or ordering out for pizza or something, you know, then it's different or whatever. So, the whole idea is that you have to get the conversation going in a conversation with the product owner to understand what's happening, and maybe like, in the case, in the video, break up, you know, something that's really an epic into smaller bite sized pieces, or between functions to understand, you know, okay, the complexity of each function is thinking, you know, is involved in the, in completing that particular product backlog item. So, anyway, that that can be a very useful technique to quickly get estimates, but but reliable estimates. Okay, so the next, the next thing we're going to talk about is just the sprint itself, you know, kind of the structure of how Sprint's work within Scrum. So, you know, they start with the sprint with the product backlog, obviously, and with these items here in the product backlog, you know, prioritized appropriately. And then you go into sprint planning, and that's where, you know, the team says, okay, you know, based on our velocity, what we're able to accomplish, you know, we're going to take, say, these three items off the product backlog, and that's what we're going to work on the next sprint. And so here they are, you know, product backlog, item one, two, and three. And then though, you have to come up with the details, you know, kind of the work items for the development team. And, and then so they lay those out based on, you know, what it's going to take to implement that item. And so this is their plan for the sprint. And then you got to do the work. And so the sprint execution happens. And then there's this daily meeting called the daily Scrum, to basically inspect and adapt. So it's like, okay, you know, what do we do, each person says, here's what I did yesterday, here's what I'm planning to do today. And if they're blocked in some way, they identify that, and so that's done daily, and then you get to the end of the sprint, and you've got what's called a potentially shippable product increment, I think they probably could have come up with a, you know, more concise term, but basically some working software, you know, and the way they say potentially shippable is the ideas that, you know, the product owner any time could say, Hey, we're gonna, we're gonna release this into production, let's say it's a, you know, an online service, it's like, okay, you know, this is good enough, and it's good to go release it into production, or if it was a package product, wrap everything up, you know, and, and ship it. So I think that's why they use the term they did. Then there's a, you know, a meeting or review with the stakeholders, customers to basically, you know, where the, the team can demo the product, and they get a lot of feedback, you know, in that in that meeting. And so this, the sprint review is focused on the product. And then there's this thing called a Sprint Retrospective, which is just the team, you know, without the stakeholders just discussing the process. Like how do we work well together, you know, or if there's something that's bothering somebody you know, we need to correct or whatever And, you know, hopefully, the result out of the sprint review is it leads to a better product. The outcome out of the Sprint Retrospective, hopefully is a better process where the team keeps getting better and better. Anyway, then, you know, the whole process repeats itself again for the next sprint. So that's the flow. And what's you'll find, you know, this difference between waterfall and, and agile methods is waterfall do or will do these things sequentially, or do requirements, design code tests, you know, and we're talking like months of time, you know, between each block, in Agile approaches, you know, rather than doing all of one thing at a time, Scrum teams do a little of everything all the time. So if you go back here, you know, they're doing planning and kind of requirements generation or whatever. And then they're actually doing coding and testing and shipping. You know, so they're doing, you know, everything, but just a little, they're, they're biting off a little to do, and then they repeat, and they add on additional, you know, functionality. So, you know, sprints are often called the skeleton of the scrum, you know, framework, and they typically, you know, they have a consistent length. So, you know, at a certain maturity for a team, you know, maybe they have longer, you know, Sprint's up to four weeks, you know, and teams tend as they get better and better and better, they reduce the time, you know, so that maybe their iPhone a week sprint, you know, cadence or whatever. But in any event, it's a short duration. It's not months and months, it's no more typically than four weeks. And the other thing that it's kind of sacrosanct within the sprint, freight, Scrum and sprint framework, is the agreed upon definition of done. So that's pretty important. Otherwise, you're going to have problems. I mean, and so the product owner, and the development team need to agree, okay, when we say something is shippable, you know, what does that mean? You know, what kind of quality does this code have to, you know, be what else has to be done, you know, to say that it's ready to ship. And so that's the agreed upon definition of done. The other thing is that there's no goal or to altering changes during the sprint. So once this sprint backlog is created, so they pull in items on the sprint, and everybody says, Yes, this is what we're going to work on, whatever, then that's it, you know, say, say it's a three week sprint, and the product owner or something happening in the marketplace? And they're like, Oh, my gosh, you know, we've got, you know, there's some functionality, new functionality that needs to be added immediately or whatever, well, no, you're not gonna you're not gonna change what's in progress. And the reason that's not shouldn't be a problem is we're talking about three weeks. Okay? So at the end of three weeks, you know, you can adapt, okay, and the product owner could say, hey, guess what, I got a new number one product backlog item. Okay. But But during the sprint, there's no goal three changes. The reason, you know, if you if you had goals or changes, the team could be randomized all the time, you know, I was, oh, I changed my mind, this is the most important thing now. And the development teams like shaking their heads going, Okay. You know, we can't live in this kind of environment where everything can change. So no goal or goal through changes during the sprint. Another thing that's characteristic of several different things is in Scrum is time boxed, which just means there's a fixed time, you know, associated with the activity to be performed. So sprints or time box, you know, iterations, where, again, let's just say it's three weeks, it's like, Hey, you know, you're gonna do whatever you can do, you know, in three weeks, it's not going to be five weeks is not gonna be nine weeks, not gonna be one week, it's three weeks. So, you know, get what you can get done in three weeks. And there, you know, there's benefits of that, you know, if you know, you've got a certain amount of time, or establishes a whip, whip limit, you know, the team just can't take, you know, dozens of product backlog items off the product backlog, they just don't have enough time to do it. It forces prioritization, you know, so the product owners got to figure out well, gee, what is the most important for that particular sprint? You're able to demonstrate progress as you're getting something done. I mean, that is a that's a challenge in large waterfall projects, because you know, everybody's excited at the beginning a we're developing the next new version of whatever, you know, a lot of excitement and then weeks and months roll on, it's like well, what have we done I mean stuff is happening, but it's kind of hard to you know, wrap your hands around what exactly is happening with with Scrum and the Sprint's the, hey, at the end of three weeks, you got it, you got a potentially shippable product, you got something to demonstrate to customers, and so Hey, everybody gets motivated by, hey, we're actually doing something, you know, in a demonstrates that progress. And you know, you don't want to be the purview perfect, you don't have time to get everything, you know, perfect. So we have high quality, but you know, you can avoid perfectionism because it's a limited time motivates closure and then improves, you know, predictability. You know, once the team is up and running, and they have a certain velocity and they're able to achieve, it becomes easier, you know, for the team, and then stakeholders to say, okay, you know, here, here's when they're going to deliver a thorough release, you know, an overall release. There's also benefits of, you know, having a short duration, it's obviously easier to plan, you get faster feedback, you know, bounds the error, you know, so if we make some mistakes, well, you know, it's, it's limited by the amount of time that we're working on it, which is short. And there's a lot of studies and shows that proves, you know, return on investment, because you're getting value out to customers in a more rapid way. And this whole idea of rejuvenated excitement was just what I was talking about, you know, in the boil the ocean, you know, waterfall approach, a lot of excitement at the beginning, but yeah, it kind of tapers out, like the death march out here, it's like, you know, people were not that motivated. With sprints, you know, you kind of have more of this type of cycle. Okay, so that's all I'm going to cover tonight on agile Scrum, I wanted to allocate a little, it's not a lot of time, but a little time for the project teams to get together if you want to. So they've been formed or whatever, this is what I'm showing anyway, in Canvas for the project teams, and, you know, the teams have names, if the no name team wants to come up with a more creative team, you know, you're more creative team name, please, please do and I'll update that in, in, in Canvas. So the teams have been formed. And then next week, you guys have to deliver in bloom one, which is really a brief description of the application, you know, and should be something that, you know, kind of a paragraph something like people, if you're, if you're doing your elevator pitch, you know, say a venture capitalist and trying to get funding, that's what should be, you know, there. So it's like, your fellow classmates, and I could go, Oh, God, yeah, I understand what you're trying to do. And then then the business model canvas is where you put your initial guesses down of, well, here's what we think our value proposition is going to be, you know, hey, it's mass market, or some niche, you know, customer, we're going after, and leverage the information I gave you, you know, in the lesson to, you know, to be able to populate this with, you know, with your, your guesses. So, that's the idea behind lesson four. And, you know, I do want a short presentation from somebody on the team, about your team's application. And so we'll dedicate some time five minutes total, you know, some for three minutes for the elevator pitch, and then, you know, two minutes to q&a for me or other, you know, classmates to kind of find out more about what you have in mind for the application. So, that's the idea, whoever, you know, what I do is like, whoever does the pitches, both, you know, like, next time, and then there'll be other opportunities to do that, you get some bonus, you know, bonus points above and beyond, you know, other other folks just for, for taking the leadership to be able to do the pitch, internally, you know, within your team, you know, your self organizing, to figure out who you know, who's gonna, who's gonna do that. So just be prepared to do that. You don't have to have like a PowerPoint slide if you want to, you know, and have some text and then you know, the business model canvas template with it populate, that's fine. You don't have to do that. But if you want to do that, you'll be able to share that during that session. Okay, so that's, that's for deliverable one. And then deliverable. Two is after the midterm, do lesson six. We've kind of covered this before. But basically, this is where we start getting into the Google venture design sprint process. And this is kind of like Monday, you know, if you look at how they map it out, this is what happens on on Monday. And so you guys need to start thinking about that. And you know, app, the first thing is you got you got to find what you're going to do, you know, so you can't really start on this until you you get to get clear on what the application is and then your business model canvas. But then after you do that, then move on to you know to this for for lesson six. Okay, any, I'm going to want to cut you guys loose so you can have a little project time but before we sign off any, any questions for me? Okay. All right, well look, if if you have any questions just, you know, send me an email, you know, or if you want to have a call and though something I will mention is, you know, the midterms coming up or whatever Next time I will spend time you don't worry, you know, I will lay out Okay, here's what you need to focus on for the midterm. So we will do that during next lesson as well. Okay, guys, that's it, the guys will sign off and good luck on your projects. Okay. Thank you. Bye, everybody. Have a good night. Thank you. Thank you. Thank you. Okay, everybody, this is Jeff federal contract. Can you guys hear me? Yes, yes. Okay, thanks, should be able to see the deck here, I was waiting for a few other people. So let me was given a few more minutes here. Okay, let's go ahead and get started. So missing a couple people maybe got most everybody hope everybody's doing great and having a good quarter and enjoy a little this sunshine I'm just loving it and I get outside enough but on the weekends I am kind of done some landscaping planning some new flowers. So anyway, I love this time of year. So hopefully you're able to take a break and enjoy it as well. So here's what we're, here's what we got going tonight. It's kind of the second part of Agile Scrum. So kind of review what we covered last week. And then we'll dive into talking about sprint planning execution, some of the meetings that happen the review retrospective, and then kind of the larger you know, planning that happens across Sprint's to releases and some portfolio management. And then we'll talk about how to scale Scrum. So, you know, the guys that, that came up with Scrum, they have this, you know, framework that they use called Nexus. And so we'll talk about that, you know, so that's what they recommend. And then companies that have kind of largely adopted Scrum, you know, they may have their own take on it. And so, you know, one of the ones we'll look at is Spotify. And just kind of look at how they have modified the scrum, software development process, you know, to suit their organization. So, that's the main part of the or the meat of the lecture. And then, you know, we'll do the class project and just have a brief discussion by each of the project teams, on you know, what's the application that the teams focused on? And talk about that, you know, that kind of the elevator pitch for that as well as kind of the business model canvas. So when we get to that section all want to see who you know, who who's going to be the team lead and like I mentioned before, you know, because you got to do that you'll, you'll get to get some bonus points associated with taking on that leadership responsibility. And then we'll talk about what's you know what to do next time or not next time. But the the next deliverable for the project deliverable to and what's, you know, what's included in that. And this is where we're really starting to get into the Google venture process flow, you know, and kind of following that particular model. And then last but not least, we'll talk about the midterm exam that's coming up. And I'll kind of walk you through the key terms for that. And then you know, some of the other focus areas, so the key terms tend to be stuff that will show up on like, true false multiple choice. And then the other unit content will cover as more where it could be short answer, or where you need to find some information and some diagrams, but anyway, we'll talk about that at the, at the end of class. Okay, so what did we cover last time, you know, we talked about where the whole agile movement started, you know, way back when, in 2001, and what their core values were, for that movement. And then there have been a lot of different flavors, you know, different implementations that call themselves agile. But by and large, they kind of tried to stay true to these, you know, to these values. And, like we discussed last time, it's not like the stuff on the right is bad, you know, it's just that the stuff on the left is considered to be more important than the, the items on the, on the right. And then for Scrum in particular, it's, it's using, well, not just Scrum, you know, the Agile movement, in general, is using empirical process control. And what that means is that you're using inspection and adaptation. So you're, you know, you're developing some working software, you're getting that in front of customers, stakeholders, and then getting some feedback. And then you're iterating, you know, off of that to make improvements, or maybe even go a whole different direction. So that's different than, you know, other methods where the thought is that, okay, something's so well understood, we can model it theoretically, and then just implement it, you know, based on those requirements, which are expected to be known and fixed. And the whole process software development, it's like, well, you know, not, you know, in many cases, it's, you know, hard to get it to be okay, that that defined. And so, that's where iteration and adaptation have proven themselves to be very helpful. We talked about the scrum roles, you know, it's pretty simple. You got a scrum masters, like the coach for the team, the product owner who's responsible, really for the the business success of the product, kind of shipping the right product, and then you've got the development team, which is going to be developing the, the code for the product. And then you've got the, that's the primary, you know, the, the primary people involved in the scrum process, and you have customers, users, and maybe other internal stakeholders that are involved in the process, as well. User Stories are kind of a common way that teams take feedback from customers, and then put it into a format so that it's like, easy to understand and remember, and so that it has this format of as a, you know, user role, I want to, you know, accomplish some goal for some benefit. And so, for example, as a typical user, I want to see unbiased reviews of a restaurant near an address, so I can decide where to go for, for dinner. These are typically kind of placeholders then for a deeper, you know, conversation, that the development team and the product owner, you know, would have with, with customers and with stakeholders. In some cases, the user stories are pretty easy to understand. But in other cases, maybe maybe not so much, or whatever. And so, in Scrum, it emphasizes communication, conversation, versus documentation. So if you were using a more maybe like a waterfall approach, there'd be a whole much a whole lot more documentation, you know, to kind of substitute for that the conversation, but not with with Scrum. It's like, hey, let's just get something easy to remember easy to understand. And then we'll have a conversation about it. So anyway, that's the front side of the user story. Then on the back side, you typically have some conditions of satisfaction, like Well, how do we know You know, when we have accomplish this user story successfully. And so that's what the conditions of satisfaction are all about. For product backlog items, you know, these are where you take, you know, these user stories, you collect them in your product backlog, and then the, you know, the stuff at the bottom tends to be bigger, more nebulous, more general. So, and as the term uses kind of an epic, you know, something large that needs to be broken down. But as you work your way up the priority stack to the stuff that's going to be worked on next, then it's very detailed, you know, and you have really good estimates on those items as well. So the product backlog items, you know, are primarily like features that you want in the product. But sometimes it could be like a bugs and defects that needs to be corrected. Or it could be some technical work or knowledge acquisition. So those are kind of the typical categories for, you know, Product Backlog items. And, you know, this is the scrum product development flow, the sprint, you know, where you have your product backlog, you do sprint planning to pull items off the backlog, these are the things are gonna actually be, you know, work. So you've got these, these items over here on the top of the list, the development team will take in this case, they're taking in three of these product backlog items, and then they blow out, okay, what's the detail, the details that are required to implement that, and that's what we're going to talk a lot about tonight, you know, is this part of the process, then they get to, you know, they actually execute, they get to, you know, something that's a potentially shippable product at the end of the sprint, and then they have some reviews, Sprint review, to kind of look at the product, and get feedback on it. And then the Sprint Retrospective is to talk about the process is how is the team, you know, functioning? And what improvements does the team need to make to the process so that they can continue to increase their velocity over time? So anyway, that's, you know, in a nutshell, some of the stuff we covered last time, now we'll dive into, you know, the sprint planning. And, you know, typically, the product owner will have some goal, you know, for the sprint, like, what are they really trying to to accomplish for this next sprint, and there's some examples here, you know, could be a feature necessary for, you know, genetic studies, population genetic studies, or if it was like a financial services app, you know, putting in more technical indicators, you know, with real time streaming data. So just something like that was like, Okay, here's the the general focus for the particular sprint. And, as I mentioned just a minute ago, you've got the beast, it all starts with the product backlog. And, you know, this is what the product owner is controlling. So the product owner is not controlling how the development team does their work. But they're saying this is the most important stuff. So the development team can't go well, you know, we hear you, but you know, we're gonna go down here, this one's really cool. And we want to go work on that next thing now, you know, anybody can have a discussion with the product owner, and try to you know, say, Hey, we think this feature is more important than that feature, whatever. And that kind of happens in in product backlog grooming, but at the end of the day, you know, whatever the product owner has decided, are the key priorities. That's what's worked on next, you know, with a little little flexibility, but primarily, you know, the development teams working off the top of the list. So anyway, what they have to decide is, well, how many of these things can we work on, you know, based on this the size of those particular items, so then they, they decide that pull these items in and then they figure out well, what are the specific task of how we're going to implement those product backlog items. So you know, in a nutshell that sprint planning but it all starts with having a good product backlog and there's this term called grooming you know, Product Backlog grooming which typically happens in the prior sprint, you know, so the product owner is always trying to kind of massage their backlog and get it to be better. And so while a you know, a sprint is in progress, there may be a product backlog grooming meeting where they do they pull in, you know, the scrum masters and development team members. Not all you know, but some to do some grooming. So that the product backlog is in pretty good shape before sprint planning happens, because you can imagine, you know, if this is a mess, you know, like a mass and it's not prioritize, and the estimates aren't good. And in the product owner saying, Well, some of this stuff's now more important than this stuff or whatever, if they don't have a good product backlog, it's gonna be really hard to do, you know, Sprint Planning, so you got to start there. And then, you know, then the process, you know, can start. So that leads to Well, what are the inputs to sprint planning? And so we just talked about a product backlog. It all starts there, yeah, you got to have a good, you know, groom product backlog that you can pull from, then what else do you need to know, to have effective sprint less sprint planning? Well, you have to have some sense of the team velocity. And so if teams have been working together, you know, for for several sprints, they start to have a pretty good idea of, you know, how many story points, and we'll talk more about what that means later, you know, but it's basically like a quantity of work, you know, how fast they can move and accomplish that work? So, you know, I mean, it's like, if we're going to take a trip somewhere from Seattle to Denver, you know, and say, we're driving, and somebody says, Well, how long is it going to take you to get there? Well, you know, you have to know how fast are we going to drive, you know, what kind of mode of transportation we're going to take, what stops are there, but effectively, it comes down to velocity. And so you have to kind of have a pretty good handle on the team's velocity to come up with good, you know, Sprint Planning estimates, then there's, you know, constraints for a particular sprint, you know, that could be business or technical strengths, that could affect what the team is able to deliver for that next, you know, that next sprint, you know, in some cases, there could be some shutdown that's occurring, or time off, or it could be some company has some company wide event that people need to attend or whatever. So it could be a variety of different things that show up as a constraint. And that can vary from sprint to sprint, and so you just got to take that into account. And then, you know, team capabilities is obviously another area that's important. So, you know, who's available on this? for that next sprint? What are their skills? How available are they? like, Well, hey, you know, john has jury duty, you know, coming up, and, you know, it's his only going to be able to support the team a certain amount of time, or say, there's a certain, you know, we'd like to do some user interface work. But a person who has kind of some expertise in that area isn't available, you know, so that would obviously factor into the sprint planning. And so that's where, you know, things that I mentioned, where, you know, the product owners governing what's in what is worked on, you know, what's at the top of the product backlog? There's a little give and take, because there's stuff that comes up? And this is a well, okay, yeah, we kind of wanted to work on the UI. But, you know, it turns out that, you know, we're, we don't really have the right people to do that, maybe we could work on something else for this next sprint, so, so little flexibility, but basically, the product owners got to buy off on whatever, you know, whatever is going to be worked on. And then like we talked about before, you know, typically, there might be some particular focus, you know, that basically, the team is rallying behind to try to get something specific done. So how do you determine, you know, team capacity, you know, for a sprint? Well, at the top here is kind of, you know, here's the amount of available work time, this is the capacity to do the work. And this is like, you might want to plan a little buffer, you know, I mean, you don't want to just go flat out and assume you're going to be able to, you know, get everything done. So there's some percentage of buffer that you'd want to factor in. Then there's this other stuff, you know, okay, people have personal time off. There could be other, you know, non sprint commitments, or other, you know, Sprint activities, which this is, you know, kind of a, up the ante for every sprint, like I said, you're gonna have sprint planning, you're gonna have meetings, you're gonna have product backlog grooming. And so that's probably pretty easy to account for, you know, it's a certain amount of time for each sprint. And so this is some of the variable stuff here that you've got to account for. That could vary from you know, sprint to sprint. But anyway, you got to figure out okay, well, what is that capacity for the upcoming sprint And then for like product owners, you know, a lot of times they're trying to figure out if they say they've got a release planned. And they kind of know, okay, here's the functionality that I need. And this is adding up to 200 story points. And, you know, so then they're trying to figure out, okay, when Could I have my next release? Well, they look at some historical data, you know, this is from sprint 1234, and so on or whatever. And so they've got you know, seven Sprint's worth of historical data. And obviously, the the velocity buried, you know, across those Sprint's, but on average, it was 20. You know, the team was able to accomplish 20 story points for each sprint. So then, you know, an easy way to then figure out well, how many Sprint's is it going to take was like, Well, how many story points do I have for that next release? Well, 200 divided by that average 20, you know, story points per sprint says, hey, yeah, probably in 10, Sprint's, you know, we would be able to finish enough story points to release that next product to the customer. So this is, you know, one type of planning that the team along with the product owner would need to do to try to estimate when that release could occur. And, you know, there's different estimates use for, you know, for different stages of where you are, you know, kind of what kind of forecasting you're trying to do. So, at a company strategic level, you know, there's kind of this portfolio backlog with different products. And then there's really, you know, rough cut, rough order magnitude assessment of, you know, what's entailed in, you know, shipping product A, product B, and so on. And it tends to be, you know, t shirt sizes, you know, extra large, medium, small, large, whatever. And, you know, then you get over to a particular product, and you've got the product backlog, you know, with just a with its estimates, that's where you have, like story points are ideal days, and we'll kind of walk through what this stuff means. And, you know, the type of meetings that are, you know, associated with these items, or you have portfolio planning, you know, for the portfolio backlog, you'll have, you know, Product Backlog grooming for a particular scrum team. And then also for a particular scrum team, you'll have sprint planning, and that's where you get into backlog tasks. And they tend to be ideal hours and effort hours. So what do we mean by all this stuff? So, you know, the portfolio backlog is pretty simple to say, hey, extra small, extra large, and typically at a management level, given their history, you know, they know that, hey, if we're doing a medium one, it's gonna cost us about, you know, 50 to 125k. And you're typically that might be the burn rate of the people, they have people assigned to a particular team, and it's like, okay, based on the number of Sprint's, that will be required, you know, that's how ballpark of how much it's gonna, you know, cost. And so, you know, that allows them at a strategic level, to make some trade offs, you know, okay, maybe we can't do everything. And so they're looking at the cost to do something versus what they think the revenue is going to be, you know, they're coming up with some ROI calculations. And they may decide, you know, we're gonna do a, b, and D, but we're not going to do c right now, you know. So, anyway, so they'll make those those types of decisions at that level. And then, you know, when you get to the product backlog, you're using story points, which, you know, are measure of the relative size, the product backlog items that takes into account complexity, physical size, and this is where, you know, we did that planning, you know, show you that video on the planning poker exercise, the whole purpose there is to kind of get a relative sizing. So again, it's not that important that it's like, Okay, this particular product backlog item is 6.237. It's just that, you know, it's smaller than this other item, and this other item is bigger than this other item, you know, then you got the stack rank, you know, and you're using numbers or whatever, you know, it's a lot of people use, like a Fibonacci sequence, you know, but it's really just to show relative sizing. You know, and And initially, when you might think about him, you know, that doesn't seem very, you know, I don't know, if I like that you don't know if that's precise enough. And what you find is that as teams, you know, are working these projects, you know, Sprint after sprint after sprint, they get really pretty good at nailing down what those story points are, and then being able to equate story points to ideal days, you know, and so what's an ideal day? Well, an ideal day is like what you might imagine, it's like, Hey, I don't have to stop and eat, I don't have to do anything else, there's no interruptions is basically, you know, hey, if I'm just focusing on the work to be performed, how long would it take me? You know, and so that's just kind of, okay. You know, metric of Okay, here's what we think that, you know, this particular item, how much work how many hours it would take, or days, and, you know, basically, over time, you can get pretty good at equating story points to ideal days for a team. Ideal hour is like the same idea, you know, when you get more granular, you're talking, you know, in hours, it's like, Okay, again, if I'm just focused on the estimating the work, you know, the size, the design, build, integrate test work, what is that? Well, in ideal, our effort, our is what is typically, you know, is used, and then that happens, you know, when you're doing coming up with the sprint backlog, which here's an example of a sprint backlog. So, you know, you, you have these product backlog items that equate to 21 story points. And then the team says, Okay, well, you know, to do this product backlog item, Okay, I'm gonna have to code the UI, I'm thinking that seven, you know, ideal hours, some automated tests are gonna have to be developed, that's a, you know, and so on. So they come up with the tasks required to accomplish that product backlog item, and it ends up being in this case, 45, effort hours, and they do you know, the same thing, you know, for each of these product backlog items. And then this is what's happening in sprint planning, you know, and so they're trying to wrap up there. And then obviously, there's going to be some iteration here, you know, initially, they may think, okay, it's going to take four hours to automate the test, and I'm further reflection the head, and I think it's going to be eight anyway, they finally get to Okay, here's our plan, you know, here is our sprint backlog. And to accomplish these 21 story points, we're gonna do all this work. And we estimate it's 150 effort hours. So then, how is that, you know, once you got that in place, you know, how is that sprint backlog, you know, managed? Well, individuals sign up for the work of their choosing, so work is never assigned. So that's a, that's a nice thing, you know, I'm Yes, we're going we talked about these teams are self organizing, I mean, there's no manager or executive coming in saying you're going to work on this, you're going to work on that, or whatever the team decides, and even you get to more granular the individual decides now, as part of the process that the team uses, you know, hopefully, there's given take, I mean, you could have a situation where say, you know, developer wants to work in a certain area, you know, and there's other people that would like to work on that too, you know, I mean, there there, there needs to be a little given take. So if somebody you know, is, is being very difficult, you know, and not kind of going with the flow at certain times, or whatever, you could imagine that in a squat, a Sprint Retrospective happens, that could come up, you know, I mean, because obviously, that's affecting the team chemistry and how the team works. But, you know, after a team, you know, has good chemistry, they've worked together for a while, you know, this can happen quite easily. Anyway, there's, you sign up your own work, the estimated work remaining is updated daily. So, you know, update work remaining, as more becomes known. And the work for the sprint emerges. So, what that means is, there's going to be changed something, you know, you again, you want to nail things in the sprint planning, but you're not gonna get it right. I mean, you're gonna think something that takes eight hours and maybe it takes 16 hours, you know, and so, basically, there will be updates to that, you know, remaining work as time goes on. And, you know, really kind of just like you might expect it's, it's the experience, you know, of the person and the team, you know, over time. Their sprint planning will probably be crisper and more accurate, and there may be fewer, you know, day to day changes. But even for an experienced team, if you're working on something that's totally new, you know, it's going to be tough to forecast. Exactly, hey, what the what the effort hours are going to be. Any team member can add, delete, or change the sprint backlog. So team member, you know, may come and say, Well, okay, well, we forgot something, I got to add this in, or, oh, this is no longer necessary, you know, I'm gonna, I'm gonna delete this particular item, that kind of thing. And, you know, if works unclear, then, you know, a backlog item, you know, you basically can spend more time to break it down and work with the product owner to be able to do that. So, I mean, here's the example how this might work. You know, here are these different tasks, code, the user face, a code, the middle tier, 16, and so on. And then Tuesday, you know, you come in and say, Oh, we have some work was done on the user interface, evidently. So now it's down before code, the middle tier is down to 12 tests, the middle tier, oh, well, what happened here, bumped up to 16 that's an example of like, you know, somebody started to dig into it and go, Oh, wow. You know, I forgot some stuff that has to be done or whatever. And so, you know, that's what you'll see. You'll you'll see some variation, you know, like this as time goes on and in the sprint. Okay. Let me take a little break here and we'll do one of our our polls to terrorists. Okay. Okay, here's the first poll once you guys take a little time and knock that out, and we'll see how we're doing if everything's coming through clear. Okay, let's go ahead and end the polling. And then let me share the results. And we'll talk about these. So Yeah, you guys pretty much nailed these, you know, the first one, the purpose of sprint planning is determine what items to the product backlog will be worked on during the next sprint. That's exactly right. That's the whole purpose of sprint planning, you know, and then to break down those items into, you know, more granular detail for what we call sprint task. And then the second one's also true. So few more, you know, people were kind of glue confused with that one, but it's like, you know, you got to have, first of all, this wasn't meant to be all of the items, but said these are, you know, these are some of the items. And so the team velocity is important, any kind of constraints, either technical, or organizational constraints, the capabilities of the team, you remember I mentioned, like, Oh, you know, maybe want some UI work, but hey, we just don't happen to have that particular person, they're not available. So, you know, that may affect, you know, what we decide to work on. And then having that initial sprint goal, you know, it's typically a good idea as well, to focus the team. The other thing, the key thing, though, is also the product backlog. You know, if you don't have a properly groomed product backlog, then it's hard to know, what are you pulling from you got, you know, you can't, you can't pull from anything, or you're going to pulling stuff that's like junk because it hasn't been properly groomed. Okay, so that's two. And then the third one, there seem to be, you know, more issues with. And then this could just be based on people's personal experience. So says here, the functional managers for each department make work assignments for each team that control what items from the sprint backlog are worked on by each scrum team member. Remember, no Remember, you know, each team member decides on what they work on, you know, again, it's meant to be collaborative, but basically, the scrum teams are self organizing, and so, you know, functional managers or executives are supposed to be like getting in and, you know, directing work. Now, maybe the reason that 27% of you said true is because that if you have to work experience, that may be your experience, you know, and I will say, you know, there's this transition that occurs anytime something's a relatively new model, you know, so like, when, when agile first came out, and then some of these offshoots of Agile like Scrum, you know, typically what happens is, organizations reject it, you know, it's new, it's different, oh, that's stupid, we would never do it that way, you know, that kind of thing and stuffs kind of rejected. And then, you know, some some early adopters start using it, and getting some success, you know, and then the word of that success starts to grow. And then more mainstream adoption occurs or whatever. And then what you can have happen is that, you know, mainstream adoption occurs, but not in a pure sense, you know, so you'll have organizations saying, Oh, yeah, yeah, yeah, we're doing agile. Oh, yeah. Yeah, we do agile, you know, or we do Scrum or whatever. And then if you dig into it, you go, Well, no, you're not, you know, I mean, you don't do this, you don't do that you do this, you're not supposed to, you know, so you could have organizations that say, Oh, yeah, we're agile. And, yeah, we do Scrum. And then, you know, management, or functional managers are directing all the work that's being done and the teams disempowered or whatever. So, you know, the way it's what I'm describing is the way it should be done, which is the teams you know, should be self self organizing, and determine the work that they're going to take on during the sprint. Okay. So let's get back to regular scheduled programming here. Okay, so now let's move over to sprint execution. So we've got this product backlog, you know, it's ready to go. And then, you know, Sprint execution is what it's all about. I mean, you know, really, you want to be developing code, developing, testing, you know, etc. And so you get into this sprint execution mode. And each of the features has these tasks. And then you're performing those, you know, in the order needed to complete that feature. During the sprint execution, there's this meeting called the daily Scrum and it's basically a focuses on these three things, you know, what did I accomplish since the last daily Scrum? What do I plan to work on by the next daily Scrum? And then, you know, what are the obstacles or impediments that are preventing me from making progress. So that's a way for everybody to get together, you know, in front of the sprint task board, and see, okay, here's our current status, and everybody goes, and they say, Hey, you know, here's a way to kind of quickly communicate what's going on. This is supposed to be a time box, 15 minute meeting, you know, so, one of the, one of the key things are, there are some meetings, you know, within Scrum, but they're really try to minimize them and put, you know, minimize the number, and have them be time boxed, whatever, any of you that have worked in industry, know that, you know, some organizations, you know, it's like death by meetings. I mean, it's unbelievable. I mean, not to disclose any dirty laundry. But I mean, there were some meetings that, like, within the IT organization at Microsoft, where there would be these huge, many, many hour meetings, you know, and there might be, I don't know, like, 100 people at these meetings and going through, you know, these different things, and you're just like, looking around going, Man, this is costing us a fortune, you know, and not all these people needed to be there, you know, I mean, the meaning itself was kind of questionable, whatever. And so, you know, at least with Scrum, is, you know, Hey, you got to communicate, you know, and this is a good way to kind of get together, get everybody level set on what's happening. But it's just, like, minimize it, you know, and then get on and do the work. So, you know, the daily Scrum, it's daily, 15 minutes, it's, you know, this idea of a stand up. And this is some guy sitting down here, but basically, you get in front of the, this task board, and, and kind of go through those questions that I, that I mentioned, something as important as it's like, not for problem solving. And so you'll find this happens in industry a lot, you know, something, you maybe should be teed up as a problem, and then a group of people should go off and work it will often happen is that no, you know, everybody wants to try to solve that problem right then and there. And it derails, you know, really the purpose of the meeting or whatever. So that's not the you know, these are just meant to communicate what's going on. Now. Now, say, somebody says, Hey, I'm blocked. Okay? Well, there's probably, you know, going to be another, you know, something with that. Another discussion with that person, the Scrum Master, maybe if some whoever if that person is blocked, and it's another organization, another person, they'll bring that person or organization into the discussion, you know, so there'll be some other problem solving discussion after the daily Scrum, but it shouldn't happen, you know, in that meeting. So it's not for problem solving. The whole world is invited. Okay, so, you know, these teams are self organizing, but it's not stealth, okay. So, you know, these task boards are typically in a public place, anybody management attack, you know, a functional manager and executive stakeholder, anybody could come up and see what's going on, whatever. So there's a lot of transparency. There's also transparency for these daily scrums. Okay, so we can show up and they can listen. But only team members, the Scrum Master, the product owner can talk, you know, and so, again, you don't want to have distractions or whatever. And there's this concept of pigs and chickens and Scrum. I mean, I don't know if you've heard this, but I think it's, it's kind of hilarious. So we'll go go through it. And it kind of got ties to this. Like who, who can talk, you know, during the daily Scrum or not. So, a pig and chicken are walking down a road. And the chicken looks at the pig and says, Hey, why don't we open a restaurant? Okay, the pig looks back at the chickens. Is that a good idea? What do you want to call it? And the chicken thinks about it and says, Well, why don't we call it ham and eggs? And think about that for a second? And then I don't think so says the pig. I'd be committed but you don't really be involved. Okay, so, you know, yeah, to get ham. Something has to happen versus to get an egg. Something has to happen. But the concept here is that, you know, let's let's call the chickens are the people you know, that aren't part of the team. You know, it's easy to come in and say, Oh, you should do this or do that or whatever. I mean, everybody's like an expert. That doesn't matter. He has to do the work, okay? And so this idea of Scrum is, Hey, you know, the people that are doing the work, they get to talk. Now, if a stakeholder is listening to something, you say, an executive and there's something of concern, they may go to the Scrum Master, you know, afterward or the product owner or something like that, or whatever. But they shouldn't be interfering, you know, in some of these these meetings, like the the daily Scrum, they shouldn't be, you know, interfering and, and talking during that meeting. Okay, so how do you use a sprint task board? You know, I think these things are a thing of beauty, okay. I mean, you got all these different, you know, I mean, you can you can automate this, you can, you know, you can have there are software tools to do this or whatever. But, I mean, you just put this up on a whiteboard with yellow stickies, okay. And, you know, you've got, okay, here's our product backlog items, here's what we got to do. Here's what we're doing, you know, it's in process, and here's the stuff that's completed, anybody you know, and the team or outside, the team can easily come up and go, Okay, here's what's going on here, you know, you know, now, maybe they don't know if they're ahead or behind, or some other tools we'll talk about, which would indicate that, this basically says, Hey, here's what these guys are working on, you know, this team is working on for this sprint. Okay, so it's really simple product backlog items that track to, you know, work tasks, and the tasks that, you know, have been completed for that product backlog item to those that are in work to those that haven't been, you know, they haven't started yet. Now, here's how, you know, you can start to track, you know, hey, are we on? Are we on schedule or not, you know, and so the team, you know, again, this is something that along with the sprint task board would be visible, but where the team does their daily Scrum, and so they'd map out, you know, these different tasks that have to occur. And then that would roll up to some effort hours. And then you start, like, in this case, you're starting off in like, 200, effort hours, and then you've got so many days in the sprint, and each day, you get together as to Hey, you know, what happened? Okay. And generally, you know, the line is going to trend down on occasion, you know, you can have something that pops up. And that's like, one of those cases where a team member had some estimate, you know, maybe like, for the automated tests example, and I thought was going to be, you know, for an end to be an aid effort hours, or I thought it was a is going to be 16. And so you could have that, you know, or something, you know, it pops up in the wrong, you know, direction. But in general, you know, over time, it's making his progress down to where, you know, hey, the sprint would be completed. One of the, you know, key things that needs to be established, typically, at an organizational level, you know, before any kind of sprints occur, you know, kind of as a part of rolling out Scrum, is, you know, what do we mean by done? And, again, any of you that have worked in industries, and, you know, know, hey, this is pretty important, you know, because you'll have a different development teams will have in their own mind, oh, you know, whether something is done or not meaning, okay, yeah, well, I have finished, you know, my coding, it hasn't been tested, I haven't done any unit tests, you know. So, but I consider it done versus No, that's not good enough. You know, I mean, to be able to have a potentially shippable product increment, there's a whole lot of other stuff, you know, that has to happen. So, you know, is the design been reviewed as a code completed refactor as necessary. You know, typically, organizations have certain formats coding standards. So as the code, you know, match the coding standards that the organization has, sometimes there's end user documentation that has to be developed or updated. And then obviously, tests that are performed. So anyway, this is, you know, the overall definition of done and it's different than acceptance criteria. So, you know, definition of done covers a broad set of items to be able to ship a product. acceptance criteria is typically tied, you know, to a product backlog item, you know, those conditions of satisfaction that I mentioned, you know, when we're discussing the format for a user story, so certainly, you know, you need to verify that acceptance criteria for the product backlog items. But in addition, there's a whole bunch of other items that had to have to be acquired. So, definition of done is a much broader set of items that, again, you want the organization as a whole, to have some standard. And then each scrum team, you know, then has to satisfy that standard. They don't come up with their own, you know, their own criteria for definition of done, they snap to the organizational criteria. Otherwise, you'll just have a mess on your hands. You know, what some people kind of doing the absolute minimum that is not acceptable for shipment, and others doing it the right way. Okay, so let's do another no knowledge check. Okay, so knock these out. We'll see if, if this is clear. Okay, let's go ahead and take a look at these. So this first one of the daily Scrum is a four hour meeting, held once a week before senior management's provide a status on the scrum projects. So yeah, vast majority of you guys got that, right. That's fall. So the daily Scrum, as you might imagine, is a daily meeting. So it's not a weekly meeting, it's a daily meeting and supposed to be only 15 minutes long. So it must be really, really quick. That's where everybody goes round that, hey, here's what I did yesterday, here's what I'm going to do today. And then whether they're blocked, you know, in some, some fashion, it's not meant to be, you know, problem solving meeting. So if there is a problem, you know, it's taken offline and worked separately. And it's not a it's not a you know, it's a team meeting. It's not a briefing to management, although management could be there, but remember, you know, the chicken pigs, they're supposed to their chickens, so they're on the sidelines being quiet. They're not supposed to be interjecting, they just listen to the sprint task board consists of four columns PB tasks to do tasks in progress and tasks completed. Again, the vast majority, you guys got that? Right? That's correct. That's the layout of the sprint task board. Very simple, but you know, communicates a lot of information. And then finally, or not, finally, the number three is sprint burndown chart shows the effort hours remaining in a sprint on the y axis along with the days within a sprint, on the x axis. And so that's right, you know, so that's where you take all those tasks, you know, to be able to, that are needed to complete the sprint. And, you know, when you're starting out, we haven't done any, you know, and then over time, every day, like, Well, what do we do, you know, as should trend down, you know, like I mentioned, there will be an occasion where, oh, hey, we discovered something, you know, something's going to take longer, you know, or shorter, you know, instead of pop, you know, could pop up or down, you know, every day based on, you know, new describe discoveries. And then for the definition of done is only concerned with satisfying the conditions of satisfaction for the different product backlog items in a given sprint. So that's false, most of you got that. Right. But there seems to be quite a bit of confusion, you know, on that one. So, just, yeah, so the, the conditions of satisfaction for different product backlog items, that's important. No doubt about it, you know, I mean, you want to make sure that, you know, if you're releasing software that's tied to a product backlog item, that it meets those conditions of satisfaction, but that's just one part of definition of done. You know, if you remember, if you go back to that, you know, slide that's in Canvas. There's a whole bunch of other stuff. I mean, just think about like coding standards and documentation, you know, or test a whole series of different tests, from unit tests to different types of automated tests, that an organ organization may say, hey, these all have to be run, before we say that we're done. So. So that's why it's false. It's not only concerned with the conditions of satisfaction, even though that's a key part of it. Okay. Okay. Okay, so now, we're going to talk about, you know, some other different meetings that occur during a sprint. And a really important one is this sprint review, you know, and so you'll have, obviously, the scrum team, internal stakeholders, external stakeholders, you know, maybe customers, you know, and users. And the inputs to the sprint review is basically Hey, what was our goal? You know, what was our sprint backlog? What were we trying to accomplish? And then most importantly, you know, here's our potentially shippable product increment, you know, what, where's the working software that we developed during that particular sprint, and then, you know, outputs from the sprint review, you could be some adjustments to the product backlog, and maybe some updates to the release plan, based on the feedback that's, that's received. So anyway, you know, typically, the sprint review kicks off, you know, typically, with probably the product owner saying, Hey, here's what we're trying to do, here are the product backlog items that we're focusing on, you know, along with the sprint goal. And here's, you know, generally what we created in the product increment that you're going to, you're going to see. And then you demonstrate, you know, some team members may then demonstrate the relevant aspects of that particular product increment that was built during the, the sprint. And then hopefully, you know, there's some good discussion where, you know, allows participants who aren't on the scrum team to ask questions, and to provide feedback as well. So they get, you know, the scrum team gets a better, you know, deeper appreciation of, you know, whether they're hitting the mark or not, you know, whether they're converging on a product that will delight customers or users or, or not, you know, so, again, you know, I this is, I think This is why these these particular agile processes are so valuable is because, you know, like I mentioned you just from my history, when you use like a waterfall, you know, approach where it could be many, many months before any kind of working code is put in front of a customer. And, you know, when that happens, basically, the only answer that's acceptable to the development team is Oh, yeah, we love it. Because I'm Well, I mean, there could be minor, you know, there could be minor changes that are made, but say, it really misses the mark. I mean, it's just a disaster versus here. Let's say that happens, you know, that, that the customer or, you know, the stakeholders who are going to use this product are very unhappy with it? Well, okay, you know, you get that feedback, and then the team can adjust and iterate, you know, and, and make changes, and, yeah, maybe we've lost some time, but you know, what, two weeks versus like, eight months, nine months. So that's why, you know, based on the feedback, the team will adapt, you know, and just, you know, make changes to what is there, or maybe, you know, some of the end users want to highlight stuff that they see that's missing, that they consider to be very important, but maybe it's lower on the product backlog. And so the product owner would have to take that into account. Whoa, okay. Well, you know, I wasn't thinking that was, you know, as critical, but I hear what you're saying. And, you know, they may go validate that feedback. And if others feel the same way, you know, other customers feel the same way. And then the product owner may, you know, adjust the backlog. So, you know, for the sprint review, the team's presenting what it accomplish, you know, it typically is a demo, you know, that's the the heart of it. And here again, are these time boxing, you know, it's like, to our prep time, no slides, whole team participates invite the world. So again, you know, the team self organizing, you know, but there's a lot of transparency. And there are there are mechanisms for comments on what the team is doing. And that's what happens in the sprint review. Yeah, that's when they get that, get that feedback, whatever. But here are some of the key things are, you know, this isn't meant to be like a dog and pony show, you know, let's get some really great, you know, looking PowerPoint slides. It's really the meat and potatoes, you know, what is the working code, let's look at it, you know, and let's see if we like that or not. And so that's why it's like, you know, hey, if you're spending more than two hours in PowerPoint preparation, or something, something's wrong here, you know, you should be able to come in, you know, and be able to present what you're doing, you know, without having to spend, you know, a whole day preparing. Okay, so the sprint review is one meeting focused on the product, you know, and getting feedback on the product. Another meeting that happens within the scrum framework is the Sprint Retrospective, is basically done after every sprint, everybody on the team, you know, participates? And again, it could include customers and others, but you know, typically, the whole team's got to be there, because the focus is really on, hey, how do we make the you know, the process better so that we can move faster? And so, you know, there's some, there's some objective data, subjective data, you know, your questions to team members that serve as inputs, and then the outputs are, okay, well, what are we going to focus on to improve? And then there's this ongoing insight backlog or whatever, which we'll talk about, and hopefully, you know, better team chemistry, you know, so the goal is like, okay, you want the team to get better and better and better. I mean, that's a big focus of the Scrum Master is, you know, as a coach, how do we get to this team, this team to have a higher and higher velocity until they just tap out? You know, it's like, Okay, this is this is basically, you know, the optimum performance for that given team. So, you know, what are some tools that are used for the retrospective? It could be something like this, or whatever, you know, which is a timeline and emotions seismograph, which sounds kind of funny, but it's actually kind of interesting, you know, because, like if you participated in a two week sprint, and maybe overall, you know, you know that I didn't really like that experience. I mean, it's something but it's kind of hard for you to pin down Don't know why it was just kind of a bad experience, I'm having a hard time thinking about it, what this does, this is okay, you know, let's go day by day. And think about stuff that was happening. That was either like, Hey, you were super excited about or you really didn't like or whatever. And so people put these little sticky notes, you know, along the timeline, and then they draw their line of like, well, where were you? You know, so this first one was pretty jazz throughout the whole, you know, the whole process, this person started up high, and then like, okay, something bad was kind of happening in here, and then they never got above neutral, you know, kind of got to neutral, whatever. And then, you know, this person stayed pretty low for the whole thing. Well, why, you know, so there should be some, you know, items there, that could be, those will become topics of conversation, that's kind of an interesting way to try to ferret out somebody experienced by getting them to focus day by day. And then, you know, they may remember may start by going, you know, I started out good, but then I just went down here, and I kind of stayed low. Well, well, what was happening here, you know, and then why, you know, you never recovered, and then you probably can then remember, oh, yeah, here's what happened, you know, anyway, it's a way to ferret out what happened in the team. And then, you know, identify and group insights, so you got all these different insights that different team members create. And then you do some affinity mapping, you know, and basically, say, Okay, got group one, insight, 189 are kind of similar, you know, same thing or whatever. And then by doing that, you know, now you're starting to get some categories of topics, you know, to go over whatever, anyway, then maybe they can be been to Hey, things to keep doing, you know, this is what was jazz, and everybody things to stop doing. This was what was causing people to, you know, be upset or lose steam. And then maybe, you know, some of the stuff like, you know, I heard this other team was doing acts, that sounded really cool. You know, maybe we should try that. Yes, it could just be some ideas for, you know, to try out. So anyway, you kind of been through that affinity mapping, and then Bynum into different categories. And, and then, you know, people, what's kind of used a lot, you see this in the Google Ventures process is this multi voting, you know, so people get some dot voting, you know, maybe three to five per person to prioritize items, and they can put them wherever they want. And they say, they think one insight is really super important. And they just put all their eggs on one or whatever, or they could spread them out or whatever. But basically, it's a quick way to kind of see what's resonating with people and what's, you know, what's not. And, you know, what are some typical issues with with retrospectives? Well, not doing the retrospective or low attendance. I mean, this is pretty typical, not just in Scrum, but any kind of projects. I mean, typically, after projects, done, teams, you know, project males, hey, let's get together and it's like, do a lessons learned or whatever, yeah, there's different labels for kind of reflecting on the project and the process. But a lot of times, there's something you know, the sprint ends and people are off to the next thing. So in certain organizations, maybe they have to just get into a habit of, Hey, no, we're gonna do this, you know, every, every after every sprint, we're gonna make sure we do this, whatever, all fluff, no stuff. So you know, pretty super superficial, ignoring the elephant in the room, you know, and a lot of times that can happen, because there's just not a really good facilitator. I mean, you could imagine that, you know, where is it here? if everybody's like, here, up in this upper area, okay, well, you know, maybe it's not fluff. Everything's like working really well, whatever. But that tends not to be life. You know, I mean, life in teams, especially teams when they're first getting going, you know, no, there's, there's problems there's issues there's friction or whatever. And so anyway, you know, if you find that, you know, nothing's nothing of substance is being discussed. That's not a good sign. That's typically like a you know, assess being just throw, you know, put under the under the rug not being dealt with. And so, you know, that's where you need to use these tools to try to get you know, people to be comfortable, sharing information, sharing how they're really feeling. Now, the opposite side of all fluff and no substance is this becomes increased, very negative. You know, and this, like, there's a lot of personal attacks in a blame game and a complaint session, you know, where it's just a whole bunch of negative, you know, energy. So again, the facilitator, you know, he's got to deal with that and make sure that that isn't happening. So everybody says, Hey, focus on the prize, which is, you know, hey, we want to get better. We want to make, you know, incremental improvements. And if we continue to do that, things will get better and better and better over time. And then another thing is, you know, common problem is just, you know, no follow through or either too ambitious or no fault or too ambitious is, you know, everybody gets super excited. It's like, well, let's do 20 things. Let's try 20 things, the next sprint, it's like, No, you know, there's not going to be enough time to do 20 things. So just pick, you know, a couple, maybe one or two, or no follow through. So yeah, all that works done, and then nothing happens. Okay. And then finally, you know, this, this is a good, this, this little chart, and then the video that I showed you on the product owner last time, you know, you should you know, store these away somewhere because, you know, if you're, if you're trying to like refer reference back and go, Okay, I remember we covered Scrum, and there's these different roles in the sprint or whatever. You just want to, you know, basically get back into it. This is like a super high level Reader's Digest, but it says, Okay, well what are the roles of the product owner Scrum Master, the development team, you know, you can even put little notes out here, you know, in terms of like the optimum team size, what are the activities where you got the sprint, obviously, before you even start the sprint, you get to sprint planning. You know, the daily Scrum is a meeting where you get together either for 15 minutes to talk about what happened, the day before was planned for today, if there's any blocking obstacles, you get into sprint execution, which should be where most of the time is spent, you know, actually developing and testing the code. And then you've got these meetings, you know, the sprint review, Sprint Retrospective, Sprint reviews focused on the product sprint, retrospective focus on the process. And then you've got this meeting as well product backlog grooming, so the backlogs in good shape so that it's ready for the next you know, Sprint Planning, you know, session. So those are the activities in the artifacts are pretty simple. You've got the product backlog, the sprint backlog, and you know, most importantly, potentially shippable product increment some so some some functional code. And you know, so these are, you know, this along with that video would kind of help reinforce Okay, here's, you know, here's what happens in Scrum process. Okay, so the next thing we're talking about is Scrum planning. But let's take a you know, 15 minute break, you know, and I'll see you guys at 730. Okay, scene a little bit Okay let's go ahead and get started again talk about Scrum planning as to still calm check. You guys hear me? Yes. Okay, great. Thank you. Okay, so let's talk about Scrum planning. So there's the different levels, you know, which we kind of brushed on earlier, which is, you know, at a company level, you'll have kind of a company strategy, and then a product portfolio, that rolls out of that strategy. And then from that portfolio or individual products, and within individual products, you'll have kind of a release, you know, cadence, and then to accomplish those releases, you know, it's one or more, you know, sprints. And then of course, you've got the daily Scrum and solution daily, you know, planning that's happening as well, you know, so that's kind of the hierarchy. And this table kind of just shows, you know, kind of describes what's happening, you know, within each of those areas. So, at the portfolio level, probably, you know, is done on an annual you know, basis. And so, you will have product management, organization and organizational you know, leadership that are kind of trying to figure out what that poll portfolio is going to look like. And you have a, you know, portfolio backlog as a as a deliverable. And then for the product, you know, that horizon could be many, many months or longer, you got the product owner and the stakeholders that are associated with that particular product. And again, it's it's more this is much more focused on the vision You know, for that product and how it'll evolve over time. And then you get more granular, you get into the release planning. And typically, that's going to be, you know, three to nine months, you know, of release planning of what you're going to get out in production to, you know, to customers. And it'll be the entire scrum team, and then the stakeholders that are involved in that. And then the sprint, you know, could be, you know, depends on what kind of curiosity the team's on, but from one week, typically do a calendar month, you know, could be that cadence. And again, it's a scrum team, the focus on the features for the next sprint, you know, so that sprint goal and the sprint backlog. And then you know, the daily planning that occurs is kind of the team's scrum master and the development team and you know, what's happening in as communicated in the, in the daily Scrum. So from very broad, you know, to very, very, very granular, kind of the levels of planning. And, you know, this is just another way to look at this where you'd have, okay, the product vision, and then put a calendar Overlay and then identify, okay, what's happening at various times, or at various quarters, and like, and it also could tie to different events that are occurring, which is quite common, you know, it's like, when we're doing that, like at my company, now, you know, we have a new product that's going to release, maybe in q4, maybe, you know, early q1 of next year, and there's conferences that occur and you're like, Okay, well, when are you know, when's the best conference for us to announce this new product Anyway, these are types of things that the product owner you know, management will be looking at and then figuring out okay, what their what their release, you know, schedule is going to look like so, you know, here are the got released point five 1.0x point now x dot y, and then how many Sprint's are going to be required to be able to accomplish that particular, you know, real release, and then it flows down to Okay, you know, product owners thinking is four Sprint's to accomplish this release, they're in sprint, you know, one, and, you know, here's the, here's the focus for that particular, you know, sprint backlog. So, again, it goes from kind of general to, you know, a specific implementation. One of the benefits of Agile approaches is that kind of been research that have done that basically favors smaller and more frequent releases from, like, an ROI. standpoint. And what that means is that, you know, typically a year you're launching a product, you know, a lot of the, especially if it's a new product, you're not getting paid, until that products release, you know, and then it's available to the public to, you know, to consume and start paying, paying you money. And so, with this little trough is showing is, you know, self funding, which means, basically, you're not getting any revenue, but you've got expenses, okay. And then, you know, once you release venue, then that's when you start generating profit. Well, you can imagine that, you know, if you say you do an MVP, you know, you get that out to market, and it's resonating or whatever, and then you're doing another release, and then another release, but at the same time, you're getting paid, you're getting revenue, you know, from that MVP, and then releases that follow after that. If you hold you know, and you don't release until later, well, then you're just burning all this money, all this money, all this money. And so from an ROI standpoint, something called like a net present value, the payoff for smaller, more frequent releases, you know, is going to be higher than like a big bang, you know, release. But with that said, you know, you've got to, you got to, you know, find the right release cadence, you know, for your organization. And that'll depend a lot on like, what your product is, you know, and what your customer base can tolerate. Because, I mean, this whole idea of, you know, continuous integration and continuous release, sounds great, but then, you know, as a user, you know, you see this if you're constantly getting, you know, okay, there's an update available, and you've got to Update, and then it takes a certain amount of time to update. It's a nuisance, you know, I mean, it's like, okay, I don't mind doing that, because I want to get the latest bits or whatever. But if it's done too much, and there's not much, and the user doesn't really see the value from the update, then it can start to affect, you know, customer satisfaction. So, you know, that's where you got to figure out, hey, release every feature, you know, probably not release every sprint probably not release after multiple Sprint's, you know, yeah, even for, you know, cloud enabled applications that could release almost continuously, it probably doesn't make sense to, you know, to do that. Except for very special circumstances. So, what are, you know, what are some release constraints? Well, you know, this is kind of the, the, where sometimes you get senior management thinks that magic happens, you know, we can fix scope, fix the day, fix the budget, you know, and everything's nailed, you know, that seldom happens, okay, you can fix scope, and date. And that's not recommended, okay? Because that can make it you know, those two can work across for purposes. Or you can fix scope, saying, basically, hey, you know, we know what needs to be in the next release, and we're quite clear on it, you know, and we've done a lot of customer testing, and we know, it's got to be, you know, this, this number of features, okay, we fixed the scope, but then we'll be a little flexible on the date, you know, of when that would happen. And then the, you know, the budget is, is really not fixed, I mean, because if the dates not fixed, then the expense associated with that development, you know, go up as the date moves to the right. Or you could have a fixed date, where, you know, you basically say, Hey, we want to release on a certain cadence. And that's more important than, you know, any particular feature set that's included, it's like, Hey, we want to just get into this rhythm, we're gonna release on a certain cadence or whatever, and then we're gonna fix the date, and then fix the budget then is, you know, relatively fixed. Because, you know, you've got this window of time, where people are working on that, on that next release. Anyway, those are, you know, types of release constraints. But, you know, you run into problems, you got, like, a fixed date and a fixed scope, you know, is, it times Something's got to give, you know, you get to a point where say, okay, you know, we're either going to get the scope, or the date, but but not both. This is a, you know, another aspect of agile, that I really like, with other methods, you know, you kind of encourage executives in particular, to live in this fantasy world, that everything can happen and everything having the same time and same budget. And, you know, it's like now, I mean, that that's just seldom happens. And so you need to decide what's most important to you, you know, the scope, or the or the date. So here's an example of like, a fixed date release plan. And the team, you know, as this is going on, the team is assessing kind of where they're at. And, and what this says is like, Okay, in this case, here's where the bar is, is, you know, from a kind of the functionality that the product owner is looking for. This is a must have. And then the development team is saying, okay, here's what we will have, by the end of this, you know, Sprint, here's what we might have. And here's what we sure we won't have or whatever. Well, it's good news, because what the product owner must have, he will have, okay, then you have a situation where Yeah, it's more borderline, okay, the must have is down here, the might have categories and the team may be able to, you know, get everything over the line, you know, by that, but that particular date. And this is the bad news area where say, Okay, here's the must have, the team's quite sure, hey, you know, we're just we're not going to get there, you know, with the remaining time that we that we have or whatever. And so some scopes going to be missing based on what the product owner would like to have. And you know, we talked about the the burndown chart. This is what can help you figure out well, where are we at, you know, and where are we likely to be, you know, how much time is it going to take us to accomplish These 200, you know, story points, or in this case 150 story points at the beginning, so the way to read this is at the beginning, you know, we're right here, and we've got these kind of these variants lines, and these various lines, say, when we're starting out, we think, you know, it's probably going to take us seven to nine Sprint's to release this product, you know, release this increment. And as time goes on, this is what the this particular line, this is showing reality. So, at the end of the second sprint, we're saying, Well, you know, we, we've worked off some of the stuff, but we're still pretty high, you know, we're not on the glide slope here, you know, to get to eight, which is kind of the, the Midway was kind of like the nominal, if that, okay, it could be seven to nine and nominally be eight. Well, up here, we're saying now, you know, it's looking like we're trending more toward nine or more, you know, based on where this is at, but then hey, some great stuff happens, you know, and you get down on sprint three, and you're kind of down on this line here, the Hey, you may actually get done in seven sprint, so you're gonna have this variation or whatever. But this will tell you kind of as the different Sprint's are accomplished, and you're working towards a release, okay, how many Sprint's is it going to take us or whatever. And so, you know, somebody this is showing, like the complete history of what happened, and it took eight sprints, but if somebody were to say, you know, you're looking at a chart like this, and somebody would say, Hey, you know, when they, when they finish up the fifth sprint, you know, what do you think their estimate would have been? where, you know, when they would ship that release? Well, you know, as they went on, at the end of the fifth sprint, they're up here, you know, so they're not there, they lost some time again, so they're basically on right, you know, a little above this upper line, this upper line is saying nine. So kinda, you'd have to say, well, it's probably gonna take them nine sprints, maybe even 10, you know. And so anyway, that's how you could use this burndown chart to just see where you're at a crude level where the team is, you know, whether on track or not. Okay, now, let's move over and talk about scaling Scrum. And the first thing we'll talk about is this nexus framework that the founders of Scrum came up with or whatever. And basically, it's an overlay, you know, of the traditional typical Scrum framework, where you'll have like, you know, variety of different Scrum teams, and then you'll kind of overlay this nexus framework. On top of it, you know, you have a common, you know, backlog, common sprint planning sprint backlog, then, you know, these works are happening on different Scrum teams. And again, they maintain that they're relatively small size, you know, so the way you scale Scrum is not by adding more people to a scrum team, but by just adding more, you know, more teams. And then there's some reviews, you know, a common Nexus sprint review, and there'll be a daily meeting, that will happen with this integration team. And then the individual Scrum teams will still have their daily scrums, you know, as well. So that's kind of the basic framework, you'll still have a product owner, a scrum master, and one or more, you know, Nexus integration team members. So there'll be people that are on the individual Scrum teams that will participate at this nexus level. And as you might imagine, you know, the Nexus level is all about integration. So you have multiple teams working on a common product. And so there'll be interdependencies. And so this nexus integration team, that's their role, is to just make sure Hey, everything's functioning at a high level, if one team is blocked by another, okay, how can we resolve that, you know, that kind of thing. So what are the Nexus events, you've got refinement, you know, meetings for the product backlog. You've got Nexus sprint planning, but you also have individual sprint planning sessions. You know, at the scrum at the individual scrum team level. You'll have this broader Nexus sprint goal, you know. So this top level goal for all the different teams that are participating in that Nexus sprint. And then like I mentioned, you'll have this daily Scrum. And then the the individual team daily scrums will happen as well. The Nexus sprint review will replace the individual team sprint review. So instead of each team going, you know, and showing their, you know, doing their dog and pony show with their potentially shippable increment, all of that is going to fold into a larger product. And so the sprint review will be about that larger product that the different teams are developing. And then for the Sprint Retrospective, there'll be one of those, you know, at the Nexus level, but there will be individual sprint retrospectives that also occur, you know, so they can each team can assess how the process is working on their on their team. So what are the artifacts, you know, similar, you know, to if you have just a small, you know, scrum team, you got a product backlog, which you just have one, you know, so basically, these different teams are synchronized together, they're pulling items from this one product backlog. And then there'll be one sprint backlog, which is a composite of all the, the team's individual backlogs. So there will be, you know, individual teams sprint backlogs, but for for, you know, transparency purposes, you know, it's one of the benefits, you know, I talked about is that you could go you can look at the scrum team, look at their task board, and see how they're doing. Well, that's true. And that's still true in a Nexus. But you know, if you've got a Nexus, it means you're building a bigger product. And so you really want to know, hey, how's the overall product doing? You know, and so you kind of want to have one place to go and look at the Nexus sprint backlog, and the burndown chart for that to see how overall, you know, is the the overall project working? And then, of course, you know, again, the most important artifact is always this integrated increment, you know, this new, this new software, functional software. And then again, you know, you want to have a common definition of done. And it's obviously super important when you're doing Scrum. You know, you're doing this larger product, because if some teams are kind of, you know, it's the wild, wild west, and they're doing whatever they want to do. And then some other teams are adhering religiously to some organizational rules about definition of done. Yeah, it's not going to work well. So everybody needs to snap to the same definition of done or they're going to there's going to be prob problems. Okay, so let's do another knowledge check. And you'll be happy to know this is the final final one. So Okay, go ahead. You guys should have it now. Okay, let's take a look at this. So number one, the sprint review is used by the team to make improvements in the scrum process. So they can improve their velocity on future sprints. And 84% of you think that's true, which means that I didn't explain that very well. That's, that's a pretty big indictment on the way I covered that because that's wrong. So the sprint review, think sprint review think products, okay, so you could go into a sprint review, and demonstrate the product and say they just love it. Oh, this is fantastic. This is awesome. We love what you've done. And maybe that sprint team hates each other, you know that there's no chemistry. It's just toxic, you know, and the environment is toxic, whatever, which is unlikely, but let's just say that that's the case or whatever, you know, the sprint review is not going to deal with any of those issues, you know, the toxicity, it's just gonna deal with a the working software, how is it working? Do we like it or not? So when you hear sprint review, think product. Okay. When you hear sprint, retrospective, think process. And so, you know, number three down here is Sprint Retrospective, occur every sprint to look at what is working, and the whole team participates, whatever. I mean, that's just another way of saying process. Okay, so that and that is true, but the number one is false. But I might mess that one up, because 84% of you thought it was true. Okay. After sprint review, which is focused on the product, the customer feedback is, this isn't what we need. What are you guys doing? You're not listening? Did you hear us? You know, this is worthless? You know, maybe it's some very negative feedback. The product owner is going to be canned. Well, you guys were pretty generous saying Yeah, false. So product owner is not going to be canned. And you're right. Okay. And that's one of the nice things about Scrum, it's about, hey, we want the feedback, and we'll get the feedback, and we'll make course corrections or whatever. So, you know, you don't want stakeholders to be gun shy, you know, about providing feedback. So people start firing product owners, you know, if there's bad feedback, or whatever, well, then everybody's, you know, I don't want the guy to get fired. I'm not gonna, you know, guy, I'm not I don't really like it. But, you know, but I don't want to say anything. No, you want to have complete transparency, you know, between the team, you know, in very good, genuine communication. And so know, now, if the product owner, you know, Time after time ever time is like, wow, you know, you're not listening to us, you're not making adjustments. While I don't know. I mean, the product owner and the team, I mean, could be in trouble because, you know, they're, they're not getting it after, you know, so many different sprint reviews, but in general, you know, you want this to be a safe environment where people can, you know, provide their honest opinion. Okay, number three sprint retrospectives occur after every sprint to look at what is and isn't working and the whole team participates. Well, that's true. Yeah. So 96% of You got that right and that and that's right. Okay, and then for Finally, in the Nexus framework that is used to scale Scrum for larger products, there's a single product backlog that is shared by all Scrum teams. Well, that's true. You know, I mean, there's just no other way to do it. Like, if you have multiple Scrum teams working on really one product, you can't have everybody, you know, doing their own thing. Say one scrum team says, Oh, I think this is really important. And we're gonna work on that first. And then you know, somebody else is doing something else, and they don't integrate together. Because of that, you know, you basically got to synchronize and have, you know, one product backlog that's been prioritized and estimated, and then, you know, the different teams are then supporting, you know, pulling off the most important stuff from the top of the backlog. Okay. So, you know, 76% of you got that? That right. So just, you know, go back for refer me, basically, there's some overlap, there's a common product backlog, a common sprint backlog, even though there are individual, there's no product backlogs and the individual teams only at the Nexus level. But then for the sprint backlog, there is there's one at the Nexus level, but there's another sprint backlog at each team. And the one at the Nexus level is just, you know, a composite of all the ones on the individual teams. Remember, there's a one sprint review, you know, we get together and we look at the overall product and get feedback on that rather than having individual sprint reviews, to look at the various pieces. And then from a Sprint Retrospective, which is focused on the process. It happens both at the Nexus level and at the individual team level. Okay. Okay. Let's go back here to the deck. Okay. Sounds a little bit about Spotify. You know, Spotify is very successful company, and they embraced agile A long time ago, and they've got their, you know, their own particular flavor on it. And I thought I'd be interesting to kind of look at them, because I mean, some of this stuff, you know, the way it's being discussed is very academic. And you're like, Yeah, that's great. I mean, that sounds great, you know, in principle, but is anybody doing it, and it's a Spotify is a good example of a company that's doing it and doing it across a lot of teams, a lot of geographies, whatever. And so, they found a recipe, you know, that works for them. And so, you know, they got their own little nomenclature. And so, you know, their Scrum teams called a squad, and that's the basic unit of development. And it's very similar, you know, to a scrum team, and they kind of treat it as this little mini startup. And then one of their, you know, variations of the way they do that is they kind of have, each squad has like a long term mission. So maybe they're focused on the Android client, you know, or the radio experience, and you could understand where that can be valuable, you know, because the team develops really kind of a core expertise, a center of excellence in a given area, you know, and that's what they focus on. So the squads, kind of the scrum team equivalent. And then they have tribes, which are a collection of these squads, and they're in related areas. So this is an example of how, you know, you look at something theoretically, like schwaber, and Sutherland created it. It's like, Yeah, that's great. But I've got this thing called a company, you know, and I've got an organizational hierarchy, you know, and so how do I fit this within my organizational hierarchy? Well, the tribe you can start to think of, you know, it's like a little organizational hierarchy, where you'd have some, you know, executives that have, you know, a collection of squads under them, and they're responsible for, like a given area, like the music player back in, you know, infrastructure or something like that. And, and they're, they tend to be sized what Spotify did, is they try to size these things based on the Dunbar number, you know, and, and really as at about 100 people, and this is based on, you know, external research, it kind of says, you know, you can kind of know, if you're in a group with 100 people, you can kind of know, all you know, maybe not all you know, really really well but you kind of see them and you remember them or whatever. Once you get above that number, say you're 300 or 400 you know, you start To lose a sense of community because you're like, Okay, you know, you don't even know that person or whatever. And so if I, hey, we want to, we want to, you know, kind of keep our tribes, which want to think of like a family, the, you know, so if the, if the squads the family than the tribe is the extended family, and we want to, you know, keep that under this Dunbar number, you know, of 100. So, that's the tribe. And then they have, you know, kind of this just an interdependency cheat sheet, you know, where they basically have a, who's the squad, you know, who are they dependent upon? What is the dependency, you know, hey, there is no problem, or they're slowing us down, or they're blocking us, and with some comments, so I mean, you know, this is just a really simple way to kind of track, you know, interdependencies between teams. And so this could be like, you know, supplanting the whole Nexus idea, you know, the Nexus is happening, but probably some of the leadership, you know, within the tribe, the different tribes, you know, these interdependencies are work maybe at that level, and like their own equivalent of a Nexus integration team. So this is, so this is how you get those interdependencies, you got different tribes, and this is kind of showing some dependencies that are different than the squad squad tab, you know, on on other squads that may or may not be in the same tribe. And so that's why there'll be a reason to have some kind of an interdependency spreadsheet to keep, you know, keep track of that, then we have, you know, some other levels as well, a chapter and a guild. And a chapter is a group, you know, possessing similar skills, and working in the same competency area. So the way I would think of this is kind of like functional leadership, okay, so you, you have people that have, you know, certain skill sets, maybe, you know, they have, maybe they're cross functional, but they basically, they're deep into testing, you know, and how to do testing well, and develop automated tests and, and do test driven development and pair programming and all that kind of stuff. And then there may be some, some people who are in functional leadership roles that aren't worried about, you know, a particular sprint, you know, and what has to be delivered, what they're worried about is the, the competency of the people that share those similar skills. And so that person might be working with each of these different individuals in the chapter to basically, you know, take them from level one to level two, level two to level three, and that kind of thing. So it's more of a functional, you know, pivot, this could also be where the performance review, you know, whether if a company, you know, is using a scrum methodology is like, Well, how do you rate the people? Well, you know, certainly, they're going to get peer feedback from their scrum team, but then who's going to deliver that feedback to them, while the chapter, you know, the people, you know, who you report to, within the chapter could be responsible for those performance reviews and providing that feedback, okay, so it's a, it's a, it's a different kind of Coach, you know, if you think of the Scrum Master, trying to make sure that the team velocity in these squads is getting better and better. This functional view is trying to say, okay, you know, at a functional skill level, these guys in the different chapters are getting better and better. And then the guilds, you know, are more like communities and the communities, you know, could be again, like, testing web technology, you know, agile, you know, basically, somebody who's got kind of a scrum master competency could be part of this, you know, the Agile Guild, agile coach guild or whatever. So that's more of a community that, that spreads across the different tribes. So anyway, this is what you know, an example of what Spotify has done that, you know, and the point being that, you know, it's being done and being done successfully. I mean, Spotify, Spotify has had a lot of success with this. So you'll run into people, you know. I mean, I don't know how common it is now. But it used to be like I said, you know, when something new is developed, typically everybody says, oh, that'll never work. We could never do that here or whatever. And then those, you know, new processes that are in fact successful, start to gain adherence or whatever. But then the skeptics still Continue to say, you know, which is what happened with agile is Yeah, you know, yeah, I can see kind of the benefit of Agile but only on like, really super small projects, we could never use it on an enterprise, you know, prah projects, or enterprise scale, you know, product. And so they say, well, no yet Can you know, and but then you get these these case studies out there of successful companies that have, in fact, done that, you know, and so there's a bunch of examples of those. But there are things that you need to deal with, which is like, Okay, if you have all these self empowered teams, you know, who's worried about architecture, you know, I mean, maybe you could have like, the wild wild west, where the architecture gets in the system architecture is degraded over time. And so anyway, Spotify has a way that they deal with that. You know, squads are basically feature teams, and, you know, they may need to update multiple systems to get their feature into production. And so they're able to do that, but there's this risk, that the architecture, you get, you know, messed up. So the way Spotify deals with it, they have system owners, and all system owners basically have like a DevOps pair that are, you know, focused on a given system. And then they kind of help the feature teams, make the right choices, and, you know, focus on the quality documentation, avoid technical debt, you know, make sure that, okay, that the code that's released, just stay stable and scalable. And so they're like, they help the, you know, the feature teams make the right decisions. And then you have a chief architect, who really is looking at high level architectural issues. And, you know, that would cut across multiple systems, and they're the ones that are kind of ensuring alignment, you know, so if they see something out of whack, you know, then it's their responsibility to kind of step in, you know, and help resolve that. So that, you know, the teams aren't blocked, they can, you know, make the modifications to the systems that they need to get their feature into production. But do it in a way that does it a long term detriment to the company, and doesn't create a lot of technical debt. So anyway, what they're saying is, hey, we want to empower these squads, but we're gonna put some safety mechanisms in, you know, to protect the architecture of the company, you know, level. Okay, so that's the core of the lecture. And then what we've got remaining is just, you know, the, the briefings from each of you, your teams, on what you're doing. For your, the application that you're going to be focused on for the project. So I like to do is what we'll do is turn it over, you know, to each team for, you know, kind of a five minute kind of stickies, like, you're just three minutes, three minutes of here's what we're doing, you know, and save you some discussion of some of your guesses estimates for the business model canvas. But the main thing, you know, I think we should get out tonight is just give everybody a gist of what you're doing, you know, in your in your elevator pitch, and then leave a little time. So you have some q&a, you know, I mean, I'll ask some questions, and I'll open it up, see if other classmates have some questions. So we'll do that. And then, you know, we'll talk about what to do on lesson six. So without further ado, let me turn it over. And let me turn it over to the pigeon waffle team. I thought that's like the most creative team name that I've heard but who from pigeon waffle is going to give us the elevator pitch? Sorry, that was me. I lost my unmute button. Can you guys hear me okay. Okay, um, I guess. So our group decided to work on a password protector app. And so all of our the key features for it would be that it was easily synchronizing all between like platforms between mobile and desktop. has a user friendly interface autofill browser compatibilities. And then, some security features would be like leak detections and strength checkers for your passwords. And then we also wanted to add like the ability to change passwords in the within the app, you know how some sites require you to change your password every few months. Um, let's see. And then. Yeah, detection of duplication of your like password use. And some other ones are auto generation and to backdoor authorizations. And then for our business model canvas. Did you want us to go through all of like the segments for the Canvas? There's no, yeah, what I think's most helpful is kind of like, hey, the value prop. I mean, we should kind of all starts there that like, maybe the first thing is like, Hey, who are the customers that we're going after? And here's the value prop that we have from our app for that customer segment. And then maybe, hey, and here's how we're gonna make money. Okay. Um, so for value propositions, we kind of looked at a few different sectors are talking about a few different sectors you can look at. So for like, the problems, we're helping our customer solve, you know, it's just, it's convenience, kind of save your passwords in one location. And then you just have to remember a master password rather than, you know, 100 passwords for everything we use. But it would satisfy like security and convenience, and also the auto generation and updating for their users. And then we Okay, yeah, that answered those questions. And then for revenue streams, we were, we discussed a few things we talked about, you know, like pay for our ad revenue, and then purchase for no ads versus a subscription version. And then we also, this kind of falls under a couple of the other parts of the canvas. But we also talked about, like, for big businesses, if we could target big businesses, I'm setting up like contracts or partnerships with them to manage their employees, logins. And then, so this is, is this with the customer segment, I mean, because you kind of talked about, okay, businesses, so that could be like an enterprise customer play. But then you know, this something like this could be a mass market type of application. So what were were you thinking of? Is it mass market broadly available? Or enterprise? I'm sorry. It's mostly its targeted toward mass market, we included large and small businesses like enterprise in our customer segments, um, because we discussed about it, how it could, we could like, target that way. But I don't think we've completely decided yet. Yeah, yeah. Well, this is why we're kind of going through this process. Because it's, you know, as you get into it, you go, I mean, it's like, at the top level, you go, it's a hassle. You know, I mean, like, when you when you when you mentioned this right out of the gate, I'm like, Oh, yeah, you know, I've got 1,000,001 passwords to keep track of, and, you know, I'm ashamed to say, you know, I've got a Word document with password protection, which is got, you know, all my passwords, you know, it's like, yeah, that's nothing, that's not the safest way to, you know, to go. So there's like, a need out there. The thing I don't know is that there are, you know, like, Apple has done some things to try to, you know, to do what you're talking about. So I don't know what the competitive landscape is. But it still seems like yeah, it's a pretty big pain point. But I could see where, you know, if you're going mass market versus enterprise, some different decisions would need to be made or whatever, in so you probably you guys need to think through that, you know, and you get into the next deliverable, and figure out, okay, you know, hey, are we saying mass market? This is something that's widely available, that somebody could get down from an app store for either Android or iOS, you know, or is it like, no, it's gonna be, you know, a different channel, you know, we're gonna, you know, go to enterprise customers and want to find a way to be able to get them to purchase this and, you know, what's the channel we're going to use to do that? So, anyway, okay. That's, that's cool. Any, any classmate questions from? We don't have a lot of time but you know, if somebody's got, you know, a burning question, or feel free to go ahead and ask it now. Okay, cool. You know, when I said, you know, when you first mentioned in like, Oh my gosh, that's a huge, it's a huge pain point. I mean, when I was at Microsoft, one of the peripherals Developed was like a thumb reader, you know, and it basically was that it was kind of like, instead of having to enter, you'd have this you know, list of passwords that were protected, you'd go in, and you'd enter that. And then when you went to the site, rather than having to enter the credentials, you just put your thumb you know, you basically use a fingerprint, you know, to unlock that password, and then get into the site or whatever. And we did that, like 20 years ago, or whatever. And then legally, you know, the lawyers at Microsoft were concerned and like, you know, oh, my God, what kind of liability? Are we signing up to, you know, something like this. So there wasn't enough revenue to kind of justify continuing the product. But even back then it was like recognizing that, you know, with password proliferation and all these different accounts, it's just a nightmare. And it's still is so anyway, interesting. It'll be interesting to see what you guys, you know, come up with. Okay, cool. So next up, let's do stepstone. Yes, sorry. I'm going to share a screen because we have a presentation. Okay. I have this Okay. Sure. Thank you. My APL to do it, because this says host disabling Oh, sorry, I'm sorry. I enabled it now. You should be able to do it. And try trying? Yes. Thank you. Sorry, I should have been more prepared. But it's right. Alright. I am going swapping the presentation. You guys can see it. Yeah. Awesome. Thank you. Yes, we are stepstone team. And I am going to present our app which call strong body app. This app is basically our, which is a mobile app for Android and iOS platform. It is going to be built for people who cares about about their healthy lifestyle and cannot imagine their life without exercising. It can have bit COVID that we couldn't do couldn't be able to go to gym. And it's an app that is designed to help each user to set the goal choose the optimal workout and find the best exercise that fit the user availability, available equipment and lifestyle. Additionally, the app would provide a tutorial for exercises including a healthy eating tips and diet, and that would be carefully designed by the best nutritionist. And as we're going on, we have a business model app on which this would be bring it to next sections as more detail. Our main customer segment for a minimum viable product of this would be the people that are interested in working out in a beginner advanced and pro level. And also on long term with the company would grow then extended customer segment to the trainers, nutritionists, specialist and sports supply companies and gyms. And our value propositions are personal goals for users losing weight, building muscles, and customizing workout program and tracking progress. And finding exercise for equipment available for a user and having access to the video tutorials and diet tips. And many more. And as foreverness and evaluation the user will be in kind of evaluating the app and getting in social media or website or even the app itself. And for purchasing is going to be available the download free version or advanced paid version, both on the available platform. And then after sale the user can reach and sending email by them you know for using our website strong body.com or just call us which we put it like a one a strong body kind of from one to 787664 to 6349. And then for the customer relationship each again customer is important for us therefore we are available 24 seven to have a support and you're using social media in social media or building feedback to get back to the customer for the revenue It would be based off their advanced kind of paid version of it and export related advertisement. And the free version also going to be with advertisement in it and in a website for a key resources, we're gonna have our research and development and of course for activities, key activities, we're gonna have a production problem solving platform and networks. And for key partners, we're gonna have a trainer, a specialist blogger, and I gyms and a sports supply companies. And as advertisers, our cost structure would be based off marketing, human resources, intellectual rights, software, hardware, and equipment, leasing, and expenses for making the content for our application. That's about it. And I'm trying to squeeze that in three minutes, probably. Yeah. And I'm ready for any question on anything. Yeah, you know, I mean, I think the thing. So, certainly, you know, especially with COVID, if people started like, working out at home, I mean, it could go to the gym, that kind of thing, where they're still concerned about their health or whatever. And, and there are a lot of, like, different apps. Yeah, some are focused on nutrition, some focus more on different exercises and things like that. And it's so there's a definite, like, need, where it's like, okay, probably even the post COVID world, you know, well, even in the, you know, pre COVID world, it's like hard to, you know, dedicate the time to go to a gym, you know, on a regular basis where people can't afford to have a personal trainer, or a nutritionist. So it would seem to say, yeah, you know, there's an opportunity here to do something with a really cool app that would help people with their health and fitness goals. The challenge is like, what do you guys think your value prop? Is this like, different than the clutter that's out there? It's like, how are you gonna shine and go You know what, you have got to download this app because of whatever you know, it's kind of like, like the Apple iPod example. But yeah, we are different like mp3 players and nothing was really popping and then they figured out how to make it pop and it was the whole ecosystem. So what what is your special sauce? Yeah, I do have a special sauce is more that make it more interesting and also, as he evolved kind of learning from our customer, but they are interested and can have like a AI that helping them learning about them and helping them through it. And this way, keep them motivated, keep them interested to move on. It's like a add in the video adding training session to engage them that if they wanted to participate as a group to exercise is a definitely we have to keep an interest. But the main start with to package them together to have this all together because some of them some of us outside they do just one section and not having like a nutrition or you know adding the different sport together. But this one we are adding add that not only that, you use it to get in shape and get you're building your muscle and at that same time you can learn about the healthy nutrition tape and diet and also be motivated to be in group to get a group together to exercise together. Scan have it be all five of us, we are the smallest group, they have a lot of idea and want to put it together This is just for the start. kind of come in with some hypothesis and some guessing, but yes, definitely. it's needed. Yeah. Or to put together and become more. Yeah. Okay. So similar to like the password, you know, protect chef, the tree, your your, you know, the trends are in the in your favor, you know, that things are moving in that direction. It's just, you know, okay, how do we differentiate ourselves so that people come to us versus the, you know, whatever. The other does is of other, you know, types of systems like that that are out there. Okay, cool. Any other questions for the stepstone team? Okay, cool. Let's move on to stream really have a stop sharing and thank you again. Yeah. Thank you. Hi, can you hear me? Yeah, yes. Oh, perfect. Awesome. I'm gonna do you mind if I just shot a share our deliverable one document that okay for however however you want to do it Yeah, perfect yeah cuz then that way you know if I miss something or you know it's late in the day it's been a busy day, then we can all kind of see what's going on. Perfect you guys can see that? Yeah, awesome. Okay, so yeah, our team name as well as the sort of name of this proposed app that we're going to make is we're deciding between flick or stream early, we kind of brought up flick in our last meeting, but I'm sure we'll have it nailed down by deliverable too. And the idea, as you can kind of see in our description, is that flick is, I'll just read that because it's really short. And I'll go on with the presentation Netflix an application that allows users to discover movies that they would naturally like to watch allowing for them to skip the question of what movie should we watch at every get together with quality of life features, like friends list movie library spanning, you know, every streaming service like Netflix, Hulu, YouTube, and then filters that narrowed down what you'd like to watch. And I guess the idea is, basically, we're mimicking the structure of like, the popular dating apps. were sort of Tinder. Yeah, exactly. Like Tinder. Yeah. Okay, Bumble, where so yeah, in the center of the screen, your displayed button, you know, instead of with a person, it'll be like a movie, like a poster for a movie. Yeah, along with all the info that goes along with it, maybe pulling from databases, like API's, like IMDb, or Rotten Tomatoes, or Netflix's database, you know, giving you all the reviews, the genre, the director, and basically, if you if that movie seems interesting to you, after seeing the description, and the poster, and the YouTube video, then you swipe right, just like you would on a dating app. And or swipe left, if it's not interesting to you. And the, the idea where the like matching comes in is that you have a friends list, sort of like just a Facebook friends list, where it's definitely going to be people, you know, because those people are going to be the ones who you want to watch movies with. And so when both users swipe right on the same movie, they'll get like a notification, in maybe some sort of feed, letting them know that they've matched on a movie, and sort of add it to like a running list. Like between those two friends. Like if you were to go click on that friend, you can see every movie that you've matched on. And then once you're done watching a movie, you can add it to like your watched movies, and it won't show up in your feed anymore. So if that makes sense. It's kind of like a familiar idea, but just with a different context. So for like our customer segments, originally, we thought it was going to be mass market. But I think over time, we realized that like not everyone is a super avid movie goer, who's constantly needing to discover new movies and watch movies all the time. So, you know, it could just be for avid movie goers, but I feel like everyone's been in that situation where they bring up to their friends, Hey, I just saw this movie. Let's watch it. And they all say no. And then, you know, you kind of have to face that disappointment in the moment or, like, I think Christian in our group said, you know, you and your maybe significant other are literally searching for hours just trying to find a movie, when you could have just been ideally doing that throughout your day. For our value propositions, mainly, it's just about convenience and usability, because we're not actually like providing the movies to people, we might make it like more convenient for them to, like, you know, know, like what movies are on what streaming services, but mostly, it's about the convenience of figuring out which movies you and all your friends would like to do without having to have like an active conversation about that. And also, with the added benefit of movie discovery, because you're obviously going to see movies that you wouldn't have otherwise, because it's not just going to be what's running in the advertisements. It's just going to be a huge database with, you know, some sort of algorithm. It's going to be just on the Google Play and Apple Store, as well as maybe like a downloadable APK through a company website. That would be the channels, which people could get it from customer relationships. Let's see Yeah, I guess it is mostly just self service and communities like communities, you could have like movie viewing groups that all use it, or it's literally, you know, just for you and one other person. For revenue streams, we're thinking of just making it free. But you know, doing that going the route of freemium in that, like, you know, certain aspects of it that, you know, personally, should probably just be with the free app, or it would be locked behind like a small subscription, just like more quality of life situations. And then it wouldn't need much more just being an app than just servers, software engineers to help develop it and help it evolve. And then potential, you know, you could have potential branding with other companies. exclusivity deals with Netflix, or something like that. And sorry, if I'm going too fast, if anyone has any questions, just feel free to let me know. But we're almost done. Let's see. Let's see. Um, oh, yeah. And I guess for maintaining the plot, like for key activities, we're not really like, I don't think we're really coming up with new. So it might be considered problem solving. But we just went with maintaining the platform, just kind of evolving this platform that we've made, and it's unique to us. And then yeah, partnerships, I kind of touched on it could be streaming services, Netflix, exclusivities deals, you know, push certain companies movies to the top more frequently, stuff like that. And then, yeah, for the cost structure. Oops. I feel like we, we might have wrote down this a little too vague. But, um, yeah, like the cost to operate with basically just maintaining, like, the servers, and I think the revenue would be coming from the premium package. I think we just accidentally had that a little flipped. But yeah, just basically people, hiring people and keeping servers up and running. Yeah, you know, this is a really interesting idea to me. You know, because I watch a lot of movies with my kids. We've watched a lot of movies, and it's always a struggle to find something new. You know, I mean, especially when it comes to like, action adventure. I mean, I don't know, I think we've watched every action adventure, you know, movie known to man, and it's like, oh, my gosh, you know, what is there's something new that's out there. And I must say that the, the tools that are out there to find something new, even like, you know, if I'm on amazon prime video, or Netflix, and then they know your viewing history, it's kind of wanting, I mean, I is really putting stuff up there that that's that right? And with your healing algorithms always see the same things. So So is this, you know, so is this like, okay, for people that want to go to a movie theater to watch online, Netflix? Or both? Or I think it would have both it basically, there's like, kind of websites out there already that that, you know, that have these like databases of, you know, you choose a movie, and then it shows you what streaming services where it's in theater? I think all of that can be Yeah, and is the flick, you know, the the Tinder idea is that for like, hey, stuff that is, you know, in box office right now, or is the app going to like, you know, learn your, your likes and dislikes, and basically just put up random movies, and you're going to swipe one way or the other so that it can learn? Or is it all going to be just, hey, what's out there today? And you go, yeah, I'm interested in seeing that or not? What was the idea there, I think that we're like under estimating the number of movies that people would be able to go through, and I really, like short amount of time. So I think that, you know, regardless of whether the sort of algorithm is popping up the same movie for everyone else, I mean, there'll be like filters to kind of where the user can kind of gauge that for themselves, but there's no real like, time guarantee to when they'll get a match with a friend. But we did, we did have something like, if we were to read but whatnot, and not to not, you know, kind of violating the five minute rule here. But you know, what, what is the what is the, the idea is that that you're notified, hey, you know, you know, Joe or Susie likes the same movie, you know, do you guys want to get together? I mean, or is it how walk me through a scenario less than Do it now. Okay, but I mean, I'm interested. I'm interested in Yeah, you and me in charge of reaching out to that friend. Yeah. It's mostly for for you in the friend to know. And then that's why it's more like Facebook friends rather than having like a immense amount of like followers or it's not like yeah, you know, it's very personalized between two people. Yeah, I see what you could do with like, some of it could be like you're physically together, but then some could be like, you know, you're watching the movie at the same time remotely a lot, you know, that, like, somehow it's just our age, you know? Yeah, so, so anyway, I don't actually. Yeah, interesting to see how were you guys? Where you guys go with this? Whatever. Okay, cool. Thank you. Yeah. Okay. And then, finally, last but not least, the first initial group first initial of everybody's name, except j, we gotta get gotta get j in there as well. So, ma th h. j, who is the spokesperson? I am? Let me get my screen loaded up real quick. All right, cool. So I want everyone to take a second and just think about what your last job search, like, during the time of a job search, it can be extremely stressful. You're, you know, for the most part, tracking down jobs. You're trying to keep track of all the applications you've sent in, and even keep track of what's going on with those applications. Is there an interview in place? Do you need to send a follow up email? Maybe? Do you even need to talk with an HR representative? Hey, we're still we're still on Matt screen, so I don't know. Okay. Why are you sharing? Yeah. Or maybe, Matt, you need to stop sharing? Yeah. Oh, yeah. Sorry. Sorry about that. I didn't even realize that like, Okay. No worries. No. Yeah, for some reason. On my side, it said the screen was sharing. Can you see my screen now? Yes. Cool. Yeah. So anyways, there's a lot of things to keep track of. And that's just for one individual job. Now, when we were researching what type of applications to actually look at, one of the key things that we saw was a talent work service. And on average, they say that an individual needs 100 200 job applications to just get one single offer. So if you can imagine going through the process of tracking where you're at with an individual job, and multiplying that by 100, you can easily create a spreadsheet, you can create Word documents, or even try to create reminders within an email system. But it's very easy to lose track of those things. Now, on top of that, you can also run into some problems where maybe the hiring manager emails you but for whatever reason, the email goes into your junk folder, and you don't check it for a week or two, well, you miss the opportunity for that job. Now, the other thing to think about is 85% of jobs are filled via networks. And that's why one of these sites like LinkedIn is so immensely powerful. So where do we come in to try to fix this problem? Well, that's where the job tracker app takes place. The job tracker app is a one in all solution that allows the user to more easily keep track of their job application process, which all of us will be going through in the next year or so. So the very first thing the app does is first allows you to track each and every job that you've applied for. You can track things like the hiring manager's name, the applied date, what day you've interviewed, where you're at, in the particular process, whether or not you've got an offer for that particular job. The track the tracker app is well concrete action items. So if you submit an application, say, on Monday, the tracker app can say follow up with the hiring department in two weeks. Or if there was an interview already taken place. It can remind you, hey, you've taped, you just did an interview, send a thank you email the next day, or etc. These are all customizable by the user inside the app. The other great thing that this app does is actually tracks notes within these individual interviews. So at any given time, you might have two or three interviews in a given week. And key details about the hiring manager, the position or things that you've discussed, such as the salary, you can actually store within this application process so that at a further date, you can reference this and not have to worry about having a million different documents open to save all this data. And then finally, what the job tracker app does is allows you to refine your search. So as you go longer and longer into your search, hopefully this app will I already have helped you get a job. But if it has it, you can actually see what jobs you've applied for where you weren't or where you stood on those jobs. Did you interviews Did you get rejected And this will actually help to refine what type of position you should really be getting for. For the most part, if you're fresh out of school, you're probably not going to be able to get a manager position. But you can actually, you know, certain way down to what position fits best for your individual skill set, and your resume based on all the information you've been entering throughout this process. So finally, one of the things that we were looking at is who would actually use this app. So for the most part, it's just going to be individuals who are looking for actively looking for jobs. And that's totally fine. There's a large pool of individuals, and I'm sure many of you have talked with individuals in this past year who have had a very difficult time, even applying for jobs. In this case, all those individuals can have one place to store all their information and keep track of it and make sure that nothing goes out of place, or a step isn't, you know, mistaken or not followed at a certain time. But the individuals are not where the money would come from. Instead, the companies, companies are always actively looking for more information or more statistics in order to hire better. Now, there's sites out there such as Glassdoor, or indeed that gives salary recommendations for a given position. But what we can do within our particular application is we can grab all of the information from these applicants, so how many places they've applied to what kind of interviews are getting, how many offers, and all this information can then be sold to one of these companies to further refine their individual hiring process. The other thing that these can do is because there's active users who are actively looking for jobs, these companies who need employees could actually advertise directly to individuals who are looking for jobs in a certain position, and in a certain area. So it's a win win for both the applicant and the companies who are trying to get the data. So that was a quick elevator pitch of what our app does. Are there any questions? what's what's what's out there, right now that does something I mean, it's it sounds like this is like a, you know, CRM for job applicants. So just like, you know, Salesforce is a tool that sales professionals use to track down leads, you know, to be able to sell their, you know, product or service, this will be a way for a job applicant to keep track of, you know, positions they've applied for, are there tools like this that are out there right now. So, you know, what's funny is that was actually brought up when we were doing our team meeting. As far as I can tell, there's not really anything out there that actually tracks everything. You have sites like indeed, monster, LinkedIn, that will email you job recommendations, but they don't really track the entire process in place. I mean, if you've applied to a job off of indeed, they might send you a reminder email saying, Hey, did you ever get contacted by the hiring manager? But for the most part, if we're actively in a job search, we might be using three or four different services? And even if they're giving us little bits of information, there's not one congruent place that Yeah, yeah, yeah. Well, that's where I'm not, you know, again, like you take this feedback for what it's worth, I mean, I haven't done a search or whatever. But I haven't seen something like this. And there are a lot of different platforms, where on that particular platform, maybe you have some summary of what's been applied to but not cross platform that I'm aware of. So then, yeah, you get into a hassle of like, okay, yeah, you got several different platforms to check. And it's not comprehensive, like what you're describing, I mean, it may just say, you apply for this position, you know, at a certain on a certain date, or whatever. But it certainly doesn't have any other information. Now, are there like API's and LinkedIn where you can get information or feed in and like, get information like within LinkedIn, you can apply for different positions, is there a way on LinkedIn and these other platforms to interface and basically come up with a common repository, you know, or, or, or those closed up? So we didn't actually look that far as to whether or not you could get the information directly off the site. We're basically looking for like the the easiest, or, you know, the first viable product. So in that case, the user would actually just have to manually type in this information. But Right, right, it's definitely a possibility like in the future to partner with these larger sites. So that, you know, we're feeding applicants to the site and then beside itself is feeding applicants back to our service. Yeah. Anyway, cool. You know, the thing I like about what all you guys have done, and this has been true kind of year after year, you know, it's always good. Excited to kind of hear these different application ideas is, you've touched on pain points, you know, I mean, just me personally, I can think about, okay, you know, these different areas and go Yeah, it's really hard to manage your passwords or Yeah, there's a lot of information out there about nutrition and working out, but it's just like, destroying it, and, you know, several different places. And then, like I mentioned about the movies, you know, I go to Rotten Tomatoes, and I okay, well, what, you know, how did this what was the rating here? You know, and or, like Netflix and Amazon Prime, you know, prime video, not feeling like, hey, you're not, don't you really, you don't really know me, you know, I'm because I'm not really getting kind of the movies that I'm excited about. And then this one where you know, anybody that's a job applicant, you're absolutely right, you know, you're applying to like, all different kinds of jobs, whatever, it's hard to keep track of it, a lot of times, you got to re enter the same information, you know, on all these different platforms, which takes an inordinate amount of time. And so, you know, I think you guys are on to pain points, it's just a matter of, you know, then narrowing in, you know, so you can come in with like, a true MVP, you know, because the tendency is to want to boil the ocean and like, you know, we're gonna be all things to all people. And, you know, you have to make choices and decisions of No, you know, here is where the low hanging fruit is. And that's what we're going to target or whatever. But anyway, very interested, very interesting applications. I look forward to seeing how this, how this develops. Okay, man, we got it. We got a we got to shift back over to the midterms only, only pull the deck back up. Okay. Okay, can you guys see my deck now? Yes. Okay, so we did the team presentations. Okay. Oh, may send us I mean, we've covered project the deliverable two, or whatever. So you know, that's coming up or whatever. And we'll probably cover that I have a little time to cover that on lesson on lesson five, or send out some additional emails on it, but that's due less than six. So it's, it's coming up. Okay. And the thing is, is go back and look at the, you know, the the Google venture video, they've got videos, they've got the checklist, or whatever. And then you can actually look at the deliverable that I've got in Canvas. So you know, okay, what you need to be able to, you know, to map out, okay, so midterms next week, it'll be remote, you know, be an online quiz, quiz or open up at 610. So we'll get started at six as normal, you know, just kind of go through a little administrative details, whatever. But then the quiz will open up. And you'll have 90 minutes to you know, complete, you know, complete the midterm. At 530. in Canvas, there'll be a document that opens up or whatever, that you can view or print out or whatever. And there's a few questions that where there's a diagram or some information that you need, or whatever. And so that'll be available, you know, next Thursday at 5:30pm. And I'll send out an email reminder, you know about that, so you'll be able to open it up or print it out. So we'll do the midterm. And then we'll review the answers to the midterm, you know, like a five minute break, obviously, you know, a lot of you will finish early and just be back at 745 online. And then we'll go through the answers to the midterm. And then you'll have some project time and probably the first part of it, you know, again, I'll talk about what to do for the you know, that that next deliverable. Okay, here's the structure is 37 questions with 100 points, 15, true, false questions, and 10 multiple choice questions. So there's kind of 60 you know, points tied up in to true false and multiple choice. And there'll be 12, short answer and diagramming, you know, questions, and those will be 40 points, it'll vary, you know, some will be worth two points, some will be worth five points. So keep track of that, you know, so you don't miss the, you know, the five point questions against online quiz, you have 90 minutes to complete it. So the key terms, you know, think like, you know, the true false multiple choice, you'll see some of these items, you know, it'll it'll show up and you'll, you know, need to be able to, you know, answer questions related to these terms. true false and, and, and multiple choice. So that's kind of the key words are the ones you may see some of the stuff that The second half of the quiz, but certainly in the first part, which is the true false and multiple choice, then, you know, for these topics, you can see some of the stuff in the, in the true false multiple choice, but also on some of the, you know, the short answer, you know, and so this is where he kind of looking for a little deeper, you know, knowledge and then understanding of, you know, particular topics. So, hey, what are the different phases of the sdlc? I mean, that's really pretty simple. We kind of covered that in lesson one, then types of software development methodologies, you know, like waterfall, agile types like Scrum XP, you know, con bond, which combine we'll talk about in the second half of the course, we talked about the values of the agile, you know, Manifesto, so what are those, you know, and, hey, when things valued a little bit more than something else, you know, kind of one of those comparisons, and we spent a lot of time talking about the market opportunity navigator. And, you know, here is where it's kind of like applied knowledge. Okay. So, you know, you've been, you've been taught the concept, and now it's like, okay, could you actually use that and, and then answer some questions based on it. So you need to kind of review that material. And, you know, kind of understand how the market opportunity navigator is used with the lean startup, you know, model is basically is trying to find out, you know, where you want to play, basically, what's the market, you know, the attractive market to go after, with your product technology. And then lean startup is really kind of how, once you're there kind of the details of how you should play and operate the market, you know, how to create the market opportunity set from a collection of market opportunity. So there was a worksheet that, you know, we went through and kind of case study, and basically, it's like, okay, they've listed information there. And if you're looking at that information, being able to say, Okay, here's the, the markets that we should go after, you know, based on the assessment in that worksheet, and then, you know, once you've got that market opportunity set, you want to come up with an attractiveness map and say, Hey, where are these things? Where are the gold mines? What's the moon shot? What's something that basically, hey, we should leave alone? Because it's, you know, it's not attractive or whatever. And, you know, what's a way to get an early win or whatever, and be able to look at a worksheet that's been completed and say, Okay, I can map, you know, I could map these different opportunities within that, that attractiveness map. Okay, we spent, you know, time on the Lean Startup model, you know, basically, is something Steve Blank came up with to try to help improve the chances for startups to be successful. But it's really applied, you know, there's these three horizons of innovation. And really, it's applicable to kind of horizon two and three, where there's, you know, where you need to figure out what the business model is, versus one like, you know, we talked about the Intel CPU, and they're like, hey, there's trying to cram more transistors on the CPU, but it's a well known, you know, it's not that it's easy, but it's a well, it's a well established business model, you know, and, you know, and you're already that company already has customers, that's horizon one. And lean startup is not so much for horizon one for two and three, what are those three parts of the lean startup process? You know, we talked about a business model canvas, the whole idea of customer development, and then using, you know, an agile approach to iterate on design come up with an MVP up? What are the steps of the customer development process? And what are they used for? And what has to happen to migrate from one part of the process flow to the other? So the main thing from you know, that diagram that showed, you know, kind of like, a customer discovery, to you know, executions, a one was like search, the other was execution. on that first phase, what you're doing is you're just trying to say, hey, do we have a business here? You know, we got this idea. We got like, you guys, you got a business model canvas, here's how we think we're gonna make money. This is our value prop, you go out and you test that, and you get feedback. And you go, Hey, we're onto something here. You know, I think we have people that will be willing to pay for this. So these are open MVP, and then you actually sell it and wow, things are going great. Now it's time to scale up. So you move from search to execution, when you've determined that you've got a viable business model. You know, if you don't have a viable business model, then you don't move, you know, across over to execution, because you're still in discovery. Okay. So anyway, that's, that's kind of the idea there, of what's the minimum viable product. How is that used? Is it a good thing? What's happening? Have it, you know, and then when would a start up, you know, make a pivot for the business model canvas, those building blocks, you do have those nine elements that you filled out, you know, for your application idea. So you kind of need to know what are those different elements. And if I gave you a business model canvas, you'd be able to find, you know, information from that you need to be able to work your way around a business model canvas canvas. So if I asked a question, and you're given a business model canvas, you'd be able to find the answer. It's not hard, but you know, you got to look at the business model canvas know what's what know what the different areas are that kind of thing. So that you can, you know, find the information you need in that in that document. So this is something that we haven't spent a lot of time on, but we have said, spend some time on it or whatever. And so I want you to know, this Google Ventures sprint process, not in gory detail. But basically, they've laid out okay, there's like these five days, you know, in an ideal world, a team would get together, and they've worked for five days. And the end of it, you know, they'd be, you know, with a prototype, putting a prototype in front of a customer getting feedback. Well, what's, what's the main thing that happens on Monday, what's the main thing that happens on Tuesday, Wednesday, Thursday, Friday, so you know, be able to kind of describe the, you know, the overall goal, the processes, and what's happening on each day of that Google Ventures sprint process. So this is we didn't cover, you know, we kind of talked a little bit, you know, about mapping. And on the lesson one, we kind I did the, you know, overview, you know, video, you guys just go back and familiarize yourself. And again, it's not what the nitty gritty detail, it's just what's the main thing happening and each step along the way. And I want you to know that because you're going to be doing that, you know, in the next, you know, the second half of the, of the course. Okay, we talked a lot about Scrum. So what are the scrum values, the scrum roles, what are the primary artifacts, user stories, you know, what's the format of the user story, you should be able to be given some feedback, and then create a user story based on that feedback. So you can think about that. And the thing here, you know, is I'm looking for the right format, you know, there's a very specific structure. And so, you know, follow that structure as you create your user story. Hey, we talked that product backlog should ideally be deep. So what does that acronym stand for? What does that mean? Have? We talked about backlog estimation and using planning poker? So you know, when, you know, how is that done? And what is it used for? And it's used for basically trying to estimate the size of a product backlog, you know, item, you know, so we think, hey, something is, you know, if you use a T shirt sizes, small, medium, or large, or you're trying to do you know, actual story points and using story points, whatever. But basically, it's trying to estimate the size of a product backlog item with the benefits of short time box, you know, Sprint, so we kind of, you know, covered that sprint planning, we covered, you know, to tonight and be able to estimate the timing of a future release, given historical data. So you might have some velocity data from your team's past performance, and you need to be able to say, okay, for the next release, it's going to be so many story points, you know, how many Sprint's is it going to take, when you're in sprint execution, being able to, you know, look at a sprint task board, and see if you're ahead or behind schedule, also being able to, you know, estimate the number of Sprint's left to release a fixed scope, you know, release by looking at a, you know, if you're given a burndown chart, and then, you know, estimating the number of story points will be included in fixed date release. So, you know, for, hey, basically, we got a fixed date, we're gonna ship something, you know, the team's telling you, here's what I think I can get done, you know, being able to determine what that is, and answer a question based on it. And then again, you know, scaling Scrum, using the Nexus framework is like, how, you know, the founders of Scrum? What do they do, you know, what's the overlay of the Nexus framework? That is, is used when you're building bigger products, you know, what are some of the things that are the same? And what are the some of the things that are different? And then, you know, understand what Spotify did, that's different, you know, to scale Scrum. So what are some of the unique things that they did? Okay, that's, that's a wrap. Sorry, I went over here, but I get obviously really excited when I hear about your, your applications. If you have any questions, you know, since we got the midterm coming up, I'm gonna really try to make myself available to either make Fast responses on email. Or if you want to talk to me if something is confusing, you know, I mean happy to, you know, to, to talk to you on the phone leading up to the midterm. And like I said, you know, the midterm will go live at 610. So we'll kind of do just attendance, a few little comments. Okay, something I will mention is, you know, the true false false and multiple choice is not allowed, I can do there. Because either got it or you didn't, or whatever. But on the short answer, you know, give me something. Okay. So, you know, if the if the short answer, you know, if it's blank, yeah, it's hard to get points for blank. So I like to give extra credit, but you got to give me something to work with. So I'll try to emphasize that, again, you know, the beginning a class next week, but think about that, you know, typically, you'll remember something you know, and you can you can put something, you know, down for, for those short answer items. Okay, sorry to go over any any quick questions, or like I said, I'll be available by email, or you could talk to me on the phone. Hey, quick question, Jeff. Yeah, it's not locking browser area as we do in the exam. Because what's that? I'm saying for the exam? Is it is? Are we using any locking browser type of for exam? No, no, no, but what up? What are encouraged you to do is this, you know, we're kind of in this weird world, you know, and so you obviously could kind of go in and do a copy and paste and dump it into the quiz. You know, I'm not looking, you know, it's pretty easy to see, you know, when that happens. And the other thing is, I'm kind of looking for, you know, a little thought so even if you've got that, and you're looking at it, you know, distill the information, you know, into your own answer, whatever. I mean, that's what I would encourage you to do. It, it shouldn't. It varies. I mean, I don't think 90 I think 90 minutes, I mean, one of the thing I could do is shorten the time, you know, because then it makes it really hard. I mean, you guys are gonna know it or you don't, because you don't have enough time to go, you know, look at the lecture notes or anything else. But I really don't want to do that or whatever. And I have found, you know, some people, some people go get done really early and others, you know, we'll use the full 90 minutes. So I'm just gonna keep it at 90 minutes. And I'm just more you know, concerned you guys learn, you know, understand the information or whatever. So I don't want to overboard on that. So anyways, yeah, I appreciate time, because I'm sorry. Thank you. Yeah, yeah, yeah. So I understand that. Okay. Any other questions? Okay. All right. Like I said, you know, I'm going to try and make myself available more this week or whatever in case anybody's got email responses they need from me or a phone call they'd like to have so take advantage of that. And then otherwise, we will see you next week. Okay, have a good night. Take care. Bye. Okay, hi everybody, let's do a comp check. Can you guys hear me? Yes. Hey, hi there, hey, everybody's enjoying the sunshine getting outside and according to the CDC, we'll be able to stop wearing a mask. If you got if you're vaccinated, both indoors and outside, I guess it's gonna be up to like different businesses and organizations, but at least they came out with that. So the mask day wearing days hopefully will be over soon. So. Oh, so relief. Yeah. Yeah. Yeah. I've got like a Seahawks. Um, I don't know if you guys are like, football fans, you know, but I've got a little Seahawks mass, whatever, show my team spirit, but I'm going to be happy to retire. retire my Seahawks mask. So anyway, let's go ahead and get started. I think there were a few people still showing up. But I think we got most everybody. I think we got everybody now. Okay. So got it got a busy busy night. So next time, I'm going to give you guys some time to work on the project. So it won't be you know, full lecture. And sure you appreciate that. Rather than having to listen to me for you know, for three hours, you'll be able to do some project that work and on the storyboard, and we'll talk about that at the end of class or whatever. But tonight is a full, kind of a full lecture night. So let's get at it. So here's what we're going to do. I'm going to spend a little time talking about the midterm summary stats, just so you kind of see the distribution of scores, you know, we covered the there's some multiple, true false multiple choice questions, I'll just show you kind of the distribution of correct answers on that as well. But we're not going to go into the essence I did the review last time, we're not going to do that again. But you know, if you have any questions on you know, the midterm or whatever be happy, I'd be happy to answer those questions, or just email me or happy to set up a call to walk, walk through any, any answers on the on the midterm. Okay, then we're gonna get into, you know, talking about cloud computing. And then, tonight, and then also next lesson, software management practices that are somewhat tied to cloud computing. So there's this whole idea of DevOps or whatever, which really came up about the same time as the cloud was getting big, but it's not, you don't have to have you know, cloud computing infrastructure, to do DevOps, or whatever. But DevOps is made a lot easier based on some of the tools that are on AWS and Azure. So anyways, I thought it caught talking about DevOps, along with the cloud. And then next time, we'll talk about con bond, you know, which is kind of a light version of Scrum. It has some similarities with Scrum, but it's a much more light in terms of the processes used. So we'll talk about that next time, then we'll talk about extreme programming, a lot of the concepts that are embraced within DevOps, but are also implemented within cloud infrastructure, kind of leverage, x XP. So again, we'll talk about those next time. And then tonight, we'll talk about, you know, what, issue what's leading up to the next deliverable, which is the storyboard, but kind of the pre work in order to be able to do the storyboard. Okay, so that's what we're doing tonight. So here's the midterm summary stats. So this is just you know, the distribution with the blue line representing what the original grades were. And then the orange line or whatever color that is, is the curve grades or whatever, up and I you know, I tend to curve the midterm and the final and I've been doing that and kind of the way I do that, as I look at kind of the top five or six scores or whatever, and then look at the point differential from a perfect score to what that average was Nintendo bump everybody's grades up based on that. So you can just see, you know, even before the curve was applied about 1516, you know, students were at the 85 or above, you know, level, and you got, like a five point bump, you know, with the, with the curve. So that's a, you know, the gray distribution. I mean, overall, performance is really, you know, what you guys did? Well, very well. Very well, on the true false multiple choice, which we'll talk about now. So, you know, these were the different questions. And then you can see over on the right, the correct answer. And so, you know, you guys were nailing most of these, you know, little drop off here about the Agile Manifesto, you know, also talks about sticking to a plan as like, no, it's, it's really, you know, the idea is to be flexible, you know, with the plan, a, you know, here planning poker, not as high, that one is used to come up with good estimates for the product backlog item, not really used for acceptance criteria, whatever. And then 16, here, the primary focus of the product owner, is to, you know, ship a product that customers want. So, you know, throw in other items like, hey, to make sure that products of high quality Well, yeah, everybody wants to ship a high quality product. Or another one might be, you know, make sure the process is, you know, gets improves over time. You know, that's kind of the Scrum Master, the development team is really focused on product quality, and then the product owners primary responsibility is to ship something that customers want, and they'll pay for. But anyway, I mean, you'll see, I mean, really good performance there. And then most everybody did well, on, you know, the, the fill in the blank or the diagramming questions. You know, in some cases, you as I said, you know, different people weren't able to say it to provide an answer. And that's tough, like I said, because, you know, it's hard for me to provide any kind of partial credit, if, if there's just nothing there, if it's totally, totally blank, but in general, you know, I thought you guys did well, and, you know, the, the scores really were, you know, we're, we're pretty good. Okay, so there's the midterm stats, and just follow up with any questions that you have. Okay, so now let's talk about the cloud or whatever. And, you know, this has been going on for for quite some time. And just to kind of give you a little context, my last role at Microsoft, before I joined the startup, that was really kind of leading internal adoption of what that time, it was called Windows as your now it's Microsoft Azure, but basically, the cloud computing platform, and the company had an internal project called Red Dog. And then Red Dog beach basically became Azure, and, you know, moved out of an incubator into the server tools business division. And at that time, you know, Amazon Web Services was in really, in the early days, this was like back in 2008. And 2009, you know, and kind of in that, that timeframe. And, you know, we were, what role my team was looking at how could we move internal applications that we're inside Microsoft data centers on to the cloud platform? I mean, when Steve Ballmer and other executives would talk to enterprise customers, and would say, hey, Azure is open for business, you know, start, you know, moving your, your applications on to our cloud platform? You know, they would say, Well, what are you doing? I mean, what applications? Have you moved on to your cloud platform? And at that time, we had moved in, you know, and that's not a good answer, say, Well, you know, we're not using our cloud our cloud, but you should, you know, so. So the roll was kind of like, Okay, how do we how do we move applications over. And so we were, you know, we were looking at that trying to basically determine which ones would be good to move, you know, and would benefit from the cloud and then do it in a, in a way also to minimize risk. I mean, you'd have certain finance applications that the you the company uses to report its quarterly earnings or whatever, they're obviously a critical, you know, and you don't want to mess Certainly experiment with the ones that are mission critical like that, you might start with something that's less there where there's less risk or whatever. And then there's certain applications where maybe there wouldn't be that much of a benefit, you know, cost savings, and then there are certain applications that are going to end of life. And so it's like, okay, we're not going to go through the trouble of moving something at the end of life in any way or whatever. So, so it's kind of kind of looking at that and coming up with a migration plan. But another thing we were looking at, was Amazon and trying to figure out well, what's Amazon doing, you know, what kind of revenue are they generating, you know, with their cloud platform, and this was before Amazon started reporting, their AWS revenues. And so, you know, this was before they had reached, you know, a billion dollars or revenue is like hundreds of millions of dollars of revenue, but their growth rate was substantial. And we could kind of determine that, but based on certain public information they had about the amount of cloud storage, that that that was being used within Amazon Web Services. So anyway, no need to go into that. But the point being that it was like early days, and then what this chart is showing, is that, Okay, look, look at this revenue curve, you know, and this is a little data, this is from STATISTICA, to 2020, spread, like a year and a half. All and it wouldn't surprise me that the curves actually even higher, but still, it's substantial, you know, it's greater than 350, you know, billion dollars. And then if you look at like vendor market share, this is another statistic, a chart from 2021. And it has, you know, Azure, and I'm not sure how they calculated that, because I think Amazon Web Services still has the leading market share, there may be some, like, if you put office 365 in the Microsoft bucket, which is the software as a service, cloud, you know, service, that there's substantial revenue that Microsoft generates, but there's no doubt that, you know, Microsoft and Amazon are dominant players. And Google, you know, when, when we were looking at this, you know, Google was just, they weren't a player, which was surprising, because a lot of the a lot of the innovations to basically manage, you know, develop a cloud operating system, Google did that, they did that to be able to enable, you know, their search engine. And so a lot of the tools Google had, but they just really hadn't applied it, you know, to turn it into a commercial service to offer to customers, and then that's where Amazon, you know, shine, you know, because basically, they're an e commerce company, and they figured out way, we've got this extra capacity, you know, in our data center, maybe we could, you know, offer that to customers, and maybe they'll pay us, you know, and then they determine that they would, and then they and then it became its own business, you know, independent of the e commerce platform. So, AWS, you know, has been doing, like I mentioned, you know, they were under a billion back in, Oh, 809. And so, you know, here, you've got, like $35 billion, that the company's generating. And if you look at their revenue growth, with AWS, you know, it's on kind of like an exponential, you know, curve. And the nice thing about this for Amazon, I mean, Amazon is a, from a revenue standpoint, you know, is huge. I mean, it's huge, because of all of its e commerce platform. And so if you do like a revenue comparison, and you look at, like what it generates with the e commerce platform, say, oh, wow, that, you know, out distance, out distances, what they're doing with AWS by a mile, but what what you don't see with revenue is, is profit or margin. So imagine, you know, we have, you know, we start a business and we sell, you know, we got two products, and we sell both products for $1. And, you know, on one product, we make 10 cents, because it costs us, you know, 90 cents to basically produce and sell the product. And then and not that other product, we make 90 cents, because it only costs us 10 cents, you know, to basically sell So, you know, from a revenue standpoint, they look the same, but one product makes much more profit than the other and that's kind of known as the margin that you make from from a particular business Well, anyway, as you might imagine being a software If there's a hardware, you know, I mean, obviously the infrastructure they develop for the cloud platform, there's, there's a lot of hardware, but you get more hardware, you get more software, tight margins, with AWS, certainly than they do with their e commerce, you know, business. So the bottom line is in AWS makes a lot of profit for Amazon. And so anyway, it's one of the reasons that Amazon is a very valuable, you know, company, and people pay a lot for their shares of their company, because of their growth rate, but also primarily because of the growth of AWS and the profit that it generates. So hey, the clouds a new thing, right? Well, yes, and no, I mean, the concept for the cloud has been around for a long time, I mean, there's been this idea of time sharing, you know, where you have these computing resources. And, you know, and, and multiple tenants would leverage those computing resources. So that's been around for quite some time. And not to date myself. But I mean, I was in like computing environments, at colleges, where you had this mainframe, and it was kind of a time sharing, you know, arrangement where you were leveraging the resources of that mainframe, and then, you know, their ideas about, you know, a network that would tie a bunch of, you know, computing systems together. And this became, you know, ARPANET, you know, the Advanced Research Projects, agency network. And so it was basically a precursor to the internet, you know, that was done a long time ago, in an A government, primarily do D, Department of Defense, you know, setting, but again, this is kind of another piece to the, to the puzzle. And then, you know, a company, VMware came along, and said, Hey, you know, we can take a common hardware platform, and we can virtualize you know, the environment, so that we could run different types of software, on, you know, one hardware platform and basically create, you know, virtual machines inside, you know, that system. So, you know, that was another piece. And then Salesforce came along, in the late 90s. And Salesforce, as still is, is kind of the leading market share company, in customer relationship management. So this is a tool that sales people use to go Oh, who are my customers, and they basically have, you know, their customer names and contact information. And if they've submitted a quotation for a project, you know, it's all there and all correspondence with that customer, you know, is is located within the CRM tool, whatever, and it makes it easier to, you know, interact with, you know, with your customers, and forecast the revenue that you're going to create, well, you know, that what they came up with, is, this whole idea of this would just be an online service that companies would subscribe to. And I remember, you know, back, you know, in the early 2000s, you know, Steve Ballmer, who was the CEO, would kind of make fun of Salesforce, you know, he kind of thought, oh, there nothing, you know, there are nothing companies small, you know, and kind of, you know, wasn't taking them seriously. And at the time, it was, it was tough for Salesforce, because, you know, the internet. I mean, we kind of take for granted now, I mean, not that the infrastructure is perfect, but I mean, we're doing zoom calls day and night, you know, with a lot of high bandwidth tracked a traffic going over the Internet, and it works pretty well. Well, back then, in the late 90s, you know, early 2000s, so the quality broadband wasn't that great? And so it was more difficult to run an application, you know, in that fashion, you know, subscription service over the internet. Well, guess what, you know, fast forward, it's not a problem now, you know, and, and Salesforce continues to be the dominant market share, you know, a provider of CRM tools, and they become a significant competitor to Microsoft. I mean, they acquired slack recently, which is a competitor to Microsoft Teams or whatever. So, you know, I think that, like Steve Ballmer, his tunes started to change and at the time that we were doing this work, you know, the mic was doing kind of with migration to Azure, he had gotten the message, you know, and he saw the threat that was posed by cloud infrastructure and software as a service and basically pivoted Microsoft in a significant way to say, Hey, we got to get on the cloud, you know, ASAP, or whatever, and was pushing the server tools division, which Bob muglia was running at the time, to go faster, you know, he wasn't, he wasn't happy with the pace that they were moving to invest in the cloud, because you've got to remember at that time, we're generating a lot of revenue from our server and tools business, which is basically infrastructure for the enterprise data center. Okay. And you know, and he's saying, hey, let's let's, you know, invest in this public cloud infrastructure. And so he got resistance from, you know, Bob muglia, who was running in server and tools, and then make a long story short, muglia got fired. It basically bomber said, No, we're, we're heading in this direction, you're not moving fast enough. And so he got fired. And then Satya Nadella, who was part of the server tools division, you know, became the leader of that organization. And I think you're probably familiar with that name. He is he replaced balmar, you know, as the CEO of Microsoft. And, you know, I think it's fair to say that the company has successfully navigated itself to be a significant player in cloud infrastructure, but also with software as a service offerings, like office 365. And then, you know, finally, you know, Amazon deserves the significant credit for the pivot to, you know, to with the understanding that, yes, if we had this large public infrastructure for cloud computing, customers will trust us to put their applications on this infrastructure. And they understood that there could be huge scale economies, you know, where they could provide this, this capability cheaper to the company than they could if that company, you know, develop their own, you know, their own data centers, or whatever. And so, you know, they were kind of the first to see this. And the guy that saw it was Andy jassie, you know, within Amazon. And so, you know, he then created Amazon Web Services. And very successfully, I might add, and guess what, you know, who's the CEO of Amazon? Oh, Andy Jassy. Okay, so I guess this shows you that if you innovate, you know, and you're rewarded, you know, if you innovate and continue to innovate, either personally, you know, like an Andy, you know, chassis. But also, if you have a product that is innovative, and you continue to improve it, and and it serves the needs of customers, you'll be successful. So, you know, what is cloud computing? I mean, there was a lot of confusion, I think, probably there still is, to some extent over well, what is cloud computing, and this mist, you know, there's this organization, the National Institute of Standards and Technology, you know, which came up with this definition. And it says, Hey, cloud computing is a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources, network servers, storage applications and services, that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models and four deployment models. Anyway, this is really a pretty good compact description, you know, of cloud computing. And if you compare, somebody says, well, is this cloud computing, you compare it, you know, to this definition, you should be able to come up with an answer. Yes, it is, or it isn't. And we'll talk a lot more about this, you know, coming up or whatever. So let me let me pivot here to a video and that it provides a brief overview of, of what cloud computing is. So let me share sound. We'll go here. Okay, let's try this. computing is the on demand delivery of IT resources via the internet with pay as you go pricing. Instead of buying, owning and maintaining physical data centers and servers, You can access technology services such as computing power storage and databases on an as needed basis from a cloud provider like Amazon Web Services. Organizations of every type, size and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer facing web applications. For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial Services, companies are using the cloud to power real time fraud detection and prevention. And video game makers are using the cloud to deliver online games to millions of players around the world. With cloud computing, your business can become more agile, reduce costs, instantly scale, and deploy globally in minutes. Cloud computing gives you instant access to a broad range of technologies. So you can innovate faster and build nearly anything you can imagine. From infrastructure services, such as compute, storage, and databases, to Internet of Things, machine learning, data, analytics, and much more. You can deploy technology services in a matter of minutes, and get from idea to implementation several orders of magnitude faster than before. This gives you the freedom to experiment and test new ideas to differentiate customer experiences, and transform your business. such as adding machine learning and intelligence to your applications. In order to personalize experiences for your customers and improve their engagement. You don't need to make large upfront investments in hardware and overpay for capacity you don't use. Instead, you can trade capital expense for variable expense, and only pay for it as you consume it. With cloud computing, you access resources from the cloud in real time as they're needed. You can scale these resources up and down to grow or shrink capacity instantly as your business needs change. Cloud computing also makes it easy to expand to new regions and to play globally and minute. For example, Amazon Web Services has infrastructure all over the world. So you're able to deploy your application in multiple physical locations, and just a few clicks. Putting applications in closer proximity to end users, reduces latency and improves their experience. No matter your location, size or industry. The cloud frees you from managing infrastructure and data centers, so you can focus on what matters most to your business. Yeah, so I like those marketing videos. I mean, they're they don't go into a lot of depth, whatever, but it is, it's kind of like an overview and kind of gives you a sense of cloud computing, and you know, some of the key characteristics of it. And we're gonna dive into those in a lot more detail, you know, right. Right now, so. So what are those characteristics, you know, massive scale, with resource pooling. So, it is mind boggling, you know, if you go through, like the cloud data center, and they're everywhere, now, if you don't get where the footprint that you can find this footprint, if you search for it, like on for AWS, or as your you know, it's all over the world, there are massive cloud data centers, you know, within fairly close proximity, you know, to most of the world's population. So you have this massive scale, and then resource pooling. And the neat thing about cloud is it's not just primarily it's resource pooling within the cloud data center, you know, say we had, you know, we have one here in the local Seattle area, so it's primarily resource pooling within that data center, but there is sharing, you'll have you know, in order to reduce risk of say, data loss, you will have data that store not only locally, you know, in your data center, but in other, you know, typically, they have like three, three different instances. So, the day data is backed up, you know, three times so that if one data center goes down, you still got two other data centers with the current data instance. So, So anyway, you got that scale, you've got broad network access. So there's a lot of connectivity, fiber connectivity to these data centers, something that's really interesting that's happening. I mean, I don't know if you're following what SpaceX is doing with starlink. But it's going to be a broadband capacity through a satellite network. And I worked in the 90s, when the 80s, and the 90s, in a couple of different companies, one in the Seattle area called tele destek, was just kind of trying to do what Elan Musk is doing with starlink. So Musk has kind of partnered up with Microsoft, you know, and a and with Azure, and then Amazon is developing its own equivalent to starlink, which is called hyper, you know, project hyper. But basically, you're gonna be these orbiting satellite constellations, which will be another way to have, you know, low latency network access. So you'll have fiber connectivity, but also satellite based connectivity, you know, to these different cloud data centers, on demand, you know, self service. So basically, you know, you can hook up and get established, you know, with a cloud instance, just through cell services, very easy to provision, and then you have a lot of agility and elasticity. And, you know, coupled with that, basically the appearance of you know, almost literally infinite capacity, but certainly the appearance of infinite capacity, where if you have an application, and it needs to scale up to very high levels to meet some demand, a cloud platform we're in allow you to do that, because there's all these resources that are, you know, across the planet to be able to be leveraged, but then it's very elastic, meaning, you know, like, in the old days with hosting, yeah, you could get additional capacity, but you have to sign up for that, you know, for some period of time or whatever, with a public cloud, you can scale up to very, very high levels. And then as the video is showing, scaled down, you know, if you do you lose that demand, one of the one of the customers that we were supporting, in these early days with Azure, had this one day of the year, where they had this huge spike in demand. And then the rest of the time, you know, was much, much lower, like an order of magnitude lower demand, you know, in need for it, infrastructure. And this was dominoes, you know, the day they had the spike was the day of the Superbowl, you know, on the day of the Superbowl, they had this huge, everybody's ordering pizzas, or whatever, and they'd have this huge spike in demand. And so anyway, you know, we did baby levers as your, you know, to be able to kind of scale up, you know, and meet that demand. But this is, this is one of the benefits of the cloud is that it's hard to forecast, what your demand is going to be for different applications, say you're a startup, you know, you guys are developing these applications, and we're all man, it's gonna be wildly successful. Without the cloud, you'd have to make a guess of like, Okay, I've got how much it infrastructure Do I need in my data center, to handle the number of customers that are going to walk in my door, you know, and want to use my app, use my service or whatever, if you had some kind of online service, and that's hard to forecast with a cloud, you can like, okay, I'll just scale up and scale down, you know, depending upon the demand. The other, you know, benefit is pay as you go metered billing. So instead of again, in this circumstance, having to say, Okay, wow, I've got to go out and buy $4.5 million worth of servers and sand storage, you know, and networking gear from Cisco. Wow, that's a big capital expense. I'm like, Well, I'm not really sure, you know, what I'm gonna need, but I can just pay as you go with AWS and Azure. And so it's a way to, you know, reduce the upfront costs that a company has, in terms of their IT infrastructure. And the only way this works is with very sophisticated, you know, automation, and then API's that, you know, are published and stable, you know, so that people can leverage and, you know, they know how to interface with these cloud services. And there's all this automation, like, the whole idea of, you know, scaling up and down. Well, they don't, you know, you don't have to call somebody and say, Hey, you know, there's more pizza orders coming in, you know, can I get some more capacity and then the guy and I said, Well, just a minute, let me go see or whatever. And, you know, no, it's all done in software, it all happens automatically, you know, the software determining, okay, what resources are available, either in that data center or some other data center? So anyway, so these are, you know, some of the, some of the key characteristics of the cloud. And then, you know, what are these architectural elements, whatever, obviously, you know, you don't get away with Have you saw physical resources, you've got servers storage, you know, and network physical resources that are needed. But a big difference is the virtualization that occurs, you know, and this is where people would get hung up on Well, you know, is cloud really that different? I mean, you know, we've had, you know, virtualization for quite some time, you know, so why is this any different? Well, this is virtualization, at a data center level. Okay. So in the past, you got virtualization, on a box, you know, okay, yeah, you know, we can virtualize maybe have multiple tenants on a box or whatever, in an IT data center, this is virtualizing, all the compute in a data center, all the storage, all the database capacity, all the network capacity, across that data center. And really even beyond that, because like I said, you can leverage the capacity in these other data centers, or whatever. So it's a very sophisticated data center operating system, when you think about AWS and Azure, you know, at the time that, you know, I was working on Azure, it, what I've, the software that I'm describing was called the fabric, you know, and the fabric was this data center operating system that would virtualize all of these resources across the, you know, the data center, and then you know, above that, then you'll have service components, you know, that can be leveraged, because you can imagine, it's like, okay, in addition to having this shared capacity, you know, whether it's server storage network, I can also have services that, you know, that, that a lot of customers will want whatever. And so instead of developing, you know, these components themselves, these will just be services available, you know, to all customers that use the cloud platform, and then up above that, you know, you'll have different applications that are, you know, can be built on the cloud or leverage the cloud, you know, infrastructure. So, yes, this is a key thing, you know, to be aware of, I mean, I guess I'll leave that animation off for right now. So this was traditional IT management. And it was, it was fairly, you know, brittle in terms of you had these stacks, that were tightly coupled together, you know, so certain applications were running on this stack. And they really couldn't leverage these resources, you know, over here. So there was some sharing going on. But also what you'll find is that not as much sharing as you might think, like, when we went to look at, you know, Azure migration, one of the things they want us to do was like, well, are we going to save money? You know, are we going to save money if we use a cloud platform? And so we had to look at what what is it costing us to run our applications in our own datacenter. So we got in and kind of looked at, you know, the math or whatever. And one of the key things you look at is the utilization of this hardware. And since we were using the latest versions of Windows Server, you know, I thought the utilization rates would probably be pretty high, you know, so I thought it was an open question of whether or not a cloud data center, you know, would be less expensive than our own data center. And boy, was that wrong? You know, the utilization rates in our data centers were like, 16, you know, percent. Okay. So there was a lot of waste here, you know, of either compute or storage that was just sitting idle. And there's reasons for that, you know, when, when somebody was set up to Hey, well, we've got this app, this finance app, well, it's really critical. You know, they would, they would provision just huge amounts of capacity because they didn't ever, you know, want to get into a situation where the application was not available. And so even though the system could get to higher utilization levels, it really wasn't stressed that way. So anyway. So this, this the way it used to be, what gets in the way it still is, you know, in a lot of data centers is these services. Were tied together, you know, with the physical infrastructure and tightly coupled, and there wasn't a lot of flexibility. And if you wanted to make changes, it was it was you're talking about weeks of time to make a change versus seconds. And anyway, so that's what's happened over here is that literally in seconds, you know, you can scale up scale down, you know, leveraging new resource or drop off a resource. So there's quite a bit of abstraction between this physical infrastructure, and the applications that are leveraging. So, you know, if you're leveraging a cloud, cloud infrastructure, you don't know for sure, okay, well, what server Am I on? Where are my bits being stored, whatever, it's completely, you know, virtualized and abstracted from you. And because of that, it makes these resource pools very dynamic, they can be accessed very quickly. And it makes it very elastic, meaning you can scale up and scale down very quickly. So anyway, why cloud computing, you're gonna save a lot of money. Okay. And so there's a reason why, you know, we go back to the revenue curve, with with for Amazon, there's a reason for that, because companies are realizing a lot of savings by leveraging the cloud. You know, I mean, just imagine with the scale that at Amazon and Microsoft have, that it's a lot less expensive for them for their hardware and the software, they run to run their data centers. And then there's power, you know, that they're getting very cheap power. And a lot of cases, they're built next to like hydroelectric facilities where they can get very inexpensive power, they're also leveraging renewable sources of power. So all the way around their cost structure is a lot lower than if you tried to do it yourself. And they can pass those savings on to the customer. So cost is one reason, global scale. So say, you're, you know, you're a startup. And, you know, you have a mass market application. But you're like, well, gee, I can't put data centers, you know, up all over, it's just eating the United States, and certainly not globally. But with a cloud computing platform, you can, you know, you can have your application running anywhere in the world, you know, at the same time, immediately, you know, so, so it's a, it's a huge benefit for smaller companies that don't have the resources to go develop this it capacity, you know, globally, they get it from Amazon, Microsoft Google performance, you know, the ability to be able to use the latest, greatest, you know, high performance, CPUs that are being you know, I mean, basically, there, Microsoft and Amazon are churning through, you know, getting new CPUs, new storage, you know, an ongoing basis. This is one that some people may debase there was security, you know, I mean, like, well, gee, I think I beat my my data would be safer. It's in my own data center. And you could make the case for that, you know, I mean, certainly, there are some greater risk and being in a, what's called a multi tenant environment. But another way to think about it is, you know, do you think Amazon and Microsoft are concerned about their cloud data center security? I mean, what if they're having like, weekly security breaches? Do you think that's gonna affect their business? Yeah. So they're gonna have the brightest people on the planet, trying to protect their infrastructure, whatever. So nobody is going to spend more on security than these cloud data providers. But, you know, in some cases, you know, maybe you say, hey, it still makes sense for me to have my data in my own, you know, in my own private cloud, you know, or in my own data center. Speed is huge. With the cloud, you know, it's for all the reasons we talked about the ability to set up computing services very quickly, to scale resources up or down, you know, very quickly to set it to set up, you know, automated you know, capacity plan. So, both companies, I mean, they have what's called auto scaling, you know, within limits, okay. So you can basically say, Hey, you know, if greater demand comes in for my service, just scale up to meet that demand. Now, maybe you have some cuts. For whatever reason, you say, okay, you know, I don't want to get above a certain level, you know, and so, you know, basically, there could be some upper limit. And basically, it's all automated, you know, you're able to decide that and go in and set up how you want to provision your, your service. And then, you know, if there's a lot of benefits in terms of productivity, if you've got on site data centers, you know, there's a lot of racking and stacking a lot of work that's done, you know, to basically manage that data center. And, you know, cloud computing basically frees up those resources to do other things to focus on, you know, other things, because it's all automated. And then typically, you know, you're going to have greater reliability with cloud infrastructure. I mean, just think about disaster recovery. I mean, if you've got your data stored in three different locations, it's unlikely, you know, you're going to lose that data. So if there's like an earthquake in the Seattle area, and you're, you know, your data center, unfortunately, the building collapses or whatever, well, you know, you either have to have, you know, your data, like, it's on tapes, and you send these tapes to some other location, you know, I mean, there's a lot of expense and hassle with that, you get that for free, you know, with a with a cloud platform. So anyway, there, there are reasons why the revenue growth of these cloud platforms is so high, and it's likely to continue to grow at a high level. Okay, so let's do a little knowledge check. So you guys should have that now. Okay, let's go ahead and take a look at these. Okay, so you should be able to see the results. So number one, cloud computing lacks staying power and will become irrelevant in five to 10 years. Who are you? Number one, true, who are you? Are you a fort? Yeah, either you got a great ability to predict the future? Or you're in the on the wrong side of that question. So my so my opinion is, it's here to stay. And basically, more and more applications will run on the cloud, and more and more applications will run in a public cloud environment and move out of private and hybrid. So that's, that's my opinion, we'll see what happens up is something that I should say is that, you know, when I was working at Microsoft, and we're looking at cloud migration, it was quite common within the IT community to believe that this was true, that they're basically Hey, this is a flash in the pan, there's nothing to it. Cloud, you know, cloud computing, isn't that big a deal. And, you know, after we have looked at this and look at the math, you know, and basically, it's certainly the cloud that the cost savings, but also the agility that would be derived from the cloud or like no man, you are that you, you are totally wrong or whatever. But anyway, so you know my opinion on number one Number two, the ability to scale rapidly with almost infinite capacity are both characteristics of cloud computing. Yeah, that's right. And in cloud computing, service components are tightly coupled to specific compute storage resources. So 28% of you thought that was true, and the rest thought it's false. So it is false or whatever. So that's one of the benefits of cloud platforms is they're not tightly coupled to specific like server box, it's okay, there's a lot of abstraction that happens where your workload could be distributed amongst several different servers and several different storage devices using different neural networking devices. And this is all being managed by both the fabric you know, the data center operating system. And so that's where the agility and scalability come from, is the fact that there is there isn't a tight coupling between a service and specific physical hardware. Okay, so let me get out of this thing. Let's get back into the last. Pull me there. Okay. So now we'll talk about some of the some of the cloud deployment deployment models. So you got public cloud, private cloud, and hybrid cloud, okay? The public cloud is where, you know, these are these large data centers, which exists with multiple tenants, kind of sharing that infrastructure. And, you know, the, the, that infrastructure is leveraged for the benefit of all the customers that, that use it. Private Cloud is a concept of where somebody says, You know, I like the benefits of a cloud operating system, versus just a virtualization, you know, that I've experienced in the past. So I like the idea of having Okay, well, so however many servers I have, and how much storage capacity, and I like being able to leverage that across all the different workloads that I have. But I'm not crazy about having my data out in the public cloud. So I want to get some of the benefits of, of the scalability of a cloud operating system. But you know, I want to keep that data in my own infrastructure. And so they're basically buying a cloud, you know, operating system, and then they're still buying, you know, all the infrastructure, you know, the hardware, and this, this storage capacity, the networking capacity. So all that physical expense they're still responsible for and maintaining that, but they get some benefits, you know, from having, basically a data center operating system. And then there are those that like, you know, hybrid cloud, where it's like, you know, let's take that dominoes example, I gave us that, you know, I've already invested in my data centers, and I've got them and for the most part, it works just fine. You know, most of the time, the demand is does, it doesn't exceed, you know, my data center capacity. But on occasion, like on Superbowl Sunday, boy, I'd like to tap into some of those public cloud resources to handle these spikes in demand that I occasionally get. And that's kind of one of the concepts in between a hybrid cloud, where you can burst out and leverage the public cloud infrastructure, but still have your own, you know, data center. And this was really popular initially, you could imagine, you know, like, so say, say, we're a company, a fortune 500 company, and I've spent, you know, billions of dollars on my, my own data centers, well, I'm not gonna just abandon that infrastructure just because the cloud came along. But you know, in five or 10 years, you know, as servers start to get too old, well, instead of replacing them, I leverage the cloud more. So you can see hybrid cloud being a bridge to maybe full and better embrace of the public cloud at some point in time, where more and more of the company's applications are running on the public cloud. Until you know they basically get rid of all their their data centers. Anyway, these are, you know, some different deployment models. So, you know, public cloud, hey, what are the advantages? Well, lower cost. Because even though I can get some, you know, benefit by using a private cloud or whatever, it's not near the same scale as a public cloud, whatever. So this is going to be the lower cost, alternative, little maintenance, I don't have to worry about any of the physical infrastructure, because you know, Amazon and Microsoft are worrying about that, for me, near unlimited scalability? Well, yeah, I mean, basically, these cloud data centers, and the number of those data centers that can be leveraged is so huge, that, you know, it's very unlikely I could ever have a lack for capacity in a cloud public platform. And then high reliability. You know, one of the other parts about the fabric or the data center operating system, is it assumes that, you know, hardware fails, you know, I mean, you know, you can even if you have really good hardware, I mean, eventually it fails. And so, rather than assuming that it's not going to fail, we're going to assume that it does fail, and we'll be able to account for it, you know, and be able to move resources very quickly, from some piece of hardware that's failing to one that's, you know, good. And this is an example of like, where Google, Google did this Well, before anybody, you know, Microsoft, or Amazon, and so a lot of the capabilities needed to operate a public cloud. google invented it, it's just they didn't necessarily see the financial, you know, the business case that Amazon saw, you know, so Andy Jassy said, hey, there's a business here, you know, and, and then pursued it aggressively. And that's why they're the leader, private clouds, you know, what are the benefits? Well, more flexibility. I mean, it's your, it's your environment, you know, so you can kind of do whatever you want to do, potentially improve security, because you're not sharing the resources with anybody, you know. So if you maintain, you know, high security in your data center, then you can protect your data, you know, potentially better than if it's in a, I think it's questionable, but potentially, as well as like the public cloud, if not, you know, better. And then high scalability, I mean, you still have the ability to get this, use the cloud operating system within your own data center. And so you do get some scalability benefits. So, you know, here's just kind of a description of the, you know, the the two approaches like public cloud as for the, you know, open to the general public, you know, can be on and off premise, it supports multi tenancy, massive scalability. Disaster Recovery is our, you know, basically baked in, and it's a pay as you go model. So, Hey, I just, you know, I pay for what I consume, private cloud, you know, it's a single business owns it, and single tenancy, you know, but then you have limited scalability. I mean, you have some scalability, but not as much as the public cloud, potentially better security or more and more control over your security. And, you know, you own it. So you gotta, you still got to maintain that infrastructure. And then hybrid clouds, you know, benefit is you get some control over your private infrastructure, you know, for sensitive data, you have some flexibility, you know, you can burst out to the public cloud when you need them, you know, the Domino's example. it's cost effective, you know, to the ability to kind of get the benefits economic benefits of the public cloud. So, pay for that only when you need it, you know, so you have a baseline, you design your data center for kind of the average, you know, demand that you see on your applications. And if the demand goes higher, well, then you burst out to the cloud, you know, the public cloud to get those extra computing resources. And transitioning to the cloud doesn't have to be overwhelming, because you can migrate gradually, like I said, you know, you as data set your data center, physical infrastructure decays, you don't replace it, you just move those workloads over to the cloud, you know, as you need it. So there's the deployment models. Now, let's talk about some service models. At the base level, you've got infrastructure as a service, and this is kind of where, well, I mean, it's still I think, where Amazon makes a lot of their their money. And this was the idea that you just rent the infrastructure. So the servers, virtual machines, storage networks, operating systems, you basically pay for it, you know, on a pay pay as you go basis. So that's infrastructure as a service platform as a service where basically the cloud provider is taking on more responsibilities. So they're also taking on, you know, the physical infrastructure. But they're, you know, supplying an on demand environment for development, testing, delivering, and managing your software, you know, application. So basically trying to be kind of a one stop shop with, okay, you get the core infrastructure. But in addition, there's this layer of software on top of it, which makes it much easier to develop and manage your applications. Then there's this idea of software as a service, which is where you know, sale, Salesforce started out, and you know, and another good example of that is like office 365, where, you know, you're providing some application over the Internet, and the people that are consuming that, I mean, they have virtually no response, other than using the application, everything else is taking care of, you know, the infrastructure, you know, the management of that application is taken care of by the service provider. And so they just, you know, use the application over the internet. So, you know, here are the different service models. And so, you know, what is infrastructure as a service? Well, again, it's the foundation of cloud infrastructure provides these physical resources on demand. And you know, you'll have AWS, Azure OpenStack, as a technology, they'll enables you to, you know, do that, you know, common uses testing, development, website, hosting web apps, high performance computing, big data, you know, and analysis, you know, the huge benefit here is that you don't have to spend any capital, you don't have to go buy this physical infrastructure, it's like, okay, Amazon's done it, I'm just gonna leverage the infrastructure, you know, in their cloud data center, there's this benefit of business continuity and disaster recovery, because it's not just, you know, in one, your data is not in one data center, but in several data centers. And it allows you to move quicker, you know, to be able to innovate more rapidly respond quicker to shifting business conditions, and, you know, really allows you to focus on on your core business, rather than working worrying about this, it's like, well, hey, how can we put all of our resources to develop a better application, you know, and new applications for our customers? And then better security? I mean, again, some people may quibble, you know, with this, but you have, you know, Amazon is an example, worried about the security, and they have very good people and very good systems in place to protect that infrastructure. Okay, what is platform as a service? Well, it provides, you know, a platform on demand used mainly by developers, you know, to be able to develop applications, basically soup to nuts, on a, you know, cloud infrastructure, and makes it very easy to spin up a development environment, to be able to move an application from an a development environment to a production environment. And there's a lot of automated test resources that are also kind of included within the platform as a service level. So it just makes it a lot easier to develop applications, you know, in a seamless fashion. So your common uses are as a development framework, analytics, or business intelligence, and all kinds of other you know, services like workflow, direct directory, and security. You know, you can cut coding time, I mean, you can spin up a development environment instantaneously. And so, you know, you can start your development time, you know, immediately you can add, you know, capabilities without necessarily having to add staff, you can develop for multiple platforms, including mobile, you know, in an easier fashion. And then this, this has been becoming, you know, more and more important, you know, to make to make these cloud platforms, whether it's infrastructure as a service or Platform as a Service, more desirable. Amazon and Microsoft have left have layered on a huge number of tools that a developer can leverage. And basically make the developer much more powerful, because these tools are you know, easily they're integrated within the platform. At the platform as a service level, similar to the infrastructure as a service level, you can have geographically distributed development teams, you know, that are working in the same development environment. And it makes it a lot easier to manage the application, you know, life cycle, if you're, you know, leveraging a platform as a service. And then what software as a service will provide software services on demand use mainly by users, you know, and again, underlying technology that can help enable that AWS and Azure, although, you know, Salesforce existed before AWS and Azure, and they just had their own data center that the C, their CRM instance, was running on. So you don't have to have, you know, a cloud platform to have a software as a service, but it makes it a lot easier. I mean, you know, going forward, you could imagine that most software's and services are going to be built, you know, well, either built on a cloud platform, or at least leverage this infrastructure as a service layer in a cloud platform. So you know, you got outlook, Salesforce dynamics, office, 365, zoom teams, you know, all types of software as a service applications, you can gain access to sophisticated applications pay only for what you use, I mean, most of these are all subscription, you know, saw a subscription model. So if you don't need it anymore, you stop paying for it versus you know, in the past, you'd have to pay, you know, we'd go out and get enterprise licenses from a company for a particular product, say it was, you know, PowerPoint, or the office suite, a company would have to say, Okay, I'm gonna get so many seats worth of that software application. So say they think, Okay, I guess I need 20,000 instances, well, you know, maybe they have a reduction in force. And now they only need 15,000, or whatever. Anyway, with the subscription, they can kind of move that up or down. And so there's some benefits to that versus, you know, by the software and licensing it on a recurring basis. And, this, this chart is kind of nice, because it kind of describes, you know, who does what, within these various service models. So in traditional IT, where a company has its own data center, the IT organization is managing everything, you know, the infrastructure is the service, the cloud provider, let's just say AWS is managing this part. And there's still this responsibility that the IT organization has, for these, you know, for these level layers of the stack, then as you go to Platform as a Service, less and less is the responsibility, the IP organization, the other kind of responsible for the application and data that's running on the cloud platform. And then Software as a Service, that company if it's like Microsoft with Office 365 or Salesforce with their CRM, they're responsible for everything. I mean, as a user, you're just you know, consuming, you know, leveraging the application, but they're taking care of everything. Okay, let's do the next knowledge check. Okay, should be able to see this next one. Okay, let's kind of get a wrap here, let's share the results here. So public, private and hybrid clouds are different types of cloud deployment models. That's true. Most of you got that, right. Number two private clouds try to get some scale benefits of cloud infrastructure or maintain higher control over security. That's true, we as basically kind of why people would want to do private clouds versus just leverage the public cloud. And then three, with Infrastructure as a Service. software applications are delivered over the internet on a subscription basis, that's really false. So that what that could go with like Software as a Service software applications are delivered over the internet on a subscription basis, Infrastructure as a Service, basically, you're renting out, you know, the server storage and networking capacity of a cloud provider, like, like AWS. So that's, that's false. Okay. All right. So let's take a break and then get back at it at 730. So like a 15 minute break. Okay, I'll see you guys in a little bit. Okay. Bye. Okay let's go ahead and get started again, the comp check. Can you guys hear me? Yes. Okay, great. Okay, so now we're gonna, we're talking about the cloud cloud infrastructure is some of its characteristics. Now we're going to talk about Dev, DevOps and a little bit of its history. And again, you know, DevOps kind of coming into being about the same time, as you know, AWS and Azure. And so, this could relate to any type of infrastructure was basically just discovered that, you know, that the, the organizational setup between software development, and IT operations was too rigid silos had, you know, had been created, there wasn't a lot of trust, and there was a lot of pain. And so anyway, so, DevOps is kind of the whole concept of like, hey, how can we how can we change that make it better, and it just turns out that cloud infrastructure, some of the tools within the cloud can make it a lot easier to to adopt a DevOps process flow in order organization. So, you know, here's some history of kind of the way of the movement, you know, towards ever faster, cheaper and low risk delivery of software, you know, back in the early days, you know, software developed in the 70s and 80s, with kind of the mainframe era, you know, it took a lot of time to develop, you know, an application, you know, maybe one to five years, a whole lot of money, what was it risk, potentially, the whole company, you know, if there was a misstep, and so a lot of risk a lot of money, and slow, you know, to be able to implement that in the client server error. You know, the cycle time got quicker, still might be even measured in years, you know, but certainly, many, many months up to could be, you know, a year or more. And then the cost, you know, was greatly reduced from hundreds of 1000s of dollars, to millions of dollars. And it risks could be like, you know, a product line or division, you know, you kind of weren't putting the whole company at risk, if there was a failure yet, just because of the amount of money, you know, that was involved. And cost of failure could be a revenue, Miss CIOs job, you know, that type of thing. And then you move to the 2000s of the present, and you've got, you know, the cloud, you've got very rapid cycle times and the order of weeks. And the cost to, you know, develop software has been reduced significantly. And with that, the risk have been reduced, you know, as well, you know, maybe you miss launching some feature, you know, the customer would like to have, but the cost of failure is is much less, and you know, what's happening is that you just, you know, the trend is to try to get faster and faster at being able to deliver software. And that's one of the things that cloud infrastructure naval enables. And then the DevOps process mindset is also geared to do is to try to get, you know, a lot faster. And then I want to show you something this video has to do with speed, and it's not really all that related, but it's kind of cool Scrum. A favorite hour isn't. Yeah, Favorite movie of mine. When my youngest son was little, he liked to watch cars. And so I think I've watched cars like 200 times, you know, we got the DVD. Anyway, here's the segment. Oh, wait a minute. I don't know. Yeah, okay. Again. A segment from cars, which helped me appreciate the need for speed. If I were to McQueen find you, hmm. Those round things are called tires. And they go under the car. You will have a chance Guido, you will have your kids is trying to be a hero. What do you think of this? Yeah, that's a kid. Kid. By McQueen, he's caught up to the leaders. Oh, yeah. This is what it's all about three way battle for the leap with Pinto. Can you get back to the pits? Got a yellow. Don't tear yourself up, kid. We got to get back up there. First off, we're going to be left out and we'll never witness race. We know. It's time Tiny, tiny, you're going to clean his windshield. That was the fastest pitstop I've ever seen. It was a great stuff, but he's still got to be racecar out, it's gonna be close. So, I love I love that Whitehall level movie, but but, but I like that scene and what that scene is, you know, trying to describe as that can be kind of a new way of thinking, you know that we're like in this case, one got one guy in a pit stop, but he's able to do you know, a record change this a new way of thinking that can speed things up. And that's the idea behind DevOps, but also actually some of the other, you know, software development techniques that we've been talking about, is this a new way to do things that can improve your performance, and in this case, this the speed, that you're able to deliver a service, so let's talk about DevOps. But first, here's some quotes from different industry leaders, you know, Jeff Mo, used to be the CEO of General Electric. And he said, Hey, every industry company that is not bringing software to the core of their business will be disrupted. And I think, you know, I think that's true in most companies, you know, no matter what they produce, software has become, you know, core competency, in one way or another. And then Jeff snover, a technical Fellow at Microsoft said, In previous economic areas, businesses created value by moving atoms, now they create value by moving bits. And so especially with that last quote, it's kind of thinking about, you know, software is like in a pipeline, you know, you're trying to, you know, get those new bits to the customer, you know, as quickly as you can, because typically, that relates to some, you know, some innovation, but that's just kind of a different mindset about how, you know, software gets delivered as if you think of it, as this continuous stream of just like, electricity is delivered your house or water, you know, comes into your house, you know, in a continuous way, setting up your software, product development deployment system to be able to do the same thing. Okay, going back a little bit, like, Well, you know, what was the tension between development and operations, I mean, development is kind of had the responsibility to rapidly to make changes and respond to rapidly changing competitive landscape. And then people in IT operations typically get measured by uptime, you know, the application, you know, runs, and it's available for customers. And so stability, reliability, security, are important. And he, because of the silo nature of how these organizations have been set up, there's just been a lot of tension. And so in this book, The Phoenix project on DevOps, it kind of, you know, talks about what they call this downward spiral in three acts. And you know, an Act One, it operation starts and IT operations The goal is to keep applications and infrastructure running so that their organization can deliver value to customers. But in the daily, you know, in their daily work, many problems are due to applications and infrastructure that are complex or poorly documented. And then very fragile, you know, you know, kind of a word or phrase for this is technical debt. And so as the technical debt grows, there's kind of daily work arounds THAT IT operations has to live with. And then there typically is this promise within the organization that yes, someday we're going to get around to fixing that technical debt and making the you know, the the foundation more stable Then the second act, you know, there's some kind of compensation for the latest broken promise, you know, maybe there's a new feature that's proposed, or there's a new, larger revenue target that the executive team has. And so as a result, the development team has a new, you know, new urgent project that they have to develop. And there's a lot of challenges required with doing that. And so some cutting corners that occurs, and basically, this in increase of technical debt that, that occurs. And again, there's this promise that, hey, at some point in time, you know, we'll fix this. And then the final act, is, over time, you know, things get more and more difficult. And communication breaks down, there's more tension between operations and development, because you think about from an operations standpoint, you know, they're, they're blamed if, if the an application goes down, I mean, there's a lot of yelling and screaming and finger pointing, and yet, they don't always get the help, they need to have, you know, a stable foundation and platform to be able to provide the reliability that's expected of them. And so anyway, you know, because of that dynamic operations gets very fearful of changes, you know, and Okay, well, you know, what will happen if we, if, if we make this change, and you know, is this going to impact the application reliability and uptime. And so things just gets very, very slow. And basically, things start to grind to a halt. And there's just a lot of frustration all around, you know, the IT organization is upstairs, about the fragility of the system that they have to maintain. And executives, and then customers, let's just say, if this is an IT organization that develops internal applications for other stakeholders, like the finance department, or the marketing, you know, department, and they want, you know, new cool functionality, and they find that just things continue to just slow down. And so more and more money and resources are going to what are called sustaining operations, not for innovation, you know, it's like, nothing to really help the organization be more competitive in the marketplace. It's just trying to keep the lights on, basically, anyway, so you can see that there's a lot of frustration and, you know, finger pointing, that occurs. And so, some people, you know, that were part of this, like Patrick Dubois and Andrew Schaffer, you know, may saw this and kind of came up with this term DevOps, you know, at a 2008 agile conference. And basically, was said, it was kind of the response to inflexibility in the us versus them that mentality that may saw within organizations because developers and testers, managers, network, technicians, system administrators were in different silos, you know, so rather than working as a team collaboratively, to provide the best experience for customers, they each had their own piece or whatever, and nobody was kind of responsible for the whole. And so it led to, you know, leads to a lot of finger pointing. And so, you know, there were certain critical DevOps practices that came to the fore like okay, collaboration, you know, better collaboration, less finger pointing, automation, you know, greater reliance on automation, to reduce you know, manual labor and improve product quality monitoring of the product and logging. So you kind of know, what's going on, you know, you know, how your application is performing, and then being able to efficiently deploy software into production. So anyway, this, you know, about this time, the whole kind of DevOps idea started to, to gain momentum and take on, you know, life of its own. And then let me jump out here I've got a short video that kind of provides a good introduction of, of DevOps and what's meant by that. Meet Dave. Dave works for a company whose success is dependent on its ability to offer new and exciting products to its online customers faster than its competitors. Dave is a developer writes code for new products, new features, security updates, and bug fixes. Unfortunately, Dave needs to wait weeks for his work to be placed into production. This delay increases the pressure of staying competitive because some competitors are able to deploy new products and features much faster. In addition, this delay makes it very challenging for Dave to manage both the code that is pending to be pushed into production, and the development of the next feature that he is responsible for producing. When Dave's code is finally deployed into the production environment, occasionally unforeseen errors or problems occur. This mostly happens because Dave is focused on writing code for his development environment, and it's not identical to the production environment. Meet Dave's co worker Anna Anna is a system administrator from the operations team. She is responsible for maintaining and assuring the uptime of the production environment. The number of servers that she needs to administer is constantly growing because her company continues to launch new products and customers are consuming more of their services. This increase of servers has caused some challenges for Anna. The tools that she used to administer a few servers are not as effective when used to administer a much larger volume of servers. This challenge affects how new code is deployed in her production environment. Usually when new code is released, it takes a little massaging to fit into the production environment. This is why she requires code deployments to be scheduled and are only allowed once a month. What's new code is actually deployed. It's her responsibility to diagnose any errors or problems caused by these changes. Sometimes Anna feels as though the developers have tossed their work over the wall to her and her team. So what can be done to help Dave and Anna work better? Ultimately, they want the same thing. happy customers? What if Dave the developer and Anna from operations worked better together? Thought more like broke down silos, shared responsibilities. This would require them to change their mindset on how Dev and Ops work. So what is DevOps? DevOps integrates developers and operations teams in order to improve collaboration and productivity by automating infrastructure, automating workflows and by continuously measuring application performance. If Anna and Dave's teams were more DevOps oriented, they would do a few things differently. They would place more focus on automation, DevOps teams try to automate everything from testing of new code to how infrastructure is provisioned. They would write software in small chunks that are integrated, tested, monitored and deployed, usually an hour's versus the traditional way of writing large chunks of software over weeks or months, and then do weeks or months of testing. Plus, they will have identical development and production environments based on the same configurations. Writing small chunks of code will allow them to increase the frequency of deployments and improve the time to deploy new code. It also enables them to adopt an iterative process to monitor, measure and improve the code and operations every day, improve their ability to respond to market needs, or other things that impact software. Instead of building and configuring software plus infrastructure manually on an ad hoc basis, and then Dave's teams would write configuration management code that describes how things should be built. As a result, they will have the ability to build infrastructure at scale to dozens, hundreds or even 1000s of servers in multiple locations, using different types of hardware. Another change that a DevOps oriented team would do is to use a source control system to help manage, track and document all of the changes to both the application code and configuration management code. The change that Anna and Dave would implement is to adopt a discipline of application performance monitoring and optimization in almost real time. This will allow Dave and the rest of his developers to understand the performance impact of their changes. The ultimate goal is to have a production environment that gives their customers of great experience. So what benefit does having a DevOps oriented team give Anna and Dave's company? Well, it allows him to increase the rate of software delivery and improves the company's time to market potentially from months and weeks to days and hours. This will be a huge competitive advantage. It also allows them to maintain better business focus by automating their infrastructure, so that they can focus on things that improve the business and their online content, they will spend more time on these activities that add more value to their organizations. When a company is able to build and offer better products, this means they have happier customers and happier developers. How does a DevOps oriented team actually accomplish this? Well, as mentioned before, there needs to be a change in the mindset of the two groups that need to work closer together. The other component to the formula is getting the right tools, new tools are needed in this fast paced world, they will need a tool that allows them to build and test code continuously, an example of Okay, so that was the part of that that I wanted to show. And it kind of shows you that again, the tension between development and operations, and then talks about, okay, some of the changes that are needed to be able to bridge that cultural divide. And then he talks about, okay, the tools that are that are needed to kind of implement DevOps. And that's what we're going to talk about in more detail now. So, what is DevOps, it borrows practices from Lean and Agile, and lean in a big way. So lean, you know, maybe, when we talk about the lean startup, there is also lean if you go back 20 years, really was, was used in context of manufacturing and manufacturing processes. So the, in terms of car manufacturer, you know, the Japanese in the 80s, had implemented the Toyota Production System. And some people from the US have looked at that, and kind of observed that, and they use the term lean manufacturing to basically characterize what Toyota had done. And so, what these guys did in the DevOps world is kind of look at that, and go, Okay, well, what are some, you know, approaches that were used for manufacturing a hardware product? And could those be applied, you know, to software development. So anyway, she find kind of a lot of lean thinking within DevOps. And, and I'll refer to that as we go go further. The other thing it did was it combined software development and operations, basically trying to get a one team mentality, rather than an us and them you know, so breaking up the silos, and making some cultural changes is a key part of it. And using, you know, multi disciplinary teams case, capable of being agile, and using agile planning processes. So those are some of the core, you know, principles of DevOps. And the main thing, you know, that I referenced before, you know, when you think about DevOps, think about this pipeline, I mean, effectively, that, that's what you're trying to create, is the ability to take software over here, build it, test it, release it to customers, on, you know, an ongoing cadence, like, you know, bits roll, rolling through a pipeline, and then be able to monitor, you know, how that application is performing. And then that would influence your planning, you know, perhaps changes that you need to make to improve the software or enhance it. So there's this feedback loop as part of the pipeline as well. So that's kind of the you know, the essence of DevOps and the core values, you know, one of the top one there is cultural. You know, people over process over tools cultural is the central central tenet. So teams formed around a mutual product, and you avoid prioritizing individual skill sets or siloing functions. So This is real. I mean, you know, you haven't probably, I mean, if you've worked in industry, you may have seen this. But this is very real, you know, so there was a lot of tension at Microsoft, between development, the development organization, and IT operations very much and you know, us and them, okay, it was not a one to one team kind of culture. And so it's a real, it's a real issue. And then what they attempt to do is, you know, change that around by basically organizing teams around a mutual product or project. The other key value is automation. So automating as much as you can, to be able, you know, to enable things like continuous integration and continuous continuous delivery, because obviously, you're not going to have a very effective pipeline. If there's big, you know, big time sinks to go from build, you know, doing your bill, doing your tests doing your release, if these taken an ordinate amount of time and a lot of manual processes. Well, it ain't really a pipeline. So automation is a key to making it, you know, more like a continuous pipeline. And then, you know, measurements important in anything you do, whether it's a manufacturing of a hardware car, or you know, in software development, to kind of know what's happening, and understand how, in this case that your applications are performing, having enough data to be able to create metrics, and then then try to improve your performance based on the metrics that you have. And then, you know, sharing basically, you know, getting better the whole idea of continuous improvement. So you saw this within Scrum, you know, when they had the Sprint Retrospective, the whole idea of there is, well, how can we get better? Yeah, we're gonna we go for the next sprint and the Sprint's that follow, you know, what's not working? What changes can we make to try to get better, the same thing happens in a DevOps environment of, you know, trying to figure out what's slowing you down, and how to, you know, go faster, and then being transparent, so that, you know, things aren't hidden, they're openly discussed, and, you know, problems can be dealt with, what are some core principles, well, kind of starts off again, you know, if you think about like, the, the manufacturing value chain, you know, customer could receive an order, and then raw materials are released onto the plant floor. And, you know, your goal, as a manufacturer, is to basically have a smooth, even flow of work through the, through the factory, you know, in a manufacturing environment. Like, if you worked at Boeing, what you call that is like, one piece flow, you know, there's one piece flow of product through a factory, so you're reducing the batch sizes and the whip as much as you can, and trying to avoid, you know, rework, so you don't pass defects on, you know, down to the next step. And in the process, you want to make sure you're passing a quality product from one step, you know, to the next. So that's a key part of the manufacturing value chain. And you find that, you know, these same principles that enable fast flow of work and a physical process can also, you know, work equally well for a technology process for a software development process. And so, you know, the input there, you've got some business objective concept that you're trying to develop, network is accepted into development and becomes part of you know, the backlog. So using like the scrum term, the product backlog. And from there, you know, an agile or some iterative process is, is used to basically transform that idea into user stories is some type of, you know, feature spec that can then be, you know, Bill coded up. And, you know, key part is the deployment lead time is like, how long does it take from that idea generation to getting that successful, that change, you know, into your code base, and so successfully running in production so that it's providing value to your, your customer. And, you know, in traditional software development, if you went back 2030 years, I mean, it could be years, you know, years of time, certainly many, many months of time for that deployment lead time. And the whole idea behind DevOps, but not just DevOps, but the agile methodologies is like, you know, let's do it faster. Let's get that that innovation to market with high quality, but more quickly. So how do we do that? Well, you know, here are three principles that kind of underpin DevOps. And again, it's from this book called The Phoenix project on DevOps, one of the things is left to right flow, you know, so basically, you have this focus on a continuous build integration test and deployment processes, being able to create environments on demand. A key essence here is limiting work in process. And, you know, one of the software development methodologies that we'll talk about next time is con bond, which basically, the whole thing with con bond is limiting work in process. And so you'll see how that's done with the con bond approach. And then, you know, building systems in organizations that are, are safe to change, and then can handle change that's left to right flow from the business development all the way to the customer. Another principle is feedback from right to left. So you know, you think about, well, who is your customer? Well, you may have somebody who's going to use your application, well, ultimately, they are the customer. But the reality is, is the next person in the process, you know, that's going to take your work and do something with it, they are your customer, as well. And so you want to get feedback from you know, those customers that are downstream of you to know, you know, if there's any problems and then correct those problems. So, you know, when we talked about, well, how did DevOps come into being? Well, one of the key things was just a lot of animosity between operations and development. Because, you know, operations would feel like, hey, they're throwing bits over the wall, you know, that don't work in our production environment, maybe it worked in the development environment, there's all kinds of other flaws, you know, in technical debt here that haven't been cleaned up. And so there's this animosity, so this whole idea of feedback from right to left is, you know, very quickly, if something is delivered, you know, from Dev, in this case, to Ops, and there's a problem, you stop and fix the problem, you know, so basically create quality at the source, don't let something that is, you know, not a high quality or some kind of problem that persist within the environment. Otherwise, you're going to recreate, you know, what caught you know, that the whole idea of technical debt, you know, and this thing is going to slow down to nothing, you won't have a pipeline again, because you've got too many problems that are being dealt with here, on this right side. So the whole idea of a feedback from right to left. And then another one is constant experimentation. So having a high trust culture, where you can have a scientific approach to experimentation and risk taking to basically in a, you know, improve organization learn and get better. You know, if there's just not a lot of trust, then ops is always going to be saying, No, no, we can't do that. No, we can't do that, you know, and, and, and there's no experimentation, no innovation going on. And so there's got to be trust here in this system, to enable experimentation to occur and innovation to occur. So looking at these, you know, in the in a deeper, a deeper dive with flow, you know, you want to make work visible. So that's, you know, certainly true with the scrum process, you limit the work in progress. So that's, you know, this is a concept similar to con bond, and we'll talk about next time, and all that means, like work in progress. I mean, I don't know it's kind of like, sounds like a fancy term or whatever, but it just means like, Okay, how many exit let's say there's different features, like well, how many different features are we working On at one time, and you know, the more things you're working on, at one time, you know, the more multitasking that occurs, typically what happens is it slows things down, the team isn't as efficient. And so you kind of want to reduce that work in progress to get specific get very good focus, you know, on Okay, well, what is it, that's next, let's get it done. Let's move it into production, and then we'll, you know, then we'll go focus on the next thing. So that's a key concept of DevOps is limiting the work in progress. reducing the number of handoffs, you know, this is kind of a carryover from the lean, you know, they consider that waste. So just say, like, if there was a car, if we're talking about a car plant, and they will look at sales, there are some components, they're moved to some station and they sit there and then they, somebody else has to move them to another location, another location. But the guys at Toyota would say, That's waste, you know, you want to reduce the number of handoffs, the number of movements, whatever, so they look at the whole system, and try to, you know, reduce those types of waste, and then continually identify constraints. So again, in a manufacturing context, there's this idea of a Theory of Constraints, where you identify your bottleneck, and you feed your bottleneck, and in a manufacturing environment, sometimes it could be a piece of capital equipment, you know, a piece of tooling. And what you'll find behind that, you know, equipment is a stack of inventory, okay, because it's all queued up waiting to go through this bottleneck. And so if somebody were to go in there and try to, you know, streamline that, they might run that piece of equipment, you know, 24, seven, you know, so maybe the factory's only operating, you know, eight hour workshop? Well, they bring in other people to work 24, seven on that piece of equipment, you know, to make sure that it's not a bottleneck, or maybe they just get another piece of equipment, they buy another version so that they could even the flow? Well, the same thing from a software, see, if we look at what where's our bottleneck? You know, what's our constraint? And then, okay, what do we need to do to reduce that constraints? You're always I mean, if you're thinking about, you're thinking about your bits as moving through a pipeline, where are they getting hung up in the pipeline? And what can we do to reduce that constraint, so they can move faster through the pipeline. And then, you know, the whole idea of reducing hardship, this is another kind of a lean concept, you know, of eliminating extra steps, tasks, switching waiting defects, non standard, old or manual, you know, work, heroics is a big thing. I mean, sometimes organizations getting caught up on, you know, being heroes, it's like, Hey, we're behind. And then everybody's like working, you know, 24, seven for, for two months to kind of ship a product, that's not a good thing, you know, that's not sustainable. And so you want to have a stable, streamline process where, you know, people can have a life outside of work as well. And that's the second way the principle of feedback, you know, expecting that failure is going to occur, you know, but being able to detect it quickly, you know, and then make improvements quickly see problems as they occur. what's real common in like, like a Toyota factory, is forming and solving problems. So say somebody, there's this idea of an end on cord, where you're basically the line that the manufacturing line is stopped, you know, and until the US started to embrace the Japanese manufacturing concepts, that was unheard of, because you know, the cost of shutting down a manufacturing line is it's expensive, but the cost of passing on bad product is expensive as well. So they have these, this cord that a worker at Toyota pulls that cord, then the whole line stops, and then people come over and they swarm, they go, well, what's going on? I've got this problem here, whatever, and they work to solve the problem, you know, and and then the line starts up again. And then you know, pushing quality closer to the source. So basically, this is again in some organizations like a cultural change where, you know, software developers Hopefully this has changed, you know, and you wouldn't experience this in industry. But But I saw this at Microsoft, where, you know, we had a development team, and we had a test team. And, you know, the developers, some of them just thought, you know, testing is beneath me, you know, I don't do testing, they do the testing over here, you know, so developers weren't doing unit tests on their own software, and basically passing, you know, poor quality software, to the test organization. And what this says is no, you know, you keep the quality, yeah, who developed the product? Well, okay, you're responsible for the quality, you know, of that of that code. And then, you know, optimizing for downstream work center, so, you know, having empathy for your downstream customer, which again, back in the days, when you have these silo organizations, where there really wasn't a lot of empathy. You know, I mean, a poorly designed software would be thrown over the wall, the operations with the thought that, well, hey, it's your problem, you know, that's your job, you know, and not having a lot of empathy, for the problems that poorly designed and tested software cause for those downstream, you know, customers. So, you know, that's a key idea, like getting that feedback from your downstream customers, and then making changes and making changes immediately, you know, not, hey, we'll get to it in a month, but, you know, dealing with it immediately. And then, finally, this whole idea of creating an organization, a learning organization, that's not afraid to experiment. And that's, yeah, you've got to have an organization where it's safe to experiment, you know, and, you know, where there aren't a lot of blaming and shaming going on. Otherwise, nobody's going to raise issues, you know, in that kind of a culture. And then, you know, you institutionalize the idea of day of improvement, hey, we're always trying to get better, you know, chi Zan is kind of the the Japanese word for, like this idea of continuous improvement. And so, you know, you don't allow technical debt to fester, you're constantly refactoring to fix that technical debt, fix defects, you know, transform local discoveries into global improvement. So you know, you don't want to, you don't want to have like, well, one part of the organization while they're doing great, you know, and they got a well oiled machine. But their best practices aren't shared, you know, broadly, throughout the organization, you want to have an organization where best practices are shared, globally, you know, across the organization. And then, you know, you want to with the idea of like experimentation, in jack resilience patterns into daily work. And one, one example of that, is Netflix is famous for this idea of that chaos monkey or whatever. So, what Netflix will do, even though they have, you know, they, even when they started, they had a fairly resilient network, they would shut down, you know, servers, and they basically have leveraged Amazon Web Services, they'll shut down a whole data center. And their whole idea is like, hey, how can we keep the customer experience high, you know, minimum impact of the customer, and build enough resilience into our software, that can, it can handle all different kinds of problems coming on at once. And so they baked that into how they operate, you know, they go in, and then basically, the whole idea of chaos monkey, is they're trying to break their system, you know, they're looking for weak spots, to break their system. And then they go in, and they strengthen that part of the system. And then finally, you know, leaders reinforce a learning culture. And what this means is, you know, leaders to create a safe environment for people to learn, and it means that, hey, your mistakes are going to be made. Let's be transparent about the mistakes and then let's go fix them, you know, and continually get better and better. And organizations, you know, whether it's in a DevOps environment or not, Organizations that aren't doing this, you know, basically creating a learning culture with continual improvement, their days are numbered, you know, because our expectations as consumers are just getting higher and higher and higher, and we're just not going to tolerate, you know, low quality. And so, either do it or you die. So, you know, what are some differences in these kind of culture or, you know, different types of cultures. We have a pathological culture in your organization. Information is hidden, you know, in a generative culture, which is what you want, you know, that's what DevOps is trying to get to. Information is actively sought. Here, pathological messengers are shot, here, messengers are trained, responsibilities are sure, responsibilities are shared, bridging between teams is discouraged, bridging between teams is rewarded, you know, we want the whole company to get better, failure is covered up, failure causes inquiry, like, Hey, what happened, you know, let's dig into what happened. So we can fix it, new ideas are crushed, new ideas are welcome. So this is this is real, if you find yourself in this type of organization, it's probably time to update your resume and look for a different place to work, is this isn't going to be a fun place to work. And then, you know, again, the whole idea of DevOps is speed, you know, in reducing lead times. And, you know, this shows kind of a value stream with, you know, very long lead times to be able to get from some kind of development to actual, you know, product that's in, in production. And so, the goal of DevOps is to try to greatly simplify this process and come up with, you know, continuous flow. And there's this, you know, difference between lead time and process time. And this is just an example of like, could be any kind of customer service, or it could be a bug fix in software development, you know, contacts or just some kind of a customer service queue, where a tickets created. And then all this time elapses, and then work actually started and work gets completed or whatever. And, obviously, you want to reduce this time, you know, this lead time, to just the time required for the work to be completed, you know, because this is what the customer sees is this whole, you know, to them, that's what the, you know, the time that's required. So, reduce the time that works, wait, that work waits in queues. And then there's different ways to reduce, you know, lead time, in a software development context, small code changes, you know, and with good automated tools. And version control, is a good way to do that, you know, versus taking on big trying to deploy big chunks of code, you know, all at once you try to break it up into a more modular bite size approach, so that you can, you know, check that code in on a more continuous basis. And then to be able to enable that, you know, you need some automated, typically some kind of automated tools to test and in many cases to help you deploy the code. So, what are some of the benefits? speed, you know, obviously, as companies get better and better, they're, they're able to move at higher velocity, and can innovate for customers at a faster pace, and allows them to adapt to changes that are occurring, you know, in the marketplace. You know, especially for software as a service, you know, applications. So think about, you know, I mentioned this competition that's going to be happening between slack and teams. Well, you know, these are online services that what they weren't, I mean, saying One was developing it more in a traditional packaged product, you know, big, big launch, you know, approach versus somebody who's developing it more as a pipeline a DevOps model, it's gonna be hard for the company that is developing in big batches, to move quick enough to stay up with the competition. So, speed and rapid delivery are, you know, are very important. Another benefit potentially, is reliability. You know, so that, as you have less technical debt, and more automated processes, like that enable continuous integration, continuous delivery, monitoring and logging, you're able to have, you know, potentially a more reliable application that you're providing customers. And then he allows you the ability to scale, you know, just to scale your infrastructure, because, you know, of the pipeline approach and the automation, that's part of the of the system. And then hopefully, Another benefit is, you know, improve collaboration, where it's not an us versus them type of mentality, but everybody's working together, to try to provide the customer with the best experience that they can. And then finally, you know, security, basically, can move quickly, but still maintain, you know, control and preserve compliance, typically, because you may have automated compliance policies that are part of the deployment process. And so, you know, what is kind of a term that's used as policy is code, where, you know, you can, rather than having to manually track security compliance, you're able to automate that and ensure that your particular application won't be, you know, vulnerable to attack. And, as you saw from the, you know, the power utility that was shut down this past week, because of, you know, ransomware attack, you know, this part of the equation has been huge for a while, and it's just going to get more and more important. Because, you know, everything runs on software, everything, you know, so society is very vulnerable to cyber attacks. And so any company that is developing an application has to, you know, this has to be, you know, on an equal footing, with the, in other innovation that's being delivered in the shop, where, you know, security and privacy are both, you know, top tier requirements going forward. So, you know, for companies that have really done a good job at embracing DevOps, you're, they're able to, you know, linearly increase the number of deploys per day, even as their number of developers, you know, increases. So what that means is that, you know, you would kind of naturally think that a small company would be more nimble than a big, large bureaucratic company, Well, certainly maybe a more bureaucratic company, but a large company like Google, Amazon and Netflix are huge, but they are very nimble, you know, they are able to deliver a very high number of deploys and bring software to market very quickly, even though they are still large companies. And it's because of, say, a DevOps approach and then a lot of the automation that those companies have created to basically speed the bits, you know, through the process into production. Okay, final knowledge sec, and then we'll talk about the next part of the project. Okay, so hopefully you guys can see that Okay, that's a wrap here, let's let me share the results here. So left to right flow is a key principle that underpins DevOps. So that's true, you know, so that's where, hey, start, you know, say development and move to the next step, you know, in the process on and then the bits are eventually, you know, reduced into production into the hands of customers. So this whole idea of flow and flow from left to right, is a key principle of DevOps. And then feedback from left to right is a key way to improve the software development process and DevOps. So that's actually, Paul, so it's all kind of a trick, I mean, but if you think about it, it's the idea here is that you've got to get feedback from the downstream process. So it's feedback from right to left, okay. So, you know, way to think about this is say, you know, we're producing a product or whatever. And then there's the person that the beginning of the line, and then they pass it the second person. And third, and each one of those people, you know, add something to it, you know, maybe they screw in something, or whatever, and it finally gets to the end, and it's all packaged up and it shipped or whatever, well, you know, the, the person, I'm handing the, my, what I've done, that's where I need the feedback, you know, for something that I'm doing, you know, which is an error or low quality, or making it take longer for them to do their job. That's where you need to get the feedback from. So it's feedback from right to left, to be able to improve the process, we need to get the feedback from the downstream processes in order to you know, smooth out the flow. So left to right, flow is a key principle and feedback from right to left is another key principle. And then, you know, kind of the no brainer was like number three, increasing speed is a key benefit of adopting DevOps. So that's it. I mean, that's kind of one of the most important benefits is that these number of deploys, you know, where we can get a new innovation, or a bug fix or whatever, from development to production as quickly as possible. That speed is what DevOps is all about. And you know, the companies that are able to do that, more successfully, like say, a Netflix or an Amazon or Google or others, you know, those are the ones that are going to be successful in the marketplace. Because they're able to do it faster than the other guy, okay? Okay. So, so you guys have turned in, you know, it's kinda like a your map and your target, you got a rough idea of, you know, your application and what you want to focus on, and kind of questions that you want to answer through the sprint process. Now you get into kind of the real creative part of the process, which is, you know, we all want to create an innovative application, I mean, you know, if you just go produce anything, and just throw it out there, you're probably not going to be successful. I mean, you've got to have some innovation. And so the sketching, you know, coming up with ideas that then can be implemented in the application, you know, that's obviously important. And this whole idea what they have with the Google venture process is, you sketch in isolation. So it's like, Hey, we want to give everybody a chance to innovate, you know, and basically be creative and think of something cool, that they think should be implemented in the application. And probably, you know, you want to focus on the sketches on your target, you know, so so maybe there's like, oh, they'll discover our app, through Facebook. But that's not core to how your app is going to be successful, your app is going to be successful. You know, like, in the example of the coffee, the retail coffee shop, where they want to, you know, have people buy coffee beans on line. And they determine, you know, when people are kind of looking at the beans and kind of comparison, comparing them that needs to be rich and inviting, and you know, something that where they can really get a sense of Oh, wow, yeah, I really want to try those coffee beans. So anyway, you could imagine that they would focus a lot of their creative energy on that area that really is going to move the dial, you know, for the application. So anyway, that's what you should do, too, you guys should figure out like, Okay, well, where's the target, what's core to the app. And then in alone, you kind of sketch out, you know, some ideas or whatever. And I'll run these videos and in a second, but you're going to sketch out these ideas, you're going to, you're going to do it alone, you're not going to do kind of a group creative brainstorming session. And, you know, some tools to do that are just doodling, you know, on a sheet, you're kind of Doodle doodle. And then they have this thing called Krazy. Eight, which is meant to kind of get you past like writer's block, you know, where you're like, Okay, oh, I don't know what to do whatever, you fold a piece of paper, and you get like, eight, you know, little areas, and what they say in like, a couple of minutes time, you fill these in with ideas. So this isn't polished, I mean, but this just might be like a core creative idea that you have, or whatever could be text, it could be some kind of diagram. And then from that you're like, Okay, you know, maybe you feel like, you got a few of these things that are really, these are gold nuggets, these are really good ideas. And then you turn it into, you know, a more detailed sketch that you're going to then share with the rest of your team. And then, you know, the team's going to look at these, you know, basically, you know, come up with ideas come up with your crazy A's come up with your, you know, solution sketch, and I talked about the crazy eights or whatever, he come up with your solution sketch. And again, I mean, it's not a work of art, but it basically is, it's conveying an idea, you know, some creative idea. So, you know, it should be a combination of some diagramming, but then also a lot of text to make it clear, you know, what you think should be developed? And then you, you decide, so what that means is you basically, you choose the best sketches with the silent review and structured critique, basically, you know, you're looking at your different sketches, and then you do this, you know, put up your How might we stickies, you know, and do some infinit and affinity mapping, you know, related to the, to the sketches, but then ultimately, you do some voting, you know, multi voting with you everybody given three dots or whatever. So, these are just some ideas. I mean, you guys given the whole COVID situation, And now it's hard to get together, you can figure out how you want to do this. This, you know, this is the kind of the recommended, you know, process steps. I think the key thing is that everybody on the team should should, you know, come up with some creative ideas. So, you know, pull your way, don't just say, Oh, yeah, well, I'll let you know, Joe over here, you know, who's got a lot of ideas about the application, come up with, you know, the creative ideas, no, everybody comes up with the ideas. And then you have a way to share those ideas. And then, and then pick, you know, the ones that you think have the most merit, because then that's going to go into the storyboard. And that's really, the next deliverable for the project is a storyboard, which is really like your spec for the prototype. Okay. So you know, when you get into your prototype, this is like slide one, slide two, slide three, slide four, or whatever. And so, basically, it should be, you know, how you're going to walk the customer, the end user through your prototype on Friday. So the storyboard is your rough cut at it, but it should be your, you know, basically your roadmap for what's actually going to be developed in your prototype. And then your prototype is, you know, as nice as you can make it in, in PowerPoint, you know, so that looks like a real application that a customer could then interact with, and provide you feedback. So again, the idea is like sketches, you know, getting some creative ideas, discussing voting on those ideas, and then turning, you know, those ideas into a storyboard, I mean, probably maybe some of the, the ideas are going to be clustered in what you consider to be the target area of your application. And then when the prototype is filled out, you'll have to also come up with some, you know, some slides for those steps as well. Anyway, you you can figure out how you want to, you know, orient your sketches, but it's sketches, you know, discussion, voting, and then storyboard. And then the storyboard will be, you know, due on lesson at the beginning of lesson eight. And then there's this hack of the storyboard process that these guys at AJ and smart have developed, and there's a video that talks about that, or whatever. So I'm not going to, you know, play the videos for you, you can find, you can find those online. And they kind of describe the sketching process, voting process, and then the storyboard. But what they do with this hack is they, they similar to the sketching, they suggest that everybody kind of work, and come up with their own, you know, storyboard slides, for the first you know, four to six steps in the storyboard, then you get it in front of everybody, people vote, you know, and then you go on from there. So say you're going to end up having, you know, 24 slides in your prototype. You know, you may go through this several times, but you're focused on, you know, the first part would be focused on, hey, how is somebody going to discover our app? You know, what does that process look like, Okay, everybody takes a cut at, you know, what that flow should look like. And then, you know, you get into maybe the meat of your application. And then there's another, you know, where you do another four to six steps there. And then that's where you kind of leverage some of the best ideas from the sketching process. So anyway, this is the, you know, the steps to kind of get to a storyboard, once you have a storyboard, and that's basically the template for the prototype. And then you're just turning that, you know, into, you're getting the, you know, form fit and finish better, you know, leveraging PowerPoint for the actual prototype. And then the prototype will be demonstrated on less than 10. So we'll allocate time for every team to go through their prototype. Okay, that's all I got any questions on, you know, the project. And these next steps, I mean, these videos that the gv guys have, they're short and pretty easy to understand. So, I recommend you take a look at those if you've got any questions, and I would recommend you look at this hack, you know, by ajs March, because it I think provides a little bit more structure to the storyboard storyboarding process, rather than just following the checklist that's in the in the Google adventure book. Yes, I have a question. Yeah. So do we necessary sketch the target for the sprint? Or the goal? Or do we kind of sketch the prototype the whole project? Like at least the skeleton? Yeah, no, you're doing the whole thing or whatever. So the idea is that, when you do your prototype, demonstration on the on the lesson 10, you're walking somebody through, like, okay, here's where you might find out about our app in a wall street journal article, and then you click on a link, and then it takes you to a site, and then you download the app, you know, and the thing is, is you don't want to spend all your energy though, in that, so you need some slides that cover that process. But then typically, the target, you know, that you guys have identified is somewhere in the app, you know, and, and so that's where you should see the heavy build out of the prototype. But you should have, you know, kind of a walk from the beginning, through the process, you know, the video that I showed her, again, from the AJ and smart, and the guy showed, okay, discovery learning, you know, using and then the goal, you have, basically for describing your map, that's kind of you should walk through the prototype, and the storyboard should walk through that process. But don't spend a lot of time I don't want to see a lot of time on, you know, like, 20 slides and how they set up their accounts, you know, like, no, that's not the heart. That's not the heart of the app, the heart of the app is, hey, if it's like the fitness app, you know, how are they entering in nutritional and calorie counting? Or how are they looking at the new, you know, strength training exercise, or, you know, basically the things that that are going to be compelling enough for the user to come back and use your app? And then would answer your sprint questions? Okay, that sounds great. One more question, do we submit each member their own work, or we still kind of have a final meeting, selecting the best options, and then combine and submit only once per team? Yeah, no one per team. So I'm looking for a team product on the storyboard or whatever, you know, at the end, I'm gonna do like a poll of like, you know, because, I mean, I realized that these were projects, you know, hopefully, ideally, everybody is engaged and contributing or whatever. But you know, I have a kind of a questionnaire at the end, that kind of, you know, where you can, you can weigh in on like, who did what, or whatever. And if you felt like everybody evenly participated, great. If not, you know, that you'll be able to, to highlight that as well. But the expectation is, is that the team product, so you will have to, you know, do the sketching, vote on the sketching, come up with the storyboard or whatever, and, and then what will be turned in? Just a minute. Okay, let's do something like this. Okay. So you know, that would just show the flow. So basically, it could be it could be yellow stickies helping however you guys want to do it. So you could basically lay out the flow in the storyboard format. And then you could scan it, and then send it to me, you know, send me the scan storyboard. Well, then what I'm going to do is I'm not going to grade the storyboard until after the prototype is delivered, because I'm looking, this is your template. So there can be some variation from the storyboard to the actual prototype. But it shouldn't be wildly different, like, you know, you've got these different, okay, windows have what's going to be happening. And then you do the prototype. And it's like, you know, 100% different, there'd be some variation, but I'm expecting that there's thought that goes into the storyboard. So that when you do the prototype, it's like, oh, I know, I know what I need to do. I need I need anybody who's working on whatever slide one, they know. They've got a template of what they're going to do for the first slide and the prototype. But both the storyboard and the prototype, it's a group project, you know, just one One deliverable from the group. Okay, sweet. Thanks. Okay. Well, you know, if there's any confusion, we're getting to the point now where you guys are going to do a lot of work. Okay? So if there's any confusion, ask the question before you do the work. Because I don't want you to be oh my gosh, you know, I, we didn't know this or something, and then you did all this work that, you know, may or may not be valid or whatever. So, send me emails, whatever, I'm happy to have a call with a team or whatever. Because you're getting into the heavy lifting. Now, you know, I kind of in the first part of the course, I just wanted you thinking about the app, you know, what kind of app would be cool to do, you know, that kind of thing. But now you're getting into the meat of the project where there's really a lot of work. So make sure you understand, you know, what you have to do before you do the work so that there's no wasted energy. Okay. All right. Okay, good talking to you guys. Oh, and then, you know, like I mentioned, we'll start at six again next week. But I'm going to leave, I'm going to try to finish by 715. So that you guys will have the rest of that time for project time. So you can plan accordingly, you know, to have like another zoom session, to discuss sketches or whatever, you know, you'll have that time available. So I'll try to religiously stop back at 715 Next time, so you have project time during class. Okay, great. All right. Thanks, guys. See you next week. Thank you. Thank you. Okay Hi, everybody, let's do a comp check. Can you hear me? Yes, yes. Okay, great. Thank you. Okay. All right. Well, I hope you guys had some time to kind of get together on your project teams and discuss the storyboard. And then that before we end tonight, I'm going to go through some slides on the storyboard. But we'll we'll just see if there's any questions on that, I just want to make sure you guys understand what the deliverable is for the storyboard as well as the, you know, the final PowerPoint deck, which will be the prototype. So anyway, we'll we'll do that at the end of end of the lecture. Okay, so got a few people joining. So let me get the those people in. Okay, we get back. So, you know, like normal, kind of cover the prior lesson concepts, talk a little bit more about DevOps practices and tools, and basically just show you that there's a lot of tools that the cloud platform providers are implementing to make DevOps easier. And the ones I'll show are from AWS, but Azure has, you know, their own tools as well to do the same thing. So it's just making it a lot easier for companies to implement, you know, DevOps best practices based on the, the tools that are, you know, readily available. And then we'll talk about con bond, which is often used in a DevOps environment. And I'll discuss con bond basically as a comparison with Scrum. So you kind of are familiar, you know, with Scrum, we've gone through that. And so, you know, the charts all have, and basically, the reading did the same thing kind of says, Well, you know, Scrum does this and this is kind of what, you know, what Khan bond does, where they have some kind of prescribe process to follow or not. And then we'll talk about extreme programming, which a lot of the practices that extreme Extreme Programming recommends, you'll see you'll see within DevOps and and in other, you know, software development approaches, so they kind of have cherry picked a lot of things that were first kind of discussed with the Extreme Programming movement and a guy named can't back so we'll talk about that. And then like I mentioned, we'll finish up with the class, you know, project discussion. So, you know, we talked about the cloud last time, you know, one of those key characteristics, which is massive scale with, you know, resource pooling at a data center level, and really across data centers. So that's how it's different than traditional hosting, or virtualization is just the scale at which these resources are being pooled and shared, broad network access on demand self service. So you know, for those of you that have your own, you know, cloud accounts, you know, you can go in and you can provision resources, and then you can do that through a self service. And then it's agile and elastic. So you can go in, and you can rapidly scale up or scale down. And there's this illusion of infinite capacity, because, you know, the, you're talking about data center resources and data centers across the planet. So basically, for a particular company, it's unlikely you know, that they would run out of capacity if they're using a public a public cloud pay as you go meter billing. So this is been, you know, very important for if you don't get like enterprise Whaley customer, but it particularly enterprise customers in the past, you know, they'd have to build their own data centers, fill those data centers with servers and storage, and you know, periodically go in and, you know, stuff would fail, or it would age out, and they'd have to go in and either replace that, with cloud computing, it's just meter billing, or you pay for what you what you consume, and you're just consuming the service. So you know, you're not paying for all those other things. And so, in a lot of ways, it makes it simpler and easier to forecast what your expenses are going to be, for your IT infrastructure, and follow all of this obviously, is enabled by very sophisticated automation, and, you know, by API's that are stable, so, so obviously, that's where the investment, you know, with AWS and with, with Azure, but also Google App Engine, just a lot of audit automation in software to make this happen. And then, you know, this chart just kind of showed that, you know, some of the things that we talked about this resource pooling, you know, in a data center level, versus like traditional data centers, you would have, you know, resources that were tied together a couple together tightly, and then in fairly brittle, you know, so it kind of hard to add capacity, or to put another workload, you know, on a given set of servers and storage, here, you know, it can happen in minutes, you know, you can basically scale up scale down, put on a new, you know, add a new workload, or take a workload down. So, obviously, there are a lot of benefits, you know, costs, you can save money by leveraging cloud, the cloud, you have global scale, you know, you don't have to have data centers, if you're a big company, or you want to be a big company, you know, you don't have to put data centers in every country on the planet, you can, you know, leverage the cloud platform data centers, which are already there, you know, in, in a region, or in many cases in a country, you get, you know, very good performance. So, you know, and performance is going to continue to be upgraded. Security, you know, the, as we, as I mentioned, last time, these cloud providers are spending a lot of money hiring the best talent they can to make those platforms secure. Speed is a huge benefit, you know, being able to in a self service way, provision your your resources, just through a few clicks, you know, and have it be available, you know, automatically. I mean, you know, when I was in Microsoft, I mean, it could take weeks to get a development environment set up, you know, and have to get the to get the all the equipment, purchased and provisioned and set up and tested. In a cloud environment, it happens almost instantaneously. So, you know, that leads to, you know, speed benefits, but productivity benefits as well. And then, you know, there's a lot of reliability inherent in a cloud platform. And it doesn't mean that the underlying hardware is necessarily more reliable than a enterprise that had their own data center, you know, an enterprise could go out. And they could buy some very expensive, very reliable hardware. But what happens in the cloud platform is the cloud providers know, hey, even if we have good hardware, it's going to fail, you know, and we have to have software that can account for those failures, and move workloads in a seamless fashion. So that there's no no downtime. And so that through that the sophisticated software, that's managing the workloads on the cloud, that's where, you know, the reliability comes from. What are the deployment models, public cloud, private cloud, hybrid cloud, so public cloud, you're using this, these resources that are out there that are very large scale, but they're shared by many tenants, so you know, your workload, your data could be right next to somebody else's, and you don't really know who that is. So, but by doing that, you get this, you know, a lot of the benefits that I just mentioned, that come from very large scale, private cloud is like, okay, you know, I want some of the some of the benefits of a cloud operating system, but I really want my data, you know, I want more control over my data and my workloads. And so private cloud is a path to do that. And hybrid is where companies want to do, you know, both, maybe they either have a long term strategy to have some portion, you have their own data centers have their own, you know, it data centers, but they want to scale up to the cloud, you know, so if they get to some situation where the demand for their applications is higher than they can, you know, their resource in their own data center, they want to burst out to the cloud and leverage cloud resources, or in other cases, as people they go, you know, no, we want to, you know, we kind of see ourselves ending up in a public cloud. But, but we went, we went out, we've got these data centers that exists now, and we're not going to scrap them, you know, overnight. And so it's a bridge to get to the cloud. So they start the process of being able to leverage cloud resources. And over time, they basically shut down their own data centers. And then the service models, you know, are sophomores to service, which has been around a while, you know, through like, companies like Salesforce with their, you know, CRM solution, office 365, you know, which, which Microsoft is launched. So a lot of lot of software as a service where basically you subscribe, you know, to be able to benefit from a certain type of application, but then that service provider is really doing all the work for you. Platform as a Service, where you develop, you pick a cloud platform to develop on. And so again, a lot of the the responsibility as the cloud provider, and then Infrastructure as a Service, where you're kind of renting out the IT infrastructure. So Sir, you know, server stores, network, operating systems, you just pay a company like Amazon for that on a pay as you go basis. And then the IT organization is still responsible for the applications and the data that are running, you know, on that infrastructure. And so this chart kind of shows you Yeah, well, what are, you know, if we were to leverage these different service models, who's doing what? Well, you know, over on the far left, the IT organization for particular company is doing everything, you know, and as you move to the right, they're doing less and less. So, you know, infrastructures, the service, they're still middleware, runtime data and the applications that the IT organization was responsible for, what platform as a service, it's really just the applications and data and software as a service, you know, the cloud provider. And I and I use cloud provider broadly. I mean, you know, so you could have, just just look at like net Netflix? Well, you know, Netflix uses Amazon Web Services. So they're not a cloud infrastructure provider, but they're a cloud service provider, but their applications are running on AWS. But the point is, is that you just consume, you know, you just consume that service from Netflix. There's really nothing for you to do as a user except you know, open up Netflix and pick, you know, pick what you want to watch. So in the case of like, office, 365, you know, then you've got Microsoft, which is doing both, they're kind of providing the service, but they're also leveraging their own cloud platform to provide that, that service. Anyway, so those are, you know, some of the service model comparisons. And then, you know, DevOps, what we're really talking about is just this kind of think of it as a pipeline, you know, but instead of oil, or, you know, water or, like, if you use a utility, you know, electricity, it's bits, you know, bits are flowing through this pipeline, and the goals of company, you know, software providers going forward, it's just make that a continuous stream of bits, which you can then equate to innovation, you know, you're continuing to innovate for your customers, building it, testing it and releasing it, and then you're monitoring it and getting feedback to say, okay, you know, what enhancements Do we need to make to the service or whatever. So it's kind of thinking about getting these bits to market as fast as possible. And that's the idea of this delivery pipeline. And then speed becomes, you know, very important. Well, to get that, you know, to achieve that high speed, you know, some of the guys behind the DevOps movement says, you know, we got to change the culture, you know, it's got to be a people over process and tools type of culture. And we've got to break up the silos between, you know, developers and operations that are often have been at war with one another, and got to get everybody to kind of keep your eye on the prize, which is satisfying customers, and let's all work together, you know, to, to do that, and to do it, you know, while we improve the speed, you know, of our operation, and then, you know, then you start looking at how to go faster, I mean, once you get some of the low hanging fruit out of the way, which is like, you know, the silos, you find, well, gee, you know, we can't really go as fast as we want unless we start automating, you know, some of these functions and so automation, things like continuous integration, continuous delivery, are really important, you know, to be able to have a good DevOps, you know, system, and then measurement where you're, you know, measuring what's happening with your infrastructure, and with your applications, so you can improve, you know, if you don't, if you don't measure know what's going on, you know, or talk to customers, you can think everything's fine, and, you know, and it's not, and then sharing the idea of continuous improvement. So sharing best practices, you know, across your company, but even across companies. And then, you know, that the author of the Phoenix project on DevOps, which is a, you know, book kind of focused on principles, that they felt were important to implement a good DevOps environment, one of the, one of the principles is left to right flow. So you're kind of, you know, like this pipeline, you're kind of, you know, got development tasks release, and it's kind of this left to right, flow, where you're, you know, limiting your work in progress. And this is something we'll we'll talk about a lot more with Khan bond, because that's the, that's the key, the essence of Khan bond is reducing work in progress at your at the different stations that you have. So left to right flow, the second one feedback from right to left. So, treating whoever you know, because this was this, you know, there's a reason for this, and that, you know, you don't treat your whoever you're providing your product to is your customer, that next person in the, you know, in the process step, and where this is kind of, you know, got got out of whack was when you think about the problems, or the fighting between the development, organization and operations, a developer might think of, well, you know, my, my customer is the end customer that is using this application that I'm developing, and I could care less about operations, you know, whatever. I mean, that's their biggest stuff they got to deal with, I got headaches I got to deal with and who cares, you know, and, and then what, what happens if that their attitude, is that, okay? They may have a very brittle code, they may have a lot of technical debt, that never gets fixed. And then operations I mean, it's a nightmare. For operations to deploy a new application or, you know, enhancements to an application, and ultimately, the uncut, the end customer is the one that pays the price, you know that maybe there's downtime, or because things are so brittle, the updates are delayed and said that instead of this pipeline, where bits are just going to the end customer, you know, as quickly as possible, the operations organization has to sit on it and be very careful before they deploy to production they tested and see if it works or not. And that could take weeks of time. So anyway, the whole idea of feedback from right to left is, Hey, who's that next step? You know, what's that next step in the process that I'm providing my code to, they are just as much my customer as the end user of the application. And anyway, you want to be getting feedback from all those different steps, you know, and all those different customers. So that's kind of another principle of DevOps. And then constant experimentation, you know, having a high trust culture, where it's okay to take some risk, and, you know, push the envelope to be able to learn and improve your service. So, you know, I mentioned the Netflix, they have this thing called chaos monkey, you know, where basically, you know, they go in, in an automated way, they just shut down even, like, hold data centers, or, you know, maybe some storage, you know, is shut down, and they just see, okay, can our system handle, you know, handle that, and rebalance or whatever, what, you know, you can't really do that, in a culture work, the blame game, you know, it's just like, risk taking is not encouraged, you know, it's punished, then, okay, there's not going to be a lot of learning that goes on in that organization. And so anyway, that's another important principle. So what are the benefits of DevOps, if it's done properly, speed, rapid delivery, reliability, scale, improved collaboration, security are all, you know, potential, you know, benefits of a DevOps organization that's, you know, being run well. Okay, so. So now, this talk, you know, briefly about, okay, you've got these practices, and tools that are out there to kind of help help companies set up a DevOps environment. And obviously, the cloud providers are continuing to look away, look for ways to enhance their cloud platform. And one of their focuses is like, hey, how can we make it easier to set up this, this bit pipeline, you know, leveraging our cloud infrastructure? So anyway, what's the tool chain in DevOps? Well, gotta develop code, you got to build with continuous integration. So being able to, you know, develop code, and then quickly get it into the mainline source code, test automation, so that as you're doing that, you have some automated tests that you can run to make sure that, you know, there are any bugs, you're catching them at the source package applications for pre deployment. So how do you you know, get once you've done that testing, and you've got unify? Okay, yeah, this is a, this is a good bill, and it's working properly, you know, get it into production environment, and, and then manage releases, and then configure your infrastructure and monitor performance. So those are all things that are kind of essential to a DevOps environment. So if you think about continuous integration, continuous delivery, you know, what are companies like Amazon, you know, doing to help enable that? Well, they have AWS code, pipeline code, build code, deploy in code star, which are kind of all tools that have been developed to, to help companies, you know, with implementing continuous integration, continuous delivery. And if you look at Okay, what about microservices? So yeah, the whole idea behind microservices is that you can build these small set of, you know, the set of small services that could be leveraged broadly, you know, within your organization. And that way, you don't have to keep reinventing the wheel. You know, it's like the services are there and are there to be leveraged and then those services can be enhanced by a team that they're just that's all they're focused on. Is Making that particular service better? Well, you know, Amazon is got an elastic container service, and AWS lambda, as tools that have been developed to kind of help implement microservices. What about, you know, things like infrastructures, can code configuration management, you know, policy is code, like, Okay, how do you help companies kind of manage the code that they're developing, you know, for their applications, as well as a variety, you know, tools that are out there. So, cloud formation, opsworks, System Manager, and AWS config, are all tools they've developed to kind of help with this part of the of the problem. And then for monitoring and logging, you know, there's cloudwatch, AWS X ray. And then if you kind of want to monitor, API usage, cloud trail, you know, that would help identify the identity of an API caller, the time of the call, the source IP address for the API call or so, you know, just wanting to know what is happening with your application, and having traceability, there are these tools out there to help companies do that. So, I mean, it's a great time to be a software developer, I mean, it's really a great time, whether you're going to be at a you know, small company, a large company, where you're, whether you're going to go out on your own and kind of develop your own company, this cloud infrastructure that already exists and is growing rapidly, is very economical, but it has tremendous capability. And it's there for you to leverage. And then on top of that, there are these layers of tools to basically make it easier for you, you know, in this case, to develop a DevOps, you know, environment, where once you get your application out there, and you're providing that service to customers, and your customer base is growing, then you can manage it and continue to scale continue to enhance it. So I mean, it's just never been better to be in the software industry, and to be a software developer, because of all the tools. So your challenge, I mean, really, the big challenge, I mean, it used to be like okay, well, you know, I'm gonna learn how to develop in, in Java, or C sharp, or c++ or Python or whatever. And that is still, you know, part of your challenge. The other part of your professional development, is trying to keep up with these cloud providers, and all the capability that they're putting into the cloud and the tools that they're providing you. Because it's incredible, the amount of like, if you go back to when AWS first started, and all the tools they have now provided to developers, it's insane. I mean, the amount that the the amount of innovation, you know, and growth has been phenomenal. And so then it's just, it's challenges to try to keep up with it. So, you know, part of your professional development should be, hey, what is what's happening on AWS, what's happening on Azure, we're What are, you know, learning more about these different tools, looking for opportunities to let you know, go out and play yourself, you know, just kind of learn more about them. But if you're in a company, you know, say, Okay, how could we potentially leverage some of these tools? Now, obviously, if the company's got their own data center, you know, well, no, but I mean, more and more companies are leveraging the cloud or experimenting on the cloud. And so you could help, you know, lead the way with that company that you're, you know, that you're working at, to kind of leverage leverage these tools for your company and your customers benefit. Okay, and then finally, communication and collaboration, you know, these are things that, you know, there's tools like slack and Microsoft teams that are out there, that can help. I mean, we, we, we use kind of both, we're heavier users of slack at my current company, and it's become a pretty indispensable tool. And it's really pretty cool. I mean, we have channels and do a lot of different topics or whatever, but then you can, you know, like, instant messaging me Microsoft, you know, we used to have office communicator. So instant messaging is kind of within the enterprise has been around For quite some time, and slack does that as well as teams, but they go much farther, you know, in terms of the capabilities exist within those tools that truly do make it easier to collaborate in a COVID environment or, you know, anytime you've got distributed, you know, workforce, it's but also if everybody's liking the same building, too, it's a lot easier to slack somebody, you know, with a question than necessarily, like walk down the hall. Okay, so that's, that's DevOps. And now we're going to kind of switch gears and talk about con bond, and Scrum on with the folks on con bond but these of the Scrum and I'm going to start many guys, and you're all probably too young to even though who Lucille Ball was, but she was a comedian, you know, and she had like, a sitcom or whatever. And there's this really funny scene, and I saw I found the video on YouTube, that does a really good job of differentiating, pulling versus pushing work. Okay, so con bond and the whole, you know, Toyota production system just in time manufacturing, it's a pool system. And Scrum is actually a pool system, as well as con bond, they implemented it a little differently. But, and we'll talk about that, but basically, the development team, instead of somebody coming in and saying, boom, here's all this work you've got to do. They pull the work in that they're going to do you know, and work on next. So that's a pool system. And by the end of this lecture, you'll have a better idea. Yeah. What do you mean by pull system versus a push? Okay, what I'm going to show you is video of a push system. I hope I'm going to show you see if I can pull this up. Okay. Where is it? Okay, here we go. Girl, this is your last chance. If one piece of candy gets passed, you have a packing room. I'm wrapped. You're fired. This is easier. Yeah, we can have less okay. Listen, you're doing splendidly. Okay, I don't know how well that video came out or whatever, but get you an idea of like, you know, I mean, that sounds, it looks ridiculous. You know, they've got all this candy coming down, and they can't keep up with it or whatever. But you know, if you think about how, in the past software development has worked. In many cases, it's just like, the people that have had the concept for the application. Just come in, and there's just a whole bunch of work there and it's hard to really estimate how much work Work is required to implement all the functionality. So imagine some large requirements document that is developed. And then it's basically dumped into the development teams lab. And then there's some idea of like, Well, okay, you got to get this done and whatever, you know, nine months? Well, yeah, but you know, is that nine months of work there? I mean, what if it's two years of work? Or what if it's six months of work, and so, you know, this is where the idea for the pull system for as applied to software development became, you starting to become popular, and actually, it had been used in manufacturing for quite some time. And so that's why it was kind of pulled over to, to software development. So that's kind of the, the intro for, for con bond. And what this chart shows, which also kind of is a reason why you want to reduce work in progress is as you get, you know, if you have a resource, and then you queue up, you know, work in front of that resource, at, you know, if that resource, if you're keeping that resource, just 10% busy, that's not too bad, the wait time is really pretty low, you know, but once you get near, you start getting 70 80% resource utilization, or the wait time skyrocket, you know, and this is when you'll start having very long lines, you know, in a in a queue, because that resource just cannot satisfy the number, you know, they say customers that they have waiting for them. So, so anyway, so that's it, you see what I want to avoid this exponential part of the curve, where you get to very, very long queue times. So con bond is a technique that was used by Toyota within their production system to make cars. And basically, they use con bond cards to basically send a card, you know, to upstream process and say, Okay, now send me a new component. And then they that so they're pulling that component forward into their process. So here's a, I'm going to jump out again and just show you a short video on con bond, which are kind of describe how it was used in manufacturing, but then how it's being applied in software development. Today, I'm going to attempt to do Kanban in two minutes or less. Hi, this is Gary Welcome to development that pays. Here's a super simple factory with just two machines. And the ideal world, both machines will operate at the same pace, a world would fall smoothly from to do to done. But what if machine one is faster? The result is a pile of widgets building up and for the machine to this work in progress is a problem. There are obvious costs, there's money tied up in each of these items. And even the physical space of the queue takes up has to be paid for. There are also costs that are much less obvious, like a high tide of a rocky shore. Work in Progress can hide a multitude of sins such as machine downtime, extended set of times and of course quality issues, reduce the work in progress, issues become issues that can be indeed need to be addressed. But how do we go about reducing the work in progress? Well, by having machine one process items only when machine two is ready to receive them. Machine two needs a mechanism to be able to signal to machine one that it's ready, and the signal is in the form of a card, the now famous Kanban card. No longer widgets push through the factory there now, thanks to the Kanban card pulled through the factory. The Kanban system was born in the factories of Toyota, but it's found favor in software development. We don't have machines, but we do have processes. We don't process widget, but we do process tasks, and we can represent the processes and tasks on a board. In this case, the all important pull system is implemented without the need for a Kanban card. An empty, nearly empty column is the signal to the previous column to send more tasks. The resulting low level of work in progress comes with a whole range of benefits, shorter cycle times, faster throughput and less often. wasted time. Thank you very much for watching. Hope you enjoyed this episode. As much as I enjoyed making it, there's a new episode. Okay, so that's kind of like a brief introduction and then went back in the deck here, we'll kind of go over some of the differences between the con bond process used for software development and, and Scrum. So first off, if you just think about prescriptive, you know, or adaptive processes up, both Scrum and con bond are fairly adaptive, you know, so you kind of go over here to like, rub, there's just a whole bunch of you got to do this, you know, and processes and procedures. So, basically, prescriptive means, you know, more rules to follow, adaptive means, you know, less rules to follow. And so combine, you can see is less prescriptive, and Scrum, I mean, about the only thing is risk prescribe, or these whip whip limits at these process stages. And so we'll kind of talk about some of some of those differences. So, you know, one way I mean, it's not like, rules are bad, it's like, you know, because you're starting, especially if you're new in doing something, and implementing a particular process. Well, rules can help you I mean, that's what they're meant to do is to, you know, save you from making, you know, mistakes and kind of optimizing, you know, your, your process. But as you get more and more experience, then say, you're, you know, you've been a software developer for 1520 years, and you know, Scrum, you know, XP, and, you know, you've got a lot of experience, under your belt, you've seen how a lot of things, you've seen a lot of projects fail, you've seen a lot of projects that were very successful, you have the expertise, to basically adapt a process, as you see fit, you know, because you have the knowledge and the experience to be able to do that. And so as you know, as that happens, you know, you can, you can basically live with a process that has fewer rules to follow. Because you really kind of know what needs to be done. So anyways, that's the idea like over on the left, you've got processes are very prescriptive, those on the Right, less prescriptive. Both Scrum and con bond are really not that prescriptive. But con bond is less prescriptive than Scrum. So what is con bond? You know, in a nutshell, well, you know, they you visualize the workflow and basically identify the different steps in the process. And then you limit the, you know, the work in process. So, what is working process mean? It's just like, what's the task that you have to do? You know, so, kind of thinking about Scrum, you know, you have these different tasks that were on the scrum backlog, that's kind of a way to think about the work in process is like, Okay, what are those tasks that the team is responsible for? And what what you do and combine is you limit that to some level, and we'll talk about what how do you know, you know, what, what the limit should be, basically, you get that through, you know, experimentation of anyway, one of the key key principles is limiting whip, and then measuring lead time. So the average time to complete one item is the cycle time, you're kind of measuring that. And the goal is to basically optimize the process to make that time as short and predictable as possible. And typically, the way con teams that leverage con bond, the way they do that is breaking down the work into smaller, you know, smaller packages, but that's not always true. Sometimes you'll have a work package is very large and really doesn't lend itself to being broken down. And that's fine Conn bond, you know, can accept that. But then that also, you know, counts against the the whip limit. And we'll we'll talk about that in a minute. So what are the roles in Scrum and con bond? Well, as you remember, Scrum prescribes roles, a product owner, Scrum Master or an end the team that develops Team Kanban really doesn't prescribe any roles at all. So, you know, they, they've got the team they can have now because they, they don't prescribe any roles. That doesn't mean that a team that uses Khan bond can't prescribe roles. They just say, Hey, you know, you know, in Scrum, the develop the, you know, originators of Scrum. But it was important to define certain specific roles. And so they did did that compound says, hey, that's, that's not bad as important. So we're not going to say you must do it a certain way. Software Development, you know, iterations will Scrum is based on time box iteration. So typically, you know, from one to four weeks, and the scope of the iteration is, is fixed. So you know, that the team decides, okay, here's what we're pulling in off the product backlog for a particular sprint. And then that scope is fit effects. So Scrum is one single time box, you know, cadence combining three different activities, planning, development, and release, combined doesn't prescribe time box iterations, you know, that, oh, you only have a week to work on this or two weeks or whatever you can, and you can also choose when to do planning, process improvement and release. So, you know, obviously planning happens, process improvement should happen and release is happening. But in con bond, it's up to the team to figure out you know, how they want to do it. In Scrum, a team kind of snaps to some given length, maybe they start out with longer Sprint's like four week Sprint's and then they stay for a week sprints for quite some time. And then maybe they you know, back it off to three and two, but basically, they're keeping a similar cadence. Khan bond, you know, is doesn't do that, but Khan bond, you know, combine might follow iterations like Scrum, or they might have something a little different, where, you know, instead of every sprint, doing a retrospective, like in this chart, it's like, well, every fourth week, they'll do a respect, retrospective. And then planning is on demand, which just means Hey, we get together do some planning, okay, well, how about you know, Tuesday, you know, versus, okay, it's gonna happen on a certain cadence, it basically happens when it needs to happen. And then again, release on demand, when we're ready to release, we release. So a lot more flexibility, you know, in terms of the iterations and how they're managed. Con bond limits, you know, the whip per workflow state, I mean, this is the major concept behind a con bond, you know, if the major thing that is prescribed. Scrum has a way it has whip, but it limits it per iteration. So if you remember, you know, you've got the product backlog in Scrum. And the product owner says, Hey, this thing's prioritized. She has the stuff at the top is the most important product backlog. Item number two is number two, and so on. And then the product owner would say, Well, you know, here's really what I'd like to accomplish in this next sprint. And maybe it's a little more than the development team thinks that they could take on that at all, the team says, Well, okay, I see your priorities. But instead of doing, you know, one through seven, all we can really take on, you know, in this next sprint is one through four. So anyway, let's just say ABCD, they decide, okay, we're going to take in ABCD. And that's for that next sprint, or whatever. With con bond, you know, it's really geared towards the workflow state. So in this case, what this two represents here on this con bond board is a strict whip limit. So it means Hey, you can have never have more than two tasks that we're working on. In this particular, you know, you can think of this as the product backlog, this is where the work is happening. And this is something that's, you know, been completed. So this is where all the action is, you know, in the middle column ongoing. And it says you can only have two items here. So you got B, so C could then be moved in, you know, to start work. The team doesn't have to do that. So they could just focus on B, but they couldn't, what they what they're constrained is by they couldn't move C and D over and be working on three items at a time so they've got a strict whip limit. They've decided for their team based on past performance, hey, we're only going to work on no more than two tasks at any given time. So combine limits whip per workflow state. And in this case, we're just showing one workflow state, you know, for certain con bond boards, you could have a column for test, a column for release, you know, and so on. And so it really, there's flexibility on what those workflow states are. But you know, each workflow state has a given whip limit. And that's adhere to with Scrum, there's no workflow, limit meaning. So let's say this, the scrum team say, okay, we think for this, sorry, this sprint, we can do A, B, C, and D, but no more. Well, they could move in A, B, C, D, and start working on all four tasks at the same time. So they're not limited by a workflow state, but they are limiting the scope to the iteration. So that's kind of the differences, but they both have some work in progress, you know, limitations, con bond is just by the workflow state. Scrum is buying iteration, my points. And when I say iteration, I mean for a given sprint, which is that one to four week period where they're, you know, trying to develop, develop and tests and code. Okay, both Scrum and con bonds are empirical. So you experiment and adapt, adapt. So Scrum, you know, you've got cross functional teams, you know, and the fear Whoa, hey, who should be on the team? Well, you don't know, experiment, you know, a team will start out and maybe they'll have, you know, a three different competencies. Now go, you know, we really, you know, because our UI is so important, you know, we really need to have someone with that expertise. You know, on the team. So anyway, they'll they'll figure out who they need to, you know, that needs to be on the team. How much work? Do they pull in the sprint? Well, how much don't know, experiment, which means they'll pull in, probably more than they can handle on one sprint? And they'll find Oh, wow, you know, we're overwhelmed. That was that was too much, you know, and so then the next time, maybe they pull a little less, and maybe it's still too much. And anyway, after several sprints, they start to know what their team velocity is, and how much they can handle. And so they dial it in. Same thing is true with Kanban. So it's like, Oh, that's great. We've got this, you know, work in progress limit, but what should it be, you know, what should it be per state? So, so say, they start out. And so they have a strict limit of only one item, you know, and they've got a fairly they've got four people, you know, on the on that particular con bond team. And the four people you know, as you see down here are like, they're bored. They're like, wow, okay, that's not enough, you know, to keep four people busy. And so we need up the limit. Well, yeah, but what if they up to eight? Yeah, you know, maybe they're overreaching? Maybe not, you know, so. Anyway, that's what you know, when they say a lot of Agile techniques are empirical. It means that you get in you experiment and you adapt, you find out what's working, what's not working, you know, you get feedback, either on the team or from customers and you adapt. Scrum resists change, a change within an iteration. And con bonds a little bit more flexible. So what that means is, like, you know, in Scrum, the product owner has this product backlog, you know, prioritize items. And in this case, from this chart, the product owner said, A, B, C, and D are the most important things. And so the scrum team says, hey, yeah, we can work on A, B, C, and D, we can pull those in or whatever. But then the product owner comes in, like, you know, after the sprint started, say it's a four week sprint. And after week one, they come in and say, Oh, we need to add he, oh, he supercritical a competitor, just did he and we got to do IE, we got to get it shipped, whatever. No, that doesn't happen in Scrum. The team says, Hey, no, sorry, we're committed A, B, C and D for the sprint. But feel free to add it to the, you know, to the product backlog. So in this case, it wasn't the product owner, the owner had the idea, but you know, in a lot of cases, it could be. It could be anybody that says Hey, he is super critical, you know, and so what happens is it goes into the backlog, and if it is supercritical, well, it'll be at the top of the list for the next sprint. But there won't be any kind of scope change for this sprint. Con bonds a little bit more flexible. Con bond. says, Hey, feel free to add me to the to do list. And the limit right now for our ongoing stuff is, is two, and the limit for the to do is two. So hey, if you want to do E, you know, well, we're busy right now with a and b, but you could put it in the to do list, but you got it, you got to pull out either C or D, you know, because that's got a strict whip limit as well. So you know, but but it's more flexible, meaning you know that that could happen in a shorter period of time than then a sprint. So in that regard, it's a little bit more flexible with respect to change. The Scrum board is reset between each iteration. So you know, that makes sense, you kind of start with everything in a to do list and this stuff gets worked on, and eventually it's all done. And then you reset the scrum board and you stall or stall start all over again, by pulling in the next, you know, priority items from the product backlog. Kanban kind of always looks like this, you know, I mean, there's always stuff being worked on always stuff being released, always stuff being added to the you know, to do queue or whatever. So let's continue, you know, like, like, you know, the DevOps ideas, like Khan bond is often used with DevOps, it's just this continuing flow, you know, a bit from you know, from the left to the right to get it in the hands of customers. Scrum prescribes cross functional teams, you know, Scrum board is owned by exactly one scrum team, and, you know, contains all the skills needed to complete the iteration. Con bond may do that, too. I mean, they may have a cross functional team, you know, as well, but they don't have to, you know, they could divvy up, they could divvy up their Kanban board. And different teams are responsible for different parts of the Kanban board. But this is showing on the right is okay, maybe you get this, like a product owner type of person that's responsible for the to do list, you got the development team, you know, then you might have some group that's responsible for automated tests, and somebody responsible for the release process. So it doesn't necessarily have to be one, team it, but it might be, you know, so there's just more flexibility there. The Scrum backlog items must fit, you know, in a sprint. So, you know, we talked about that before, so the scrum team will only commit items they think they can complete in one iteration, and, you know, basically accomplish this definition of done so it's kind of in a shippable format, at the end of the sprint, if an item is too big to fit into a sprint, well then you know, then they gotta break it down into smaller pieces until it does fit. And, you know, if items tend to be big iterations will be longer, you know, so there may be something that you find, okay, well, it's too we we deal with a lot of, you know, development work that is hard to break down for whatever reason, well, then that team's probably going to be using longer Sprint's like four week Sprint's because they can't break down the pieces any smaller, in con bond, they, you know, they're trying to minimize lead time and level the flow. And so that does incentivize them to pry to break things down into smaller pieces, you know, so you can have this continuous stable flow of work, you know, in the pipeline. But there's no explicit rule that says that it has to be a small item. So you might have some really big long running tasks on a Kanban board, along with smaller stuff. But if you look at it, you know, the whip limits three, you see, okay, how many items you're, I'm working on two, I'm working on two, I'm working on two, I'm working on two, oh, here's 123. So you have these long running tasks, you know, that span a lot of time, but and they just count as you know, one work item. So you know, you could have a con bond board which has this type of structure, or probably, you know, more likely they're going to try to break things down into smaller bite sized pieces. Both Scrum and con bond are Lean and Agile. So, you know, they're both pool systems. You know that the scrum team is pulling maybe a little bit more, you know, into the sprint, but they're they're responsible for pulling those items in deciding what they work on. And then, you know, the con bond system Obviously has very strict pull mechanism where if there's if there's a specific whip limit, then it's a it's two items when they're just working on two items. And then when one's done, they pull another item, you know, from the backlog. Both Scrum and con bond are based, you know, they're pure technical processes. And they continuously try to learn and improve or whatever, which kind of ties to a term called Kaizen, which is a principle of lean, you know, kind of continuous improvement. And then Scrum and con bond emphasize responding to change over following a plan. Although con bond, you know, as I mentioned earlier, typically allows for faster response than Scrum. But even still, you know, compared to traditional software development, at worst, Scrum is like four weeks, you know, and then after four weeks, you can respond to some change, and then a lot of teams that are doing Scrum, if they're doing you know, Sprint's every two weeks or one week, well, you know, you can respond pretty quickly. So, so both, you know, still respond to change very quickly compared to, you know, traditional software development processes. Scrum prescribes estimation and velocity. So, in Scrum teams are supposed to estimate the relative size of the work that they're doing. And then they add up, you know, the size of each item, and they can kind of figure out their velocity, like a bit based on, you know, those, those estimates that they've come up with, well, how many, you know, how many story points do we complete, you know, in the last sprint, and then that can help them figure out how much work to take on them the next, next sprint, a con bond estimation is not prescribed. So whip limits, you know, are what's prescribed, but, you know, you got to have some idea of the work, you know, that's, that's part of an idea, you know, is part of a backlog item. And so, you know, in any event, they're trying to get the item as small as possible, you know, and break down, if they can break it down, they try to do that, so that they can get to some flow state, or the same number of items are being completed, you know, per unit of time. Okay, so that's, you know, that's Khan bond, and, and these of these Scrum, and gives you some ideas of the differences. And really, you know, there's a lot of differences. They're both ads or processes. And the key thing about con bond is just strict whip or whip limits. You know, rather than having a bunch of other rules, it just says, Hey, we're only going to work on four items at a time or three items at a time, that's what's going to be in process. And, and the way they hone in on that is by practice, I mean, they experiment. And then they get the, they get try to get work as small as possible. And then they get pretty good at their, at what their whip limits should be. Scrum has, you know, a few more, you know, rules associated with it, that aren't bad, it doesn't make it bad, just makes it you know, provides a little bit more structure for teams to to use. Okay, so now let's talk about Extreme Programming. So Extreme Programming was developed by Kent back. And when he was working on, you know, something called the C three, project in 1996. And then he wrote a book on it, called Extreme Programming explained, think he wrote a paper and then the paper then turned into a book. And he published that in 1999. So Kent Beck was also, you know, one of the signers of the Agile Manifesto. So he was kind of seen as a thought leader in the industry. And so he was invited, and it was part of the agile, you know, movement. And what you'll find is we just kind of review this briefly is there are a lot of really engineering practices that Kent Beck recommends, that are extremely popular today, you know, so this is way back, you know, 9699 I mean, he was way ahead of his time, in terms of, you know, some of the suggestions that he had to improve software development. So, you know, he had the same model, you know, similar models like Scrum, of having these iterations, small releases, getting customer feedback, and we'll kind of talk about that. I mean, he, he, you know, is adamant that a customer Be part of a team, you know, it was basically similar to the product owner, saying, here's what's important, you know, and kind of setting the, you know, setting the priorities. So anyway, it's based on small iterations is kind of the concept of extreme programming. And the values that you know, that he highlighted were communication, you know, getting people to talk to one another with face to face communication, make making work transparent. So similar to like a scrum board or a con bond board, let's, let's, let's have, you know, a way to communicate the work that you know, is in process and what's been completed. Another key value is just simplicity, you know, just do the simplest thing that will work, you know, don't try to kind of go overboard, whatever, just come up with the simplest thing that will work. Some of you may have heard of this, you know, term Yag MI, which stands for you ain't gonna need it. And what that is, that's kind of a, you know, a coding best practice, which says, as a developer, sometimes there's this temptation to, you've got some requirement, and you need to implement that in code, he go, you know, yeah, that's a great requirement. But you know, I bet, I bet, they're gonna also need this, this and that, okay. And so I'm gonna add in some structure in my code, to be able to accommodate, you know, these other things that I think they will need, at some point in time. And what yaghi says is, you know, you ain't gonna need it, you know, don't don't do that, you know, just just focus on the requirements you have from the customer, you know, and in this case, basically, just do the simplest thing that you know, satisfies those requirements, feedback was important, you know, so through constant feedback teams can improve. So similar to you know, Scrum and DevOps feedback is emphasized. And then courage, you know, effective action in the face of fear. So, again, you know, going back into the 90s, you know, it was maybe more of a culture of just shut up and do what we tell you to do, you know, maybe that's a little harsh, but you're probably closer to that, then, you know, be outspoken with, hey, this is broken, and we need to fix it, you know. And so anyway, he encouraged, he encouraged courage, and then respect, you know, if you're gonna have good communication with one another, there's got to be respect on the team, he did prescribe some roles. So the customer, again, you wanted a customer on the team to make business decisions. But you know, regarding the product developer, which again, you know, it's kind of similar to Scrum, a cross functional team, responsible for, you know, realizing the vision, the stories that the customer had, the tracker, keeping track of relevant metrics, you might think of this is like a project manager type of role. But somebody that's, you know, keeping track of important metrics, whatever velocity reasons for changes to velocity, amount of overtime, worked on passing, and failing tests is, you know, kind of a source of feedback, structured feedback for the, you know, for the team. And then the coach, you kind of think it was like a scrum master type of role. There's somebody who understands the process, in this case with XP, and then how to roll that out within an organization, it can mentor other team members, you know, to help improve the process over time. And now, here, we get into some of the, you know, kind of the engineering practices, which I mean, these other things, you know, have been adopted as well, but, but kid back was kind of unique, you know, in really a long time ago, thinking, Hey, we need to have a test first program, you know, this is the whole idea, it could, you know, you might have heard the term test driven development, it's a similar concept, but basically, you know, come up with a test that, you know, you would use to evaluate your code, you know, have that fail, then develop code, you know, that will then pass the test, and then rerun the tests, you have to verify that your code passes the tests, whatever. So, kind of thinking about quality, right, from the get go, you know, right at the at the source. Another idea was continuous integration, the whole idea, you know, integrate new code into existing code base daily. And I can tell you, you know, in the 90s, this was well ahead of the curve, I mean, you know, in the early 2000s, like Microsoft, I mean, you know, you might have weeks of development, and then you do a bill and then I lived through the problems of that, you know, when you Got a lot of code that's been checked in and integrated the same time, it's almost inevitable, something's gonna break, you know, and then you're gonna have a whole lot of time to figure out what went wrong. And so anyway, by having, you know, smaller, more frequent builds, yeah, you'll still have problems, you know, but they're easy to fix, because you didn't know what changed. And, you know, okay, let's go, why, you know, what was the problem, and you go in and fix it. So, you know, he had this concept of the 10 minute, you know, Bill, being able to build and test new code, you know, in under 10 minutes. Yeah, you know, kind of a principle, collective code ownership. So anybody could go in and basically modify, you know, another part of the code base to make it better. You know, you can imagine, I mean, in some, in some organizations, culturally, that can be hard to swallow. You know, I mean, people were very protective of the code that they've developed in the culture and XP, it's like, hey, this all represents us, you know, so if this goes out, this application goes out, and it doesn't perform the way it needs to perform, that's a reflection on our team. And so everybody should, you know, have an incentive to make sure this is going to be the best code possible, which means you're familiar, you know, with, with the various parts of the code base, even if you're not the one that, you know, wrote it initially, programming in pairs just is something where, you know, somebody be a driver is actually coding, and the other person is like, doing a code review, you know, real time code review, you know, code reviews are kind of a common best practice and software development, you know, to find errors. In XP, you're kind of doing this in real time, and then the roles would switch, you know, somebody else would be the driver, you know, developing the code, and somebody else's, is reviewing it. And, you know, based on the studies that I've seen, you know, you certainly don't save time with this. Because, I mean, it takes it takes longer, but you get the higher quality code. And that's what I've read, the other thing that you get, and I'm not sure you know, how I would like this, you know, I've never, you know, I've basically been in management, you know, so I've never really done this myself. So I don't know how I would like it, but supposedly people enjoy it better. You know, if they programming peers, they have higher job satisfaction, so you have to decide for yourself, you know, if that would be true for you some other rules and practices or coding standards, you know, rules and guidelines, reformatting, you know, the code to make it easier for everybody to understand the on site customer, which I mentioned before, and just relentless testing, so unit tests, functional tests, and automated tests as much as possible. So, you know, these are some of the things that, that, that he talked about the reflected, you know, kind of engineering best practices. And the thing they had, and they have an XP is a weekly cycle, kind of similar to an iteration, you know, like a scrum iteration. And they had a quarterly cycle, which was meant to be like a release, you know, a release cycle. So with XP, it was kind of, you know, weekly development and testing, and then quarterly releases. And then the other thing that he had was putting some slack in the system, you know, so you didn't have these forced marches at the end of, say, a quarter, when you're trying to release the product. You know, there was some slack in the system so that people could have good work life balance. So anyway, so that's XP, you know, XP and con bond. And like I mentioned, well, both are being used heavily. Now con bond is become, I think, very popular, especially in the DevOps environment, and XP, you see XP and DevOps, but in all different types of development efforts, you know, where you've got continuous build continuous integration and deployments. Okay, so let's wrap up here with the class project. And the next deliverable, which is the storyboard where hopefully you, you know, as a team, you kind of come up with some innovative ideas, you know, and you've been able to use your crazy eights, you know, the Google venture process, to kind of capture some of those ideas may be related to your, you know, the focus area for your, for your particular sprint, and you'll have the storyboard. The storyboard is going to have you Know various elements, it's going to be a flow that you're going to take, you know, a customer through, that will be using your application. And like I mentioned last time, you know, you don't want the flow to spend a whole lot of time on, you know how to set up an account or that kind of stuff, you want to get to what you consider to be the meat of the application where you're trying to get the most feedback or whatever. And yet, you're gonna lay out this flow. And let me go to this thing, you know, you don't have to have something like this. But, you know, this is a way to kind of map out like, Okay, I'm going from, you know, how is the customer going to discover my application, oh, they're going to read about it in the Wall Street Journal article. And then they're going to go to some online trial, where they're going to, you know, be able to click a link, you know, and be able to do this online trial. And then when they get into that, they're going to see an example of a capture page, then they're going to go and this particular application was a productivity app, this guy wrote a book about, you know, how to improve your productivity. And so this team was going to develop a mobile app, you know, based on that book, or whatever. And so anyway, this is a way to guide, you know, the flow through as the customer would experience, you know, how they were using the app or whatever. So they had an example of a capture page example of items, sorting, you know, and so on. So obviously, you're at your flow is going to be different, you know, based on what you're trying to do, you know, in your application. But ultimately, your storyboard will be the flow like this. And then when you actually do your prototype, it's going to be a PowerPoint, it's going to be a refined version, you know, we call a facade of the application. And but it's going to track what you do in the storyboard. So what you're trying to do is figure out, Okay, well, you know, what's this flow going to be? Okay, you know, how do they find out about us? And then how do they go to get into the meat of the application where you're going to have most of your, your content? And then you come up with, you know, these diagrams, which is diagrams or in text? They kind of describe to you, your team? Okay, well, yeah, here's what we're going to do on, you know, the third slide, the fourth slide, and so on, whatever. Anyway, you know, last time I mentioned this hack of the gv sprint storyboard process, you know, so you can go to this link, where AJ and smart basically, you know, did that storyboarding hack, and it can kind of help provide some structure for the, you know, for the process. So, you know, again, hopefully, you've gotten some creative ideas or whatever, you take that come up with the flow, and then map those creative ideas, you know, into that flow. And then, you know, you know, divvy up the responsibility for like, if somebody is going to refine their sketch, you know, they're working on the sketch that might be relate to nine and 10, you know, like, on this on this chart, something like that. Okay, so anyway, that's, that's what's due on lesson eight is a storyboard lesson 10 will be the prototype. And, you know, in lesson 10, after the final, there'll be the walkthrough of the prototype. And the way this will work, is, again, you know, whoever the, you know, the person is, it's going to lead through, you're gonna, you'll get some extra credit for taking that responsibility on for the team. And then you'll kind of walk through the sequence. And you'll introduce your, you know, your team team members, describe the focus of the application, hey, who the primary customer is, as you would you know, if this was a real test, who you'd be demonstrating it to, and then I'll takes about 45 seconds, so we can get into the meat of it, which is conducting the walkthrough, and then hopefully allowing some time at the end for some questions on the app. And then also, you know, similar to like some of the polls I've done. So far, we'll have A People's Choice, you know, award where you can vote on your favorite app prototypes, but you can't, you can't vote on your, you know, your own team's app. So I'm gonna restrict that. But this is a way for you to kind of say, Hey, I'm the different apps that were demonstrated, you'll be able to vote on what you thought, you know, what you thought the best one was. So anyway, so that's what the wrap up getting to lesson 10. Any questions? And I, I'm working, I'll have your you know, the second deliverable graded this coming weekend on Sunday, and I'll send that out to you or whatever. But I mean, you basically just need to proceed, you know, on what you want your app to look like, and, you know, develop the storyboard along those lines. Okay. Hey, Jeff, quick question about the final, can you tell us a little bit about final? This is your chance to get ready for it? You know, it's early, but thank you. What about the final? Oh, how is the structure going to be the final? It's going to be similar, you know, to the midterm. In that, you know, it'll have the true false multiple choice, but then the short answer, and some of the short answers will be tied to, you know, a diagram that you're looking at, and then need to understand the answer. So it'll be very similar to the midterm. And then, yeah, so that's, and then I'll go through in lesson nine, we'll do you know, a review of the key things that you need to prepare for, for the final effect. Thank you. How are you guys doing on the storyboard? I mean, you know, that the first two deliverable, I mean, the first deliverable is to say, Hey, here's what we're doing. You know, and then you kind of come up with your s, your guesses for the, the business model canvas, so it's, you know, it's not really in the high degree of difficulty category. The second, you know, is a little bit more difficult. But now we're getting into the heavy lifting where, you know, you got to come up, you know, really the Create, which, well, the heavy lifting, but I think the funner part of it is like you've got this concept for the app, you know, your application concept. And now, you know, you got to have some creativity, you know, to figure out, Okay, how are we going to make this thing, you know, really pop, so that a customer would be excited and would want to use it, you know, on a regular basis, or whatever. And that's hard. I mean, if that's why, that's why one a lot of people, you know, don't do startups, because it's hard, you know, and it's a, it's a lot, a lot of work, whatever. So anyway, let, I'm trying to provide, like, what the storyboard, you know, in the end, some of those links, some structure, so, you know, okay, here's what you need to do. But basically, you know, you're just walking somebody through the app, and it's just kind of important to get that flow defined, so that you could divvy up the work, you know, and say, okay, who's you know, and some of the work obviously, should have been done with the sketches. But you know, you're probably gonna have to go revise the sketches and update them or whatever. And so you need to make those work assignments. So if any of you guys feel overwhelmed, or you know, you need a little a little additional help, or guidance, I'm happy to provide that. So just let me know, you know, happy to do a call with the team, you know, or answer questions through email. Okay, all right. Well, I'm really looking forward. I mean, it's always fun to see what the teams you know, come up with for the for the application, you know, kind of know what you're doing, but, you know, to kind of see it come to life, you know, with the PowerPoint facade. Okay, cool. All right. Hey, everybody, we'll have a good week or whatever. And like I said, I'll have your deliverable number two for the project graded on Sunday. Okay, good night, everybody. Good. Thank you. Bye. Thank you. Okay, I think we got a quorum. few other people still join joining. Okay, how can you guys hear me? Okay? Yeah. Okay, thank you. Okay, let me share the deck here. Okay, so here's what we've got planned for the night. Again, we'll talk about the kind of key concepts from last time. And then this lesson and next lesson, you know, we're kind of talking about more traditional software project management, which probably tends to be more, you know, documentation waterfall, like, I mean, there's certainly things that we'll cover in the next two lessons that you could use with agile methods as well, whatever. But traditionally, you know, these approaches have been, you know, come with a lot of upfront planning with the documents that are created, and then those documents, those specifications, will, they're handed over to the development team to then implement. So anyway, that's kind of we'll be covering tonight. And then the next lesson. And such tonight will be you know, product planning, vision statements, scope, representation, feature trees, how you capture, you know, and then document requirements. And then one of the ways to kind of Finally, you know, take requirements this year from customers, you turn them into use cases and use case specifications. So, that's what we'll cover tonight. And then briefly just talk about the class project next steps, and basically creating the prototype and, you know, kind of what the expectations are around that. So we were talking about cloud computing and DevOps and and then last times, like, well, what are some of the tools needed to basically, you know, implement DevOps and or that would help with implementation of DevOps. And so, you know, these are some of the things you know, where you need tools to help you develop the code, basically, integrate that code in a quick way, and then be able to automate a lot of tests that you that you run. So obviously, if you're doing more frequent check ins and code integration, you also want to make sure you get high quality code. And so there's maybe automated regression tests that would be performed before that code is released into production. And so anyway, there's a variety of tools that have been built up around kind of the DevOps process approach to make it more efficient. And then, like we talked about last time, whether it's Amazon or Microsoft, they all get that. And so they're providing, you know, those tools to companies can leverage to leverage their cloud platform, but then implement, you know, DevOps on their cloud platform. And we talked about, you know, con bond, because con bond is, it's an agile method. And it is frequently used with, you know, DevOps or in environments where there's just, you know, ongoing code integration, you know, into production. And so we kind of looked at that visa v Scrum, and I, hey, where do these things fall in the hierarchy? So con con bond is very adaptive, very flexible, there's not a lot of specific rules. Like I mentioned last time, I mean, even though there's no specific rules, and a lot of things that are like you know, mentioned in the scrum would be would might be leveraged or whatever, but it just you know, is geared toward organizations that are maybe more sufficient. indicated and then they can adjust in real time, you know, what they, what they feel like what processes they need, in order to be the most effective. So anyway, here's this, you know, spectrum where both Scrum and Kanban are fairly adaptive, you know, and then if you get over, certainly like over a waterfall approach, or rough, you know, much more prescriptive in the way, you know, you have to develop your code. So, you know, what is con bond, I mean, it's basically, the reason it kind of ties to DevOps, or cloud software development is just like this pipeline, you know, you got this backlog of stuff over here, that still, you know, is prioritize, and then you have some limits. And the whole idea behind Come on, I mean, really, is that you've got very specific work in progress limits. So they still like visualization, kind of having this con bond board. And then they put specific limits, like, hey, can only be two items, you know, kind of in the queue, three items that are being worked on at one time. And, and that's how, you know, they basically focus is by having these strict whip limits. And then you they measure the lead time, the idea is that you've got these bits, you know, that, are you this code that is just kind of going through this pipeline, and how long does it take us to, you know, produce that next unit and, and so that's why, you know, Kanban, they don't say, okay, you have to break it down into small, you know, bits and pieces. But typically, that's what happens is that, you know, similar to Scrum, you know, is this stuff gets prioritized, you're gonna have to break it down into, you know, similar size objects. And if you do that, then you can measure that cycle time of, hey, how long does it take us to complete different items. And the goal is to just have you know, that that cycle time, be as small as possible. So this is just like a stream of, you know, it's like it was fluid or oil or electricity. I mean, it's just this constant stream of software, you know, that it's getting out into customers hands, to, you know, make them more productive. So, really, it's this limit, you know, what makes commonbond special, be strict. Whip limits is really no, kind of a key difference. Are there whip limits with Scrum? Well, yeah, but Scrum limits the whip per iteration. So you remember, you know, when the scrum team, the development team, they basically say, Hey, here's how much work in the next sprint, you know, say the sprint is going to be two weeks, that's the duration that they've been on. They know, hey, here's how much work we can do in two weeks. And so they pull that off the product backlog into you know, their, their sprint task board. So that's what they're working on. So it's a pull system, it is limited in whip, but it's a little different. They don't limit the whip per workflow state in Scrum, or Kanban does. So what that means, you know, like I mentioned last time is, you know, these guys could pull in ABCD, and they could work on ABCD, all at once. Versus here. It's like, No, we got strict limits on rolling and work at two items, you know, at a time. But, you know, like I mentioned last time, you know, both of these are adaptive techniques, you know, agile and adaptive. So they'll dial in how much whip, you know, with con bond, how much whip they can handle, you know, at at one time, and, you know, experiment. So, like, for example, we used last week was like, we'll say they had one, and they had they have a pretty big team was saying, Hey, we're bored, you know, we can work on more than one item at a time. Okay, well, then they go to two or to four to eight. And sometimes, then they'll find it's like, hey, there's just too much. You know, our cycle time is slowing down. And so they'll get to the, they'll basically iterate until they get to the right whip limit. Same things happening over here. The team figures out, hey, what's our velocity? How many product backlog items story points can we work on in a two week sprint, and they'll dial in what that right level is for them? Both Scrum and con mon are Lean and Agile. They both pool you know off of product backlog versus having something just forced on them. And they're based on you know, learning you know, a continuous empirical process where they experiment and learn and They respond to change, you know, you could say the con bond reacts a little faster, you know, because, you know, once that whip limit in the ongoing is, is done like that previous chart, I mean, they could pull in, yes, say there was something that was like g item G, it can all of a sudden just pop up to the to do top of the list and then be pulled into ongoing versus Scrum, you're limited to the sprint durations, you know, and you can't have the shifting priority, basically, within the sprint, you have to wait until the next sprints, but still, it's pretty short. You know, I mean, it's not like, you're waiting months and months or waiting, maybe, you know, a few weeks. Then we've talked about extreme programming, and you know, it's an iterative process, you know, with small releases similar to Scrum, and con bond, kind of the greatest contribution, or, you know, maybe the bigger contribution of extreme programming are these key practices, you know, test driven development with unit tests, pair programming, continuous integration, and then ongoing refactoring, you know, not not basically having technical debt in your code and saying, hey, that's okay, we'll deal with that later. No, you go in, and you refactor and you fix that, you know, technical debt on an ongoing basis. So, you know, that's what's impressive about extreme programming, is Kent Beck was basically figuring this out in the 90s, you know, and now, it's just, I mean, it's part of if you, you know, if you remember, from the DevOps discussion, all these things, you know, are being used as part of the engineering best practices. Anyway, so that's, you know, we're kind of key concepts from last time. Now, we'll dive into this kind of more, for lack of a better, you know, category, traditional software, project management. And so you've got this sdlc, cycle planning, analysis, design implementation. And in the planning phase, you know, you're trying to figure out, hey, you know, should Why should we build the system? What value does it provide? What are the business requirements and scope and resourcing for the system, so you're trying to decide if you're going to do something. And then once you make that decision, you go out and capture data, you know, and then you analyze that data and come up with requirements. So, you know, a lot of the focus for software development, and then what we'll talk about, you know, tonight is like a requirement generating requirements and use scenarios, and maybe coming up with user personas to represent your customers, things like that. But there's a whole lot of other stuff that is happening within a company to figure out what products should be, you know, should be launched. So understand the in a lot of times, this is a marketing product management organization, is doing a lot of this work, you know, they're figuring out what the key problems are that customers have out in the marketplace. What's the competitive landscape look like? You know, who are the competitors? What products do they have? And then that informs a strategy of like, what kind of product portfolio should we have? You know, so, you know, if you're like, a Microsoft, and we're getting in productivity, you know, application, say, Well, hey, we need like an Excel type of a product, and you know, a word and a PowerPoint, or whatever. And so you have this portfolio of products. And then within a given, you know, area, you'll have a roadmap like, Well, you know, what are we doing on Excel version, you know, x and then x plus 1x plus two, you know, that type of thing. And this was certainly true with packaged product, you know, where it might be a couple a year and a half, two years before you would release another version. But it's still true today. I mean, you still think about, okay, you know, what is our roadmap, what would be what's a good timing for the next release? What are competitors doing all that kind of stuff. So this is something, this is a company, you know, called pragmatic marketing. And if you go to their site, you'll see this tool. And if you want to learn more about what he what exactly happens in win loss analysis, they have an interactive page, you could click on it, and it'll pop out, a pop up, here's the kind of stuff that, you know, should be happening if you're doing effective win loss analysis, or whatever. So, for technology products, software in particular, this is a really good framework to look at, you know, if you're trying to broaden your horizons and going okay, I'm working in this company and we're developing different software products but what has to happen To really launch a successful product, these are the types of things that you know have to happen. And this is kind of like, early in the cycle, you know, and this is like, Okay, you've launched a product, and now you're trying to sell it, and then you get out to, okay, we have sold it, now we're trying to support, you know, our customers or support our sales channel, that kind of thing. So, anyway, you know, it's kind of interesting, they've got courses, where they, you know, they basically, you know, teach different techniques, you know, associated with all these different work items, or whatever. So, anyway, you could take a look at that, and then learn more if you wanted to. Okay, so for a traditional software, project management, you know, things will always kick off with, like, a vision and scope document. And so, this was quite common, you know, there's gonna be, hey, the next release of the office product family, there might be, you know, a vision document, and it may not have all of these elements, whatever, but would have, you know, a lot of them. And basically, it's setting the tone and the strategy for, okay, the products that are being released. And so it has these different elements, you know, business requirements, scope, limitations, and then business context. So, you know, for business requirements, you may have the background, providing some background context on the new product that's going to be launched, what the opportunity is one of the specific business objectives and success metrics, and then some type of a vision statement, you know, where, and we'll go over a specific format, is a concise statement of what you're trying to do with the product, what the risks are, what are some assumptions, you know, and dependencies. So here, you know, might be an example of one for a cafeteria ordering system. So this is a case where this would be like an internal application that a company is developing. And so there's this company called process impact. And they've basically got a large campus, and they've got a cafeteria, you know, on that campus, and, you know, some employees have been complaining about, you know, hey, it takes a lot of time to go pick up my food, you know, hike over the cafeteria, pick up my food, a lot of times, I don't get the selections that I want, you know, I'm not really excited about the quality, the food, and so that's kind of the background. And so, you know, the opportunity is, you know, looking for a system where, hey, they can order the food, and have it just picked up, you know, I've been waiting for them, or have it, you know, delivered. And then, you know, also this idea of, hey, there's local restaurants around the campus, I mean, could you develop the software that also had a tie into those local restaurants? So I basically would have more choices, you know, I can basically order, you know, from some local restaurant, and how have that delivered as well? Well, you know, the, the business objectives for this are, you know, one key one that the company has is the way to reduce, you know, food waste. So you could imagine, you know, if we're running this cafeteria, may be kind of hard to guess what, you know, what people want. And so there's a lot of waste at the end of the week. And so if we had some software, you know, a system like this, where basically, hey, we'll, we'll cook up what they want, you know, and then adjust over time, you know, based on that tool and the information that we gather from it. So we can reduce the waste, you know, reduce cafeteria operating costs by 15%, increase average effective work time by 15, you know, minutes per cafeteria using employee per day. So this is like, Hey, I don't have to walk over, you know, in some cases, and pick up the food so I can be more productive at my guests, that kind of thing. And then you might have things like success metrics, where it's like, well, gee, how do we know you know, that this is working or not? Well, you know, basically, use it. If people are using a tool, that's always a good sign, you know, that, that you're onto something so that basically the tool is being used. And then of course, you know, another metric might be that you do these satisfaction surveys, and you get a bump up, you know, after the tool is released. It's like, Hey, you know, people are really excited and And you see some bump up in that in that poll. So anyway, this is just kind of an idea of, Okay, well, okay, I create this vision stock, a scope document, what's the type of stuff that might be in it? One of the things that was mentioned there is business objectives. So we spent a little time on what do you mean by that, you know, what is a business objective. And this just kind of walks through, you know, an example, again, this would be for like an internal application that was developed at a company. This particular one is for a chemical tracking system. So this, this company, makes chemicals. And, you know, and obviously, they make those chemical, they have chemicals they bring in, you know, and then they mix them together, you know, to create some some new chemical. And so this is like an analyst going and basically interviewing an executive that's kind of asked for a better chemical tracking system. And so you kind of look at the questions. Hey, well, you know, what motivates your interest? Well, managing chemical inventories, man, like cost too much, it is inefficient. Well, how much would you like to reduce your chemical expenses? Well, by about 25%, within one year, so they Okay, now we know, you know, at least financially, you know, some potential savings that we're trying to, you know, accrue. And then it's like, well, well, what's stopping you? I mean, why can't you do it today? what's what's causing the high cost efficiency? Well, we buy unnecessary chemicals, because we don't know what we have an inventory, we discard too much unused material that has expired. So you know, they don't they have an inventory, you know, so that's an obvious problem, where you could have waste, and then these chemicals, you know, they have a shelf life. And so, you know, but if you're not, if that shelf life isn't track somewhere, then you could have a lot of chemical that expires, you know, then has to be thrown away. And then finally, say, hey, what anything else I should know. And so placing orders is complicated, take users a long time, the government reports we create or manually generated, which takes far too much time, whatever. So, you know, typically, like, if it's an internal app, or external, you know, you talk to customers, and, you know, it's pretty easy to, for them to tell you, Hey, I got a problem, you know, and then they don't know necessarily how to, to get into the specific requirements. And that's where, you know, somebody goes, in this case, saying, as a business analyst, or whatever, and basically asked them a series of questions. And through that process, you clear it out, in this case, what the business objectives are, what some of the pain points are, that can then, you know, help you start to generate requirements for what this application should do. So, here are some examples of business objectives, you know, you kind of have like financial, you know, which tend to be more quantitative and non financial, which sometimes can be, you know, it can be quantitative as well, but also qualitative. So, like for financial, you know, it could be, hey, you want to increase your market share a certain percentage within a certain period of time, or you want to, you know, sell certain number of units or generate a certain amount of revenue, you know, in a certain period of time, or, you know, achieve a certain percentage of return on investment, within a certain period of time, if it was that chemical tracking system, you know, by reducing your costs by, you know, a large amount, you, you know, you could pay for the system quickly. So, that's kind of goes to the ROI calculation, non financial, you know, could be tied to, like customer satisfaction, you know, metrics, things like that, or it could be like, in the case of that chemical tracking system, you know, you don't want to break the law, you know, so you basically need a system that's going to help us comply with federal or state regulations. So these are the things that, you know, kind of tied to, you know, business objectives. And whether it's an internal app or you're developing a, you know, product, a commercial product, you're going to have some of these, I mean, you know, otherwise there's no reason, there's no reason for you to go to the effort to build, you know, create the application. You know, you're either generating some money or some market share or, you know, the lottery of applications, at least initially, it was about eyeballs, you know. So it could be like about adoption, you know, a lot, you have so many users, and these users are very active, they use the application so many times per week, that kind of thing. And then, you know, ultimately, you want to get that to be financial, which obviously, like a company, like Facebook has done a pretty good job of that. And Google, you know, as an example, but initially started out as just a eyeballs, you know, getting a lot of people using the application. And then, you know, another element of the vision scope document is a vision statement. And so this is a basically a concise statement, that covers it has certain things that it covers, it's like, well, Hey, who's the customer? What's their main need? You know, What, are you gonna call this thing? What type of product? Is it? What are the main capabilities, you know, that this product is going to have? Like, what's the compelling reason to buy? And then, you know, what are the alternatives? You know, and the, the, how are you better than the alternatives? Well, that's quite a lot, you know, but look, you know, you can actually do it, you know, I mean, so, I strongly encourage you, if you're working, you know, on your own application, you know, as a startup or at a company, and you're asked to build some new application to do this, because if you can't do this, it basically says, you don't really quite have enough focus, you know, you're not really sure exactly what you're supposed to do. And if you can do it, then it does, it really provides some nice boundaries, you know, for for your development effort. So let's look at, you know, this cafeteria ordering system, one in more detail. So, here's the vision statement for employees. So the target customer, you know, our employees at this company called process impact. And what's the statement or need? Well, they want to order meals from the company cafeteria, from local restaurants online. Okay. Yeah. Okay, we got that. What are you going to call this thing we're gonna call the cafeteria ordering system? It's an internet based smartphone enabled application? And what's it going to do? It's going to accept individual group meal orders, process payments, and trigger delivery of the prepared meals to a designated location on the process impact campus? Well, is it going to do more than that? Well, yeah, you know, once you build the application, you know, there could be a lot of other kinds of capabilities, or functionality within the application. So you're not trying to like boil the ocean and list every single thing that this application is going to do. You're just trying to get the core stuff, which is, hey, you're going to accept orders, process payments, trigger delivery, you know, at a certain location on this campus, it'll say, okay, you know, so we've got some pretty good boundary conditions on what this thing is going to do. And it's saying, hey, Kay, unlike the current telephone and manual ordering process, the people that use this system will not have to go to the cafeteria to get their meals, which will save them time, and will increase the food choices available, you know, to them. So anyway, they're obviously variations on this, but you can see how it's super concise. And it covers these, you know, different elements, whatever, which are important to know, if you're developing, you know, software application. Okay, so that's kind of the business requirements, part of this of this document, then you might have a scope and limitations, where you're going to get into the major features, maybe, you know, have some ideas on what your initial release is going to look like, and then your cadence for, you know, subsequent releases, and in the limitations and exclusions. So a tool that's, you know, can be used to help you, you know, understand the scope is this context diagram. And so, it's like, in this case, this is the chemical tracking system. And you'll notice, you know, it doesn't tell you anything about what's happening inside the chemical tracking system. It's just saying what's interfacing, you know, with the system, and it's, it could be people, you know, or it could be just actual system. So it can be like a barcode reader has to interface this thing is if I scan a cat, I can scan the barcode on a chemical, this chemical tracking system has to be able to accept that. Well, you know, we're also going to be dealing with buyers who are going to go out and buy you know, replenish chemicals, buying new chemicals. And so, you know, they have to be able to, you know, order, and then check their requests and things like that. So this document is just trying to say, hey, what are all these different systems or people that are going to interface with the system? And what is it that they're trying to do. And, you know, once you, you know, you kind of create something like this, you know, you don't know exactly how you're going to do it all yet, or whatever. But you're getting a good sense of, you know, the types of things that the application, you know, would need to be able to do. So you're looking at these, what are called external entities that the application needs to work with, or whatever. So anyway, so that can be kind of a useful diagram, again, to try to set some boundaries on what the application has to do. But again, I'll highlight that the system, the chemical tracking system, there's no definition yet of what's happening in there, all you're doing dealing with this context diagram is external entities that are going to interface with the system. Another tool that's useful, you know, at this stage is a feature tree, which is a way at a very at a high level to describe, you know, what some of the functionality that we think we need in this application. And so this is sometimes referred to as an Ishikawa diagram. And in this case, it's being used to kind of show a hierarchy of functionality within the application. So it's really pretty simple. You know, again, we're on this chemical tracking system. And so so Okay, I'm gonna just have this little oval and say, okay, is chemical tracking system is what we're talking about. And then it's got a spine, and then off the spine are the major types of functionality, okay, and that's what's identified in these boxes. So at the top level, at a high level, it's like, what is this chemical tracking system have to do? Well, it's got to help us order chemicals, it's got to help us with reporting, you know, health and safety, you know, kind of capturing health and safety information, and then, you know, reporting that to government agencies. And then, you know, like, when the executive said, Hey, we don't know, our inventory, we don't know what we have, well, we got to have accurate inventory management. So at the top level, these are the kind of the functionality categories at the top level, then if you go under that, you say, Okay, well, for ordering chemicals, what's some functionality that's important? Well, you know, maybe I want to search, I want to be able to search and find out what chemicals are available, like within a catalog, or maybe you know, at our preferred vendors, or within a local lab, you know, maybe there's some custom chemical that I need to create, or I need access to, it's not in the catalog. And so I need to be able to go to a local lab. Well, okay, so that's search. So you know, you got this is the top level, this is the second level, and then underneath it, you know, you have that third level, it could be like, okay, over here, get request to chemical, I got to request it, I may want to cancel my request, I may want to change my request, I want to track where my request is. So these are all very logical. It's just kind of a hierarchy. And again, you know, is it exhaustive? No, but you're capturing, you know, at least at this level, what you think the main functionality needs to be. So in a minute, we're going to talk about elicitation, which is a fancy word for saying you go out and talk to customers, and find out, you know, what, what they need in the applications. And, you know, you'll capture that information. And then some of these categories may start to present themselves, whatever, you can come up with a feature tree representation, and probably, you know, like, all this stuff, you're not going to come up with it, and boom, you're done. It's like, no, you're going to iterate on it, iterate on it, iterate on it. And then finally, you got some, hey, this looks pretty, this looks like a pretty good structure. So anyway, this is a example of a feature tree, you know, that was for the chemical tracking system. This is for the cafeteria ordering system. So at the top level, you know, what do we need to do here? Well, Megan, to order meals, you know, I want to have access, so different ways to access. I may want to set up a subscription, you know, and so I need to have a capability to be able to do that. For the cafeteria staff, you know, I may want to have some menu options where I can go out and, you know, obviously, you know, change the menu and things like that. So, you know, you can order meals, that's the top level, what's the, you know, what's the next level? Well, you know, I ordered meals in the cafeteria, place, order, change order, cancel order, oh, local restaurants, same thing, you know, place cancel, change, or just view my order history now, so that those are kind of branches off of this main line function, you know, the, the main requirement, which is being able to order meals. So, again, I think you get the idea, it's pretty simple structure, the application name, the main spy, you know, the main spine, and then the offshoots of that, which is the major functionality. And then underneath that, you know, a little bit more specificity of the type of capabilities we need to have in the application. And then finally, a business context, whatever, where you may have stakeholder profiles, and stakeholders, again, kind of a fancy name, it's not just customers and customers, but people groups, organizations that are going to be involved in the project, and then affected by its outcome. So you know, you'll typically use the term stakeholders, you'll have internal stakeholders, you know, different groups that are going to be very interested in the outcome of the, you know, the project. So, like it was an internal project. And you have, again, this company that makes specialty chemicals? Well, the executive that's responsible for the specialty chemicals is the stakeholder, the CIO, you know, that has the development team that's going to actually develop the application, and certainly, you know, a stakeholder. So you that kind of gives you an idea of like, Hey, we talked about stakeholders, who are we talking about? And then you'll have project priorities, you know, which is okay, what are the features, quality schedule costs and staff? And, you know, underneath that, you'll have constraints, there can be some limiting factors of Okay, maybe it's the size of the team, or the money available to develop a particular application? What's the driver, you know, kind of what are these the key success objectives? So like, with that chemical tracking system, the guy wanted to save some money, you know, I mean, so it's kind of a budget item, he's like, he's looking at as what's called a p&l profit and loss. And he knows how much revenue is he's generating. And he's unhappy about his cost, because that basically limits the profit that he can provide. He's like, you know, he's getting pressure to, you know, to be able to generate more profit. And he's thinking, well, I don't know, if I, I might be able to sell more specialty chemical. But I really, you know, and so everybody, anybody's going to try to do that to generate more profit or more revenue. But another another way to generate more profit is you reduce your costs. And so for that chemical tracking system, it's like, hey, my costs are out of control. And so I need to reduce my cost. Well, that's the key driver, you know, probably on that chemical tracking system. And at the end of it, you know, when you release the application, and it's been an operation for a couple years, you go, what did it work? You know, are we actually saving money, you know, in terms of the cost for us to develop our chemicals. So again, that's the main focus, the main reason for the application, and then the degree of freedom or just like flexibility that the team has, on other dimensions. So hopefully, there are some degrees of freedom. You know, remember when we talked about well, schedules, fixed budget fix scopes fixed? Well, okay, you know, you're not giving, you know, the team much maneuvering room, you're, you know, so hopefully, on a project there, there's some degrees of freedom. And then deployment config considerations are, you know, is it going to be in a data center is going to be a cloud, you know, Software as a Service application? Are there any particular security requirements, you know, that would come into play, you know, more so than normal? That kind of thing? Okay, let's take a quick little knowledge check here. Okay, you guys should see the poll now. Okay I think we got everybody let's let's take a look at these. Okay. So the first one was, you know, capture a market share of 20% of the US market within the first 12 months of product launches example of a business objective. That's true, you know, so it's like a financial objective, quantitative metric. So that's true. A vision statement is a concise statement that describes the target customer product name, product category, key benefits, and competitive differentiators are a product. That's also, you know, true as well. A context diagram describes the interior software structure of an application. So it's got a little confusion on this one. So that's false. So remember, you know, that context diagram, you know, you're at the stage of the project, where it's like, okay, you know, you don't know what's on the inside, you know, and how you're going to do what you need to do to create, like, you know, like, we talked about the chemical tracking system. So you're looking really at this point of the external entities that you're going to interact with, whether they be human, you know, operators, or just systems that you need to interface with. And then you've got those flows in and out of the system where you're just trying to capture again, at a high level, like, you know, what, what actions will come in what data is flowing in and out that kind of thing. So it's not about the interior software structure, but about the external entities that are going to deal with, you know, are going to interface with an application. And then a feature tree provides a detailed schedule of when certain features will be implemented. And that's false. So that feature three, it's got, you know, less than a super, I mean, it's a high level description of the functionality of the product, you know, in a hierarchy, but it doesn't have anything to do with the schedule, you know, Hey, what's going to be implemented, you know, when whatever is purely to kind of capture the functionality that you know, you're hearing from which is needed in an application that you're hearing from customers. Okay, back. Okay, so now we'll move on to talk about, you know, requirements development and management. So, you know, you decided, you're going to build a, you know, a new application in Terminal or for, you know, commercial customers. And now you want to figure out, Okay, well, how do we, you know, capture these requirements, and then turn that into a specification for our, for our product. And what this slide is just saying is that, you know, ideally, the more you can, the more frequently you can talk to customers, the smaller this expectation gap, you know, is going to be, so, and this is a, I typically use the slide to kind of diss waterfall techniques, because you know, waterfall, next slide, you know, talks about this, in waterfall, you know, you go out and there's like months and months of time spent talking to customers, and capturing requirements, and then those requirements are, you know, documented, and then those documents are handed off, you know, to the development team. And then, you know, typically, there's not even, you know, this shows that there's still some, while there's work may be happening on requirements, but there's not a lot of contact that's happening with customer. So all the customer contact, you know, happens up here. And, you know, what this table or chart graph is trying to say is, it's helpful to keep talking to customers, because typically, with software products, their understanding of what they need evolves over time, especially after you show them something, you know, you show them working product, which is why I love agile methodologies, because that's what you do. And then you get feedback and say, Oh, you know, in some cases, there's a gap, you know, in what, you know, they, you thought they were telling you one thing, but once they see the actual product, they go, No, that's not exactly what I want, or whatever. Anyway, so having, you know, more frequent contact with customers is a good thing. And if you are able to do that you're going to reduce this expectation gap with, you know, with your customers, because what will typically happen, you know, with some of these waterfall processes, is you don't actually show them something until over here. And then that's when you find out you got a massive expectations gap. It's like, what what did you do, this isn't what we need, you know, and there's just a whole lot of pain, you know, that follows, you know, from from that. So this is how, you know, requirements cycle works by these different methods, waterfall, a lot of front, a lot of documentation with agile methods, you know, like we've talked about, say, with Scrum, every sprint, you know, you're kind of taking another look at, like, what are the most important priorities for the, for that next sprint. And so it's kind of consistent, you know, maybe there is more time spent upfront, you know, but then over time, you know, as the Sprint's get going, it's pretty consistent, you know, same kind of cadence of work on the requirements and pulling those requirements off the product backlog into the end of the sprint. So what happens in requirements development? Well, you got this solicitation, you know, it's just where you actually talk to customers, and find out what their pain points are and what they feel they need in the application, that tends to be somewhat fuzzy, you know, and you need to do some analysis on that. And then maybe go back and clarify what you heard, to make sure you heard it accurately. And then that leads to a specification where you're starting to get this into more of a format that a developer, you know, could use to implement some, some software to code. And but you know, there's all these feedback loops throughout the process. So then you have the specification is developed, they'll be this validation phase, where you go back and kind of confirm, you know, with customers, that you've captured these requirements accurately. So there are these feedback loops at every step along the way. So you know, what's elicitation? Well, this is where you know, you're counting Capturing requirements. And there's a lot of different ways to do this. And, you know, we're going to talk about that, we'll go through most of these in just a second or whatever. But again, this is where you're, it's very, very important. You know, because obviously, if you don't get the right information, you know, from your, your, your target customers, you're not going to produce the right product or whatever. So it's important that you go out and capture this information. So, yeah, it's a process of identifying the needs and constraints, you know, of end users stakeholders. And then it's not just a simple matter. I mean, like I said, if you go out and you ask customers what they need, they're not going to just tell you in a way in a format, you know, that you can then just go from that to writing code or whatever, or developing a specification. So there's a, you know, effort required in analyzing what you're hearing, and then turning that into, you know, more specific requirements. But then because you're transcribing you're because you're, you know, there is this transformation that occurs, you could mess it up, I mean, you could basically interpret what they're saying, in the incorrect fashion. So that's where you got to have these feedback loops, to go back and make sure, hey, here's what I heard you say, and here's how you captured it, you know, in a requirement does this sound right? And that, you know, there's different ways to categorize requirements, your business user functional, non functional. And so typically, they'll be the team will have these different categories of types of requirements. And if they're expecting requirements in a certain category, and they don't get them, or they don't have any, you know, that are placed into that category. So maybe, you know, why don't we have those, and maybe we're not talking to the right people, and it's the way they make sure that you've got a comprehensive looked at all the requirements from all the different user types of an application. And, you know, so it takes some skill in knowing how to do this and takes a lot of really good communication, to, you know, to capture these requirements in an accurate fashion. So here's kind of the steps for carrying out, you know, process to capture requirements from customers, its first part is kind of, you know, planning, a, deciding on the scope agenda, getting people lined up to be able to do this, preparing questions and straw man models, I mean, if you just wing it, you know, you sit down and you wing it, and then you start talking to customers, not that that's a bad thing to sit down and talk to customers, but more than likely, you know, it's going to be inefficient, you're not going to capture the information that you need to be successful. So, so so you got to do the proper planning, then you carry out the sessions, and we'll kind of talk about what some of those sessions, you know, the different formats for those sessions. And then the follow ups important to you know, okay, what's the information we captured, going back and, you know, validating that with the people you capture the information from, and then you know, documenting any open issues, like maybe certain things you capture or just rock solid, and you know, the rock solid, okay, boom, boom, boom, okay, we're, we're good here. And then there's some areas, it's like, you're getting some feedback, and you don't understand it and say, Hey, we got to go dig into this area more. And so anyways, more like an action items from your elicitation efforts. Okay, so now let's get into, you know, what are these different types of, you know, ways to capture information? Well, interviews are very common, and very popular. Because they're, they're easy to do, you know, you're like, say, we're creating this cafeteria ordering system. Well, okay, I'm gonna get some cross. You know, certain people have complained about maybe one and a system like this, whoa, okay. Let's go talk to them. Let's go interview them and see what they you know what they have in mind. Well, the cafeteria staff, you know, they, they, they're the ones that That are dealing with the food waste or whatever. And, you know, obviously, they're going to be an important stakeholder in the creation of this capture order system. So, okay, I'll line up some different people on the cafeteria staff or whatever, okay, somebody's gonna have to deliver this food, if we implement that we don't currently, you know, have delivery. So I don't know, we're gonna have to find somebody, it's gonna be a proxy for the delivery people. So we understand the kind of information they would need to be able to, you know, to leverage the system effectively. So anyway, so you identify, okay, these different groups, then you go forward, and you know, you basically create, you select the people come up with the schedule, design the interview, and this is important, you're coming up with the right questions and having your questions. So they don't, they don't it's a mix of like, open ended and close and do you know, questions and you don't lead, you know, the witness, you know, you're basically trying to capture information, you're not trying to bias it in one way or another. And you cannot conduct the interview and follow up after the interview? Well, you know, what are the types of questions we'll close in questions are where you're looking for some specific, you know, information, you know, so like, how many telephone orders are received per day? Here, you're expecting, you know, okay, well ranges from, you know, 75 to 115, or whatever, and things like that. So it's more quantitative, we're, that's important, maybe for sizing your application, you've got some closed and quantitative questions that need to be answered. open ended questions are, you know, where you just want to get the customer or the end user talking? You know, what do you think about the current system? What are some problems you face on a daily basis? What what improvements that you'd like to see? So you're not, you know, you're just like, hey, just let them start talking. And then we'll just be capturing what they're saying. And again, if it's something I don't quite understand, there may be a follow up question to dig a little deeper, you know, that kind of thing. And that's where these probing questions, you know, come in, you're, maybe you're asking an open ended question. And then it's like, well, why why is that? So? Or can you give me an example, you know, and you'll capture more rich information by those probing questions. And then the post interview could look something like this, you know, where somebody went, and they interviewed Linda. And, and they captured a bunch of information. And so wait for Linda to say, yeah, yeah, this is this is right. Yeah, you captured right, or no, you know, this isn't exactly right, you need to modify it this way, you know, that would be more accurate, or whatever. So that was the interviews. So interviews are popular, most popular, they're the easiest to do. Because, you know, you just figure out who I need to talk to Linda, you know, and then you schedule some time with Linda, and you go ask her a bunch of questions. workshops, is a structured meeting, and you find some specific stakeholders that you need to get together in one room. You know, and, and a lot of times, this won't be it might happen right out of the gate. You know, you're developing a new application. And, you know, you just say, let's say, for the cafeteria ordering system, say, well, let's get these people that complain, you know, and they want, they basically requested a system, let's get the cafeteria staff together, let's get whoever else together, whatever, and we're gonna sit down and talk about it. Normally, that's not how a workshop would work. Normally, the way it would work is you interview people, you capture some requirements, and you find out that, you know, people are telling you different things. Like one group says one thing and another group says another thing and they're in conflict or whatever. And you're like, Okay, we need to get these folks together, and basically get to closure. So, so that's a, you know, typically how I see workshops use is, maybe, you know, there's pretty good definition on like, 60% or less even say it's higher than that 70% any application, but 30%, there's some conflict, and there's some confusion. And so the workshop is used to get the right people in the room to be able to get the closure. And so it'll typically have, you know, several different types of stakeholders together. And it's, it's more effective. I mean, you could continue to use interviews, you know, to resolve these these issues better time consuming, you know, say, hey, I want to talk to Joe. And he said one thing, I'm talking to Suzy, and then you're kind of like the shuttle diplomacy of like going back and forth between these different stakeholders, it's just more effective to get them in one room together and resolve those, you know, those issues. And, anyway, so this, this is can be helpful when, you know, you want to get to closure, and maybe you get some scheduled constraints. And so you get everybody together in one room to resolve that up mistakes can also be a disaster, you know, if they're not facilitated Well, you know, because people love to pontificate, you know, they'll go off, and they love to go off on tangents, or whatever. And so you can waste a lot of time getting people together in the quote, unquote, workshops, if they're not structured properly, and they're not facilitated well. So structured properly means you got some specific things, you're not talking about the 70%, where there's agreement, you're talking about the 30%, where there's confusion or disagreement, and then the facilitation is, you know, not everybody can just go off on some tangent, you know, the, it's focused on those those issues of main issues. It's not facilitated properly, then, you know, again, it can be a disaster. So, so what are the best practices, you know, establish and enforce ground rules, keep the team small, you know, but include the right stakeholders. So, you know, you know, Scrum uses a seven plus or minus two. That's pretty good for workshops, too. Because you find, you know, you get a roomful of more than, like, 1012 people, man, you're talking about chaos, you know, it's really hard to keep focus with a group of that size. So, you know, small, but you know, you still need to have the right people there, got to have a definite agenda, you got to know, hey, what are what do we focus on? What's the scope, use parking, lots of parking lots are a polite way, for a facilitator, say, we're not, we're not going to talk about that. So somebody is trying to go off scope, you know, and talk about something that's not on the agenda. If the seller says, hey, let's put that in the parking lot. So that's a way to kind of recognize somebody's idea, you know, it's a soft way to shut them down, you know, and then another thing to do is time box discussion. So the people that are the pontificators, you know, just want to go on and on and on and say, Hey, you know, we got a certain amount of time to talk about a topic, you want to make sure you hear from everybody. So that facilitator, you know, make sure they manage the time, everybody gets a chance to be heard. But you know, they don't get a chance to just dominate the conversation, and then keep everyone engaged. Because if you don't the pot, pontificators just run riled, man, you know, maybe you got two people, and they're just hogging the conversation. And there's four other people you really need to hear from. And so you need to be able to in some cases, when people are shy, the facilitator needs to ask them questions, you know, pull them out of their shells, so that they can contribute, you know, and they have time to contribute. So anyway, these are best practices. If this if these aren't used, like I said, if the you know, it'd be a disaster, you know, you spend a half a day or a day, and no useful information, you know, is no useful and deliverable is produced. Okay, so what's another technique is focus groups. So that's where you get, you know, Representative users together. And, you know, you're, you're capturing ideas on a product, maybe you've got, you know, a product concept, and you're trying to get feedback from this user group. And, you know, he kind of get their attitudes, impressions, preferences and needs, things like that. And a lot of times, it's used when you're developing commercial products, and you don't have, you know, ready access to all the different types of users within a company. So when I was at Microsoft, and I was running a hardware product group, you know, we develop mice and keyboards, whatever we use, we use focus groups a lot. You know, so we had a different concept for, you know, a product say was going to be, like, the first, we had one of the first optical mice, you know, because way back when there'll be a ball tracker, you know, you move and the ball would move, it was basically a mechanical device. And that would, you know, put the cursor position properly, you know, help you find the proper cursor position, but those things would wear out or whatever, and we're not as user friendly and so we came up with an optical system and, you know, just, you know, want to see hey, How are people gonna react to that? Are they gonna like it or not? Or whatever. It's also used a lot for like industrial design, you'll show different shapes, colors, textures, you know? And then, you know, you add functionality to products and say, Hey, does this resonate, you know, with people or, or not. So in some cases, we might have like, develop a win win PC gaming was big, you know, a particular product that might cater to a gamer, you know, a mouse, a gaming mouse, or whatever, well, hey, is there a market for that, you know, when people buy that when they pay more, or whatever, anyway, focus groups be a good way to try to capture you know, that information. What's another technique observation, so, you know, especially if you're automating some process, so there's kind of a manual process that occurs today within a company, and you, you know, you capture information on that manual process by talking to users and managers, but then this is the key point, you know, they don't remember everything they do. So you capture that information, but then you go observe them, and then you kind of validate that, you know, am I seeing what they told me, and in a lot of cases, you'll find a lot of stuff, they're not telling you, you know, by observing them. And so, you know, but you have to be careful that you don't, you know, people kind of freak out where you're watching them, you know, do something or whatever. And so, they may change their behaviors if they're being watched. So you kind of want to be as unobtrusive as possible, you know, but still kind of see what's happening. And then you got to be careful when you're observing activities, not to ignore periodic activity. So what would be an example of that. So like, finance organizations, and companies, you know, they have software applications that they use, to be able to know, you know, the revenue that a company is generating their expenses and things like that? Well, there's a certain cadence to how financial reports are generated, especially within public companies. You know, quarterly reporting is super critical within a public company. I mean, if a public company misses their revenue numbers by just a little bit, their stock price gets gets hammered, or whatever, what anyway, I mean, you may be watching a finance team. And you may pick a day, you know, when, okay, everything's normal, it's a normal Tuesday or whatever, but a quarter, and there are some other activities that occur, you know, and so you want to make sure that you're not ignoring those periodic activities, and that you're basically capturing the full extent of the work that's being done. If you're going to then you know, digitize that automate it, you know, in software. So this can be important, because a lot of times, I mean, think about, like, if you're, I don't know, how many of you, are you considering yourself, you know, food connoisseurs, and you cook meals, or whatever. And sometimes, you know, there's a meal that you can prepare, and you're not going off a recipe. I mean, you, you know, you've done this hundreds of times, or whatever. And maybe there's a lot of steps associated with that. And if you were going to communicate that to somebody, you know, you may leave some steps out, because I mean, you don't need anything. Yeah, yeah. Yeah, I mean, you would know to do that, but for them, they wouldn't, they wouldn't know that. And so that's this idea. You know, the top line here is that people sometimes forget all the stuff they do, because they do it all the time. And so it's just ingrained into the way they operate. So anyway, that's the benefit of observation. Another thing that's done and can be helpful as questionnaires I mean, we've all gotten these, you know, different questionnaires, or would you like to take a survey, you know, about your interaction, you know, with our application or whatever? Well, so it's a set of written questions used to obtain information can be paper based or electronic, I mean, analysis, like, you know, typically electronic survey, monkey, there's a lot of tools like that, that make it really easy to set up a web based survey, a survey, and capture, you know, information. And the nice thing about it is that, you know, you can get some quantitative, you know, large numbers, you can reach large numbers of people, different types of people, and it helps you get, you know, quantitative information as well as opinions. And, you know, you can, you know, it's also helpful when you're trying to get information outside of your organization. Probably questionnaires is ever, you know, people aren't crazy about questionnaires, you know, we get inundated with you know, questionnaires people Wanting our opinion. And so response rates are, you know, can be really, really low. So that's the challenge with questionnaires, but because you can reach a lot of people, you can still get the big numbers, you know, in terms of the response rate can be quite high. So what are the steps? We're going to figure out? You know, who are you going to sample? You know, who are the what's the population, that you're going to sample and making sure you're getting the appropriate representatives, you know, within that sample? And then, you know, designing the questionnaire so that you avoid survey bias? And the question is easy to understand. I mean, yeah, you should, I'm sure you guys have all seen this yourself, you get a questionnaire. And some of the ones or questions are straightforward. And then there's a few you're like, you know, I'm not really sure what they're what they're getting at what they're asking, Well, obviously, that's bad. You know, so you need to make sure that your surveys are as clear as possible. And then, you know, there are things that you can do to get, you know, a better response rate, I mean, a couple of things that are done or offer incentives for people to, you know, complete the survey. So there was a, there was an application that we were, or not an application, but a set of questionnaires that we sent out to find out all the different applications that were used kind of enterprise applications that were used within Microsoft. Now, you would think that there'd be a tool to track that. Well, there was it was called ms apps or whatever. But based on some investigation, we determined that the data in that was very questionable. Okay. And so we went out, and we interviewed people that were supposedly responsible for those applications, to determine if they were still active or still in use, you know, what the purpose was for anyway, so we wanted to get a real high response rate, obviously, and so we incentivize it by giving away your Xbox console. So I mean, that was kind of the way that you know, and it worked. I mean, it worked. And we actually gave away, you know, we had a raffle on people that responded, you know, they're there, they were put into a raffle. And we answered, and we selected some names and gave away some puzzles. So offering an incentive as a way to get people to comply. Another thing that's often done with like, you know, newspapers, like Wall Street Journal, you know, they try to try to capture information, you know, on Well, what do you think about this, who, you know, who's gonna win the presidential election or something? And then you're interested in you kind of want to know, what does everybody else think? Well, if you if you submit, you know, a response, we'll show you the survey results, otherwise, they won't, you know, so that's kind of the incentive to get you to participate. So anyway, you know, with questionnaires, the structure, you're thinking about who you're going to, you know, send a questionnaire to designing a thoughtful questionnaire, having some incentive, you know, and like I said, you sending the results could be really kind of an incentive, or a thank you note for participating. Those are all kind of steps in that process. Well, what are some other techniques of a system interface analysis? So this is similar, like the context diagram, you find out well, what other systems interface with the application or would need the interface to the application, and then you kind of dig into the requirements that might be generated from having you know, that having that connection with that other system? user interface analysis, so this is huge, you know, I mean, to make sure that you have a, you know, good UI. There'll be like, we had usability labs at Microsoft, where you bring in people and you know, without a lot of coaching, you just try to see, hey, are they able to navigate, you ask them to do something, I would like you to perform, you know, this these steps or whatever. And then you see if they're able to do it, you know, and if they're if they are successfully and quickly that says, hey, you know, maybe our UI is pretty good, it's fair, it's what's called intuitive So anyway, but that's a ray to you know, in a very quantitative fashion, bring in people and figure out how you know, how good your your UI is. Another one is document analysis. So you know, it provides information about the aza system. you review the technical documents that are available, you know, and can look at forms reports policy manual And, you know, if you're going to if you're going to come up with a better system, then you're kind of looking at, well, what does the as this system, you know, look like so that can be that could also be a starting point to capture other requirements. Okay, we'll do this second knowledge check, and then we'll take a break. Okay, so you should be able to see it. Okay, we got most everybody, let's, let's take a look. Okay. So number one, document analysis is the most popular elicitation technique. Now, I don't think so. You give that to somebody you didn't like, you know, like, Hey, here's this stackable or this stack of old dusty documents, once you look through those and find out if there's any gold nuggets, you know, we can use in creating the new application. So no, that's not the most popular one is interviewing, you know, because it's just it's really easy. It's easy and effective. You know, I mean, you basically figure out, hey, who do I need to talk to, to capture requirements for this application. And a lot of times, it's pretty easy to figure out, you know, who those people are, and then you just reach out to them and schedule some time, you know, and so it's pretty easy to do, but it's also effective. So that's the most popular one. Number two workshops can be an efficient method to define create, refine, reach closure on requirements levers. That's, that's true. Yeah, it'd be got to be facilitated properly and have a narrow scope. But that's true. System interface analysis is a good technique to get feedback from end users or commercial products. That that's false. But you know, maybe that seems like a little tricky. Oh, system interface analysis. Yeah, that sounds sounds pretty cool. Yeah. Okay. But no, you know, this should be focus groups. Remember, I talked about, you know, I was at Microsoft, and we're going to put a new my sir keyboard or a broadband router, you know, and it's like, yeah, you know, we have certain ideas that we could, you know, survey people around Microsoft, but I mean, you know, Microsoft employees aren't your, you know, they're techie, they're a little too geeky. So you got to get out there and talk to a variety of different, you know, people that are out there, and you pull a focus group together, and have these different types, you know, different male, female, different ages, different education, or whatever. And then I think is basically we're trying to sell this product to everybody, you know, across all that those demographic categories. And so just staying within Microsoft isn't going to give you all those demographic categories. So use focus groups, as a way to get good feedback from for commercial products in kind of a mass market product. Okay, using incentives can be a good way to increase the response rate and questionnaires. And that's true. Yeah, it's very true. I mean, it happens all the time. I mean, as much as I hate questionnaires, you know, occasionally I'll get like, $1 bill in the mail, you know, where are they? I don't know, I haven't seen somebody do that recently. But they used to do that, you know, they're trying to get, you know, get you to answer a questionnaire and they put $1 in the thing, and I'm, oh my gosh, okay. You know, I'm not going to throw the dollar away. I am going to keep the dollar and now they're guilting me into like, you know, answering the question. So it works. It's, uh, it's affected. Okay. All right. Let's take a break and get back at 740. Okay, I'll see you guys at 740 Okay let's go ahead and get started again. COMM check you guys hear me okay? Yes, yep. Okay. Okay, great. Thanks. So, now kind of moving along the next, you know, after you kind of captured all this information from, you know end users, customer stakeholders and you kind of get into requirements analysis you know phase where you may try to allocate those requirements to different categories, you take what you know, really high level requirements and then try to get the appropriate amount of detail, you know, so that it can be turned into requirements that could actually be used to develop the software. And then there's a phase of like negotiating the priorities and identifying any gaps in the requirements. That's where, you know, you have these different requirements categories, and if some of them are light, and you're not really getting requirements and certain categories and you think you should then on my I, you know, identify Should you be mean to maybe talk to some other some other people? So anyway, so that's kind of the analysis phase. And there's, at least this is one example of how different user classes at least a high level or categorize. And so, you've got this category of favored user classes. And, obviously, they're pretty important. I mean, these are the users where you really want them, you know, to want to satisfy them with the application, and it's critical, you know, to be able to do that, or else you're not going to be successful. So like, for this capture ordering system, I mean, it's basically, you know, all the people, the company that, you know, use the cafeteria, don't bring their lunch, you know, if they aren't happy with that ordering system, well, you're gonna, it's gonna be a failure, you know, I mean, that the cafeteria staff could just love it, oh, that's a fantastic tool. But you know, if, if the people that, you know, eat the cafeteria, don't use that system, it's going to be a failure. So, you know, you identify, okay, here are the people we really got an A nail, we're going to make sure that we understand their requirements to satisfy those requirements, disfavored user classes is a little confusing. I mean, it's basically, you know, bad actors is a way to think about it, people that you don't want to use the system. So you need to have certain security protocols multifactor authentication, you know, did things like that, to make it so that they, you know, are not able to use the system. And you have ignored user classes, and these are the ones where, you know, they may still use the application, but it really wasn't meant for them, you know, so you're not, they're not going to be given a lot of priority, in terms of the requirements. And, and so their, their needs aren't going to really be focused on as other user classes, which could be indirect users who are in need, or maybe somebody who doesn't use the application directly, but uses data from the application, you know, and there could be some kind of interface. Okay, somebody's got it. Okay. Somebody got the vaccine today, it was just telling me, they're not feeling well. So I hope you guys are all getting the vaccine, but I had the same thing. I got the Pfizer vaccine, you know, to the to DOS, when the first dose I got, you know, I didn't feel great, you know, but it wasn't that bad. The second dose. So I got it in the afternoon on one day, and then the next day, in the morning, into the early afternoon, I had the light down. I mean, I was just really kind of, so it's been varying, you know, your mileage may vary. I mean, I know, some people, you know, didn't really have much of an impact at all, with either dose, whatever, and other people, like the second dose was even worse for them than than it was for me. So anyway, I hope you guys are getting vaccinated, there should be plenty of supply now. Okay. So, you know, it's talking about the other user classes, it could be indirect, you know, indirect use of the of the application and or could be system systems that that tie in. And so, you know, there there may be he to deal with their requirements as well. Okay. Okay, so now we're going to talk about like user personas. So you may have heard this term before, it's a way to kind of capture information about the user, and try to get richer, you know, more more detailed information about who this person is, and you know, what they're concerned about. And so there are these, this is one template, there are many that are that are out there, where you basically try to create, you know, kind of a bio around or certain user class. And the whole goal is to help you develop a better application, you know, said to you, if you're, you know, part of the development team, and you're developing an application, there's several different kind of user classes. And you have these personas for these different user classes. It will help you understand kind of, you know, what's important to them, what it's like, you know, walk a mile in their shoes, whatever, and then hopefully have more empathy for them and through that empathy, develop a better product. I mean, so that's the whole idea, you know, behind it. So this might be an example, you know, for this chemical tracking system. So you got a guy named Fred, who's a chemist. And so, you know, you capture some information like this about Fred. And then you build a user persona around it. And so the personas, you know about Fred, but it's really representing a user class, which is, in this case, a chemist, that's going to be using the chemical tracking system. And so it says, Hey, Fred's 41, he's a chemist at Contoso. You know, he got his PhD 14 years ago. he's not, he's not a computer guy, you know, or computer geek, you know, he really doesn't. That sounds like he doesn't like them. He usually works on two projects at a time and related to chemical areas. He's got 300 bottles of chemicals and gas cylinders, on average day, he'll need four new chemicals from the stockroom, two of these will be commercial chemicals and stock one will need to be ordered and one will come from supply, or proprietary component contests with chemical samples. On occasion, Fred will need a hazardous chemical that requires special training for safe handling. When he buys a chemical for the first time, Fred wants the Material Safety Data Sheet emailed to him automatically. Each year, Fred will synthesize about 20 new proprietary chemicals to go into the stock room, Fred wants a report on his chemical usage for the previous month to be generated automatically and sent to him by email. So he can monitor his chemical exposure. So you can see from the short write up, you're getting a better idea about Fred, you know, and as Fred is using this chemical tracking system, what might be, you know, important to him. So in certain things that might not be obvious. So say you're part of the IT department at Contoso pharmaceuticals. And you know, you've been asked to develop this new chemical tracking system. You know, you're not a chemist, you're an IT person, you know, what do you know about building, you're creating, you know, new, new chemicals, whatever you don't, whatever. So, you dig in, you come up with this user persona, about in this case, Fred, who's going to representative of, you know, the chemist at that company. And there are certain things that come out that, you know, might not have been obvious, you know, so if we were using, you know, hazardous chemicals, and being exposed to those on a routine basis, you know, this this previous month report, you know, about monitoring chemical exposure, you go, yeah, okay, I get it, you know, initially that may not even be on your mind, and because you don't you don't deal with that, that's not your world, whatever. But once you kind of see this, you go, oh, wow, yeah, make sense? Yeah, this guy could be really concerned about that, or whatever, anyway, so you know, and you get some sense of the quantity, the types of chemicals, you using the quantity or whatever. So anyway, you know, how many chemicals he produces, you know, in a given timeframe, or whatever. So all that the whole idea behind these personas is just to get a richer, deeper understanding of the of your customers. And then from that you can develop hopefully a better app, you know, for them. Then there's this concept of product champions, and this is used a lot, you know, for, like internal developments, you know, like an IT department is developing applications, you know, for whisky for use within the company. And so just like that example, you know, you're not a, you're in the IT department, and you're not a chemist, you're not a buyer, you're not a part of the Health Safety Department staff, or the chemical stockroom staff. And so the whole idea is, you know, you get this product champion, who's the primary interface with members of a specific user class? And so ideally, I mean, these people are going to be actual users to, you know, and so, and they're motivated. I mean, maybe they, they want to see this new system, you know, developed and so they're kind of eager to support. So let's just say, you know, Fred is an example again, maybe he's going to be the product champion, for the chemist or whatever. And, you know, what Fred would help do help. The IT department do is gather requirements from other chemists, you know, and then reconcile and consistency, so maybe, hey, there's been some interest views with different chemists at Contoso. And most of the requirements are lining up. And but some aren't, you know, and so, Fred knows these people, because he is one of them, you know, and so he can help, you know, facilitate and reconcile those in consistencies, or, you know, maybe it's a difference in terms of the priorities of one requirement versus another. So anyway, product champions can be very helpful. And, you know, kind of getting making sure you're getting good requirements from the different users of a system. And then reconciling you know, issues. It's helpful if they know, you know, they're kind of part of the team. So they know, hey, here's what we're planning to do with the system. And they buy into, you know, into that vision, and obviously, they believe it has value, if they don't believe it has value, well, they're probably not a good product champion, because, you know, they're, they're not going to want to put a lot of effort into something that they think is a waste of time. And, you know, ideally, they be good communicators, I mean, that's part of the job is that they need to be able to, you know, not just be like a good chemist, but be able to communicate with the other chemists and help facilitate, you know, getting good requirements. And they should, you know, obviously be respected by their colleagues, and then empowered, you know, to kind of reconcile, and consistencies that exists from that particular user class. Anyway, that's the idea of product champions, and the role that they can fill a very important role in helping to make sure that the right requirements are coming forward. And then once the system is implemented, helping to encourage adoption of the system is even I mean, you'll find this, I mean, you may, you know, your careers, you'll develop, like, wow, this is a really cool application that we develop, but there's a, you know, resistance to change, you know, it takes a while for people like, Oh, I'm gonna go learn something new or whatever. And so even with really good systems, it's hard to get, you know, adoption. Anyway, these product champions can help in that regard as well. Okay, and then you got to drill specifications, take the user needs requirements, and, you know, come up with specs and diagrams, and documentation that will be used to technically describe what it is that you're you're trying to do. And then validation is just, you know, as I mentioned before, really making sure you've nailed it, okay, you kind of you know, captured, you know, requirements at a high level from customers, you've translated that, you put it into a format that can now be, you know, we're an application can be developed, you want to make sure before you do that, that it's validated. So, you know, in, like traditional methods, the validation minutes will be documented, you know, it's kind of a heavy documentation, focus, or whatever, in Agile approaches. The validations, if you think of Scrum, the validation occurs in your sprint reviews. So if you remember, you have this sprint, let's just say three weeks at the end of that, you have a sprint review. And you basically take your potentially shippable product, increment your working software, and you demo that, you know, to end users and you capture feedback. Well, that's where the validation happens, you know, you get feedback that yeah, that's fantastic. That's exactly what we need, or no, what what, why did you do that? Now, that's not good. You know, so, in an agile approach, it happens, you know, throughout the development process, in more traditional, you know, software development approaches, it, it can be more documentation, you know, where you're, you've captured these requirements, and then before the code is actually developed, you know, you're trying to get, you know, feedback that indicates you're on the right track. And, you know, there are tools like this that are used to make sure that you haven't missed something, you know, so you capture all these requirements. And you describe it. And then you'll tie it over here to like this WPS, WPS deliverable work breakdown structure deliverable. So and we're going to talk more about that next time. This is where like work packages are defined where a requirement is going to be dealt with, you know, cigarette, we've got this requirement, well, how are we going to then, you know, deal with that and implement it? Well, we've got this work breakdown structure item that it's going to tie to. And the whole idea with traceability is say, Okay, I mean, imagine, you know, where you'll see this a lot is, say, at a company like Boeing, you know, you're, you're building an aircraft, you know, an aircraft that has all kinds of hardware, you know, requirements, but as a lot of software, and so it's just the amount of complexity is so high, that you just, you can't manage it in your head, you know, you're going to have literally 1000s of requirements. And so, this is a way to say, hey, are any of these requirements slipping through the cracks? Like, how are we addressing this requirement? And so a tool like this is meant to make sure that nothing is slipping through the cracks, that you're effectively, you know, capturing requirements and addressing. Okay, so analysis, you know, you capture requirements, and now you're, you know, transitioning and turning those into specifications, and documents, diagrams that can basically inform the software that's going to be developed. And there's a couple of, you know, different pivots to how products can be developed, there's product centered and user centered, so product centered, like, Well, what do you want the system to do drives the development of new features that are believed to be desirable. So it's a little bit more speculative. And then user centered is what the users need to accomplish. And it drives to focus on use cases and, or user stories. And you know, that the chief differences that user centered design tries to optimize the product around how users can want or need to use the product, rather than forcing the users to change their behavior to accommodate the product. So it's really you know, you got to laser focus here on what the user is trying to do, what do they need to accomplish? And then you develop use cases around that. And we're going to talk, you know, a lot more about that here in a minute. So, what what am I really talking about here, you know, when you talk about user centered or product centered design, you know, with user centered design, you go, Okay, I got the Swiss Army knife. And I've talked to different potential end users. And I figured out, you know, they, they need a, you know, a regular knife, they need some scissors, yeah, you can open or whatever, you know, and I basically, I'm focusing on what they're telling me they want to do with this thing. This over here on the right, is some really creative engineers getting in a room and go, you know, we and we could do this, and we could do that, you know, we can add this tool, we can do that, you know, and you end up with this. Okay, which is, this has been kind of a, in the past, you know, a big complaint with like Microsoft products. Is that. So the tension was that, you know, you have a package product that ships out every couple of years. And that upgrade, say, upgrade cycle is super important for your revenue. You want to cram more functionality is the great, how are we going to get him to upgrade, you know, you know, more and more people are telling us they're satisfied with what we provided the last time. They're thinking that they're not going to upgrade this time. It's like, Oh, well, let's just cram a lot more functionality into it, and then they'll, you know, and there'll be some killer functionality and they'll, they'll have to upgrade or whatever. So it kind of forces you in this direction or whatever. The problem with that is that, you know, most of this stuff's not going to be used, you know, and Then it makes it harder, it affects the usability, the application, because you cram so much in, the complexity is overwhelming. Now, with software as a service, and subscription models, there can still be new functionality that's added. But I think it takes the pressure off. companies like Microsoft and others, to kind of move to this model on the right where it's like cheap, we can do this, we could do that, nobody's telling us they want that. But let's go ahead and cram it in the, you know, in the product or whatever. So I don't know, I'm a big believer in being user centered, you know, and figuring out what the user needs to do, and then come up with these use cases, to help them you know, do that up one error, one place where that is difficult, is you're doing something totally new, you know, I mean, you're basically solving a pain point they didn't even know they have, you know, until this new innovation comes to market, and then they can't live without, you know. So in that case, a, you know, you have to be more speculative, because they don't know, you know, they don't know what they don't know, you know, and so I say, in general, you want to be user centered. But in some cases, if you're just doing something new, that's revolutionary, well, you know, a customer customers, you can still, you can still take the idea and get feedback on the idea. But again, it's not going to be initially use case driven. If they didn't know, they didn't know they needed it, you know, so they, they're not going to be able to describe, you know, some use case clearly for you. So, what's the format of a use case? It's, it's got this, you know, it's a sequence of interactions between a system and an external actor. And the use case, title has this format of like, verb object. So a way to look at that is like, say, for the chemical tracking system, we've been talking about, request a chemical, you know, or print material safety data sheet, you know, verb object, check in for a flight, print, boarding passes, or whatever. So it's just this use case, title, is a very simple way to describe what the user is trying to do. And then you can build out a lot of detail underneath that use case title. So you want something, you know, strong descriptive names. And we know to make it evident from the name, what what the use case is, what's the value that you're going to be deliver. So you know, here's some different applications. And here are some different, you know, types of use cases, if it was an accounting system, maybe create an invoice is something that the user you know, needs to do. If it was an online bookstore, you know, search for an item. So anyway, you kind of get the gist of it, the use case, title has this verb object, you know, compact, but very descriptive format. So turning user feedback, tuning user feedback, define the use case. So some sometimes it's not always easy to take the feedback you get from a, you know, end user, and then use case they don't, they're not going to necessarily form it, you know, in a nice, neat use case title. So use cases name should indicate a goal the user wants to accomplish. So you start with the verb. So in this case, it says some users proposed use cases that were not phrased as tasks such as Material Safety Data Sheet. So they didn't really say you know, what they want to do. So here, it says, What does user want to request view, print, download order, revise the leader create, you know, the Material Safety Data Sheet? So, yeah, that's where, again, as part of the analysis of the capture or the analysis phase, you may have to go back and say, Hey, you don't quite understand this, you know, what do you want to do with this? And then, you know, get, get get additional information up. Sometimes you get something that's suggested as a use case, but it's really a single step along the path to implement a use case. So somebody again, like that chemical tracking system. They may say something like scan barcode. Well, is scan barcode, the use case. Well, no, it's like when you scan the barcode of the chemical container, what Are you trying to accomplish? Well suppose two replies, as chemists, I need to scan the containers barcode, so I can log the chemical into my laboratory, well, then the real use cases log chemical into lab, it's not scan barcode scan barcode is a step, you know, within the use case of log chemical into into the lab. So this is where, again, you know, there's, there's actually work to be done to take feedback you get from end users and turn it into, you know, real requirements, or in this case, you know, an accurate use case. Now, we talked about the format of a user story, you know, that's used a lot like an agile techniques like Scrum. And so it was, it has this simple format, you know, as a type of user, I want some goal so that, you know, there's some some reason why you want to do that. Well, so like, you know, you've got these use case titles, that request a chemical, if you turn that into a user story, it might look like as a chemist, I want to request a chemical, so that I can perform experiments. And as a traveler, I want to check in for a flight, so I can fly to my destination. So you know, you're just putting a little additional context with the user story. With the use case, it's just a real tight verb object, your title description. So this leads to this discussion of like use cases and user story differences. And, you know, the differences is how the detail is captured. So, you know, with the use case, and the user story, I mean, it starts with conversations. So you've got these, you know, conversations that occur within users. And, you know, you capture the use case, title. And, in the case of the user story, or refine user story, and then, you know, you kind of go down more of a documentation path, with the use case specification, that might have functional requirements and tests associated with it. And user stories, you know, kind of the conversations continue. So and ultimately, it'll lead to some acceptance tests that were defined on the back of the user story. So there's still the same kind of content, it's just captured in different ways, the Agile approaches tend to just focus on ongoing conversations, you know, we're having these Sprint's every few weeks or whatever. And so I'm continuing to have the conversation. So I have the conversation, I think I know what you want. I develop that into code, I demonstrated to you at the sprint review, and you tell me you love it, or you hate it, or whatever. So some stuffs written down, but it's not really documentation focused, it's more just conversations, whether you use case approach, it starts out more with conversations, and then it moves more to documentation, you know, the use case specification, which we'll talk about in a second, and then functional requirements and test. So there's this difference. So there's differences between these two approaches, it's up the level of detail, especially in documentation, user stories are concise statement of the user needs. The use case specification, you know, it's a more detailed description of what we what we see as the user, you know, needs. So user stories, you know, have the advantage of simplicity, you know, and they're concise, but use case provides, you know, people the structure, and maybe additional context that the user stories lack, but again, you know, that context is always available. Through the conversations I was just on the record requirement of the scrum team to ask the right questions, you know, as they get feedback from customers. So what are the use cases essentials? You know, you got a title, what is the goal? You know, who's the actor who desires it? The scenarios, how's it going to be accomplished? As we talked about the use case title is this short verb object phrase, you know, purchase items, transfer funds, but but they're very easy to understand, you know, if when you're when you're told these you Oh, okay. I know what they're trying to do. Act actors, you know, and how you describe the actors You know, there's some finesse that needs sure a cap and there you know, so an example is Let's say we've got an expense approval system, you know, at a company. And so a lot of different people are going to use this system. So would you say, you know, there's an HR staff user, and executive team user contractor marketing, you know, all these people are going to use it? Are they all actors? You know, in the system? Well, no, you're really going to abstract you know, those, you know, potential users to, okay, the actors are really, I got a requester and approver. So somebody, you know, had to spend some money on behalf of the company, their requester, and they want to get paid. Okay, they want to get reimbursed. And so the approver is the person, you know, that within that, that approval, that the form would be routed to, they say, yeah, that's a legitimate expense, and I approve it, or whatever. So this idea of, you've got to think about actors differently. You know, it's not just a simple matter of Oh, HR staff, part time staff, whatever, no, the actors are requester, and approver. So there's some abstraction that occurs, as you think about who is going to use the, you know, the system. And then, you know, you turn this into like a scenario. So it's like a purchase items customer, you know, and so this is like your typical e commerce checkout process. So you just basically go through these steps that, you know, the user needs to walk through from entering the checkout process, showing a confirmation page to their order, allowing them to change quantities, remove items, or cancel, you know, items, I sometimes find systems, I don't know, if you find that, you know, we're like, say you added something by mistake, you know, into your, your little shopping cart, and they make it really hard to get rid of it, you know, it's like, it's like, they can taste the sale, and they're like, Hey, we're not letting you you know, you're not taking that item out of the shopping cart, or whatever. If I find some companies do that, and actually, I don't think it helps them because it makes you so frustrated, because they're making the process difficult. But anyway, this is what you do, you walk through, and you have the you know, the scenario kind of lined up whatever. And then ultimately, you're going to come up with this use case template, which then basically has, you know, these various details associated with it. So you'll have the use case, title. And, you know, some kind of identifier, you know, associated with in this case is, you know, use case you see dash for whatever request to chemical. And then a brief description, you know, what the purpose of the use cases. And so let's just say the requester specifies the desired chemical to request by entering his name or chemical ID number, or by importing its structure from a chemical drawing tool. So that's where like, Okay, wow, yeah, there's some unique chemical that needs to be created. And then anyway, the system either offers a request or a container of the chemical from the chemical stockroom, or let's say, a request or order one from a, you know, a vendor. So anyway, yes, like, okay, yeah, I get what we're, you know, what this use case is all about a trigger condition that initiate the execution of the use case. So in this case, I know, there's like a button, the requester says, indicates that he wants to request a chemical. So you'd have Fred one in there and, you know, initiate order chemical or something that kind of starts the process. And then there's zero more preconditions that must be satisfied before the use case can begin. So, you know, it's like, hey, before going down this path, we got to make sure that the users identity has been authenticated, the user is authorized to request chemicals, and the chemical inventory database is online. So you know, like, this is an enterprise this Contoso pharmaceuticals. And not anybody can come off, you know, off the street in order chemicals with the system. They've got to be, you know, Contoso employee. Furthermore, they've got to be authorized, you know, I'm not everybody in the company can order chemicals. The chemists can, you know, but but but not, not everybody, like somebody who's, you know, got their an HR manager or they're in the HR department, well, hey, they're not going to be they may be authenticated as a Contoso employee, but they're not authorized to request chemicals. And then, you know, if the database is offline, you know, then the person is not going to be able to get an accurate picture, you know, they're not going to be able to perform the function. So that's why those are preconditions, they have to be done before you can, you know, start the use case. And then, you know, in the whole process is done, then there are some post conditions that describe the state of the system, you know, after the use case has been successfully completed. So, the request is stored in the system. And the request was sent to the stockroom to fulfill that order, Hey, take this chemical to lab, you know, whatever be five, or to a buyer to say, Hey, we don't have it, you know, we need you to order this, this chemical. So you know, that those might be post conditions. And then there's a suite of steps, you know, the interactions between the actor and the system, and that'd be captured in the normal flow, all the alternative flow. So you know, and there's nothing or nothing alternative doesn't mean bad, it just means different, you know, say the normal flow is, hey, we think we should probably have, in most cases, we're going to have the chemical in our stockroom. And so that'll be the normal flow, and the cases we don't, then this alternative flow, you know, would would, would occur, and the steps are going to be different based on whether we have it in the stockroom or, you know, our, we have to order it from a vendor. And then there's exceptions, where it's like, Hey, you know, this chemical is not commercially available. And so you kind of go through these steps. And then there'll be some data about the frequency of use, that's expected, there may be business rules, you know, that are associated with a particular use case, you know, so maybe there's something the business rule might deal with who's authorized, you know, to order the chemicals, so that might be, you know, captured in business rule 28. You know, and maybe there's something about reporting, when you're ordering certain hazardous chemicals, I don't know. But anyway, you know, for a lot of enterprise financial healthcare applications, there's a whole lot of rules that have to be, you know, followed. And so those would be captured here. And they probably be represented in steps within a particular use case. And then there'll be things like, you know, other information and assumptions, you know, like, the, the system, the chemical tracking system, is going to assume that the important chemical structures, they're valid, you know, it's a valid chemical type. So it's not like, looking at the chemical structure that the chemist, you know, suggested and then saying, hey, that's wrong, you know, and doing some error checking on it, it's assumed to be right, which could be a problem, you know, if the chemists gives you, you know, make some mistake. But so that's why it's good to state what those assumptions are, what's being checked, and what's being assumed. So anyway, so this is where you end up, you know, with, with these more traditional approaches, where they're more documentation heavy, you know, things like this use case, specification would be created. And there's other documents, like a use case diagram, that might be associated with it, which is like a, just a way to describe at a high level, Hey, who are the different actors? And what use cases? Are they tied to? You? No. So we've got requestor. So again, you know, you could have said something like, well, chemist? Well, no, I mean, it's basically there could be a variety people that are going to request the chemical. So we're not going to say chemists, we're just going to say, the actor is going to be requester and a requester obtains a material safety data sheet, you request a chemical or dispose of a chemical for disposal, you know, the actor associated with that is the Health and Safety Department. Chemical stockroom manages inventory. And then you know, they have to take some action. If somebody requests the chemical, they're the ones that fulfill that, you know, order. If the chemical isn't in the stockroom, well then the buyer has to go search the catalog, you know, and and then order the chemical and you don't see order a chemical within here. So probably this buyer has another system they're using or maybe it's just a phone, you know and they're calling up you know, they've got a catalog that they're they're ordering or some online, you know, catalog they're ordering from, you know, but it's not representative, you know, within this structure, which is basically saying it's outside the chemical tracking system. So anyway, this is a way, you know, the kind of document for the development team, who the actors are, what the use cases those actors are going to be involved with, for that particular application, and that, and then the use cases that are defined for that application. Okay, let's do a little knowledge check here. Okay, you should see that now. Okay, let's take a look. Here's the results on that one purpose of creating user personas to create reliable realistic representations for your key customer segments. So that's true. Yeah, that's the whole goal behind that is to kind of get a deeper understanding of the different users you know, of your application, and then hopefully have more empathy for them and build a better product from them. Product champions serve as the primary interface with members of a specific user class. So that's true as well. So just remember Fred there, you know, he's a chemist, and we're building these chemical tracking system. And Fred is going to be our interface into that user class that chemists that will be using the the application. So that's true. a use case title has the format verb odd just like checking for a flight. So that's true, real simple, but powerful, you know, structure. And then preconditions describe the final state of variables after the use case has finished executing. So that's false. You know, so preconditions are not important either use case even get started, you know, these preconditions have to be true. So remember the example I use or like for the chemical tracking system. You're in employee of Contoso pharmaceuticals. And furthermore, you're authorized to use the chemical tracking system and order chemicals, whatever. So, these are things that have to be true before you can even, you know, start executing the use case. Okay? Okay. So now, let's see. Oh, sorry. Okay. So now we'll wrap up just talking about, you know, hey, going from a storyboard and the final prototype. So, you know, you have the storyboard, you know, which kind of shows the flow that you want the prototype to have, and you have kind of the key elements that, you know, kind of what you consider to be some of your golden nuggets of how you're going to really make this application shine and, you know, create a lot of interests between you know, your potential customers. So you got that. And then now we're gonna, okay, entering, you know, in the Google Ventures sprint process, Thursday, which is where you're now turning that storyboard, and converting it into a prototype, and kind of a reasonable facade. So we'll do is we'll, you know, take a look at the Lord Google venture video, which kind of describes that process. Here it is. prototyping day, it's when all of your sketches, your ideas, the decisions you made, it all comes together into a realistic prototype that you can test with customers. Now, on Thursday, you'll need to adopt the prototype mindset. And it's kind of cheesy, but you've got to believe you've got to believe that no matter what you're working on, there's some way that you can prototype it, all you really need to do is build a realistic facade. That's enough. That's something you can put in front of customers, you can get their reactions, and you can get answers to your questions. Yeah, with that kind of irrational optimism in mind, you're going to pick the right tools to make your prototype. And this is a quick discussion you and your team are gonna need to have, you've probably got tools that you use most of the time to build things. And so for example, you might normally use Photoshop or sketch to make your screen designs. When you're prototyping, when you're just building a facade, you want to move faster, you might use something like keynote. Now, it's not always obvious what tool you should use to build prototypes for services or, you know, whatever kind of product it is, we've seen a lot of examples. And just little product placement here. We talked about a lot in the sprint book. So you can check out some of the advice we have for tools for different kinds of products. To get this whole prototype done in a single day, really just just seven hours, you're going to need to divide up the prototype into different pieces, you don't want one person responsible for making every single part of it from beginning to end. In addition to dividing up the storyboard and dividing up the prototype, you want to assign out a few different jobs, you want to writer, you'll want an asset collector, not a glamorous title, but it's the person who is going to go and sort of collect stock imagery, other things you need for your prototype. And there's the Stitcher, and this is the person who takes all the individual components of the prototype, and stitches those together to make sure that it all makes sense, and that it all flows as a cohesive prototype. Once you've stitched it all together, around maybe three or 4pm, you're going to gather the team together and run through that stitched prototype or prototypes to make sure it all makes sense. Now, we always make a small mistake or two and so it's important to leave yourself a little bit of time to fix those gaps or anything that you find. So by the end of the day, you've got the whole thing all set all put together. You're ready for Friday's test. Okay, suits go back. Today, you're going to put it in front of customers. You've been working hard all week, even though john and i are still wearing the same shirts, I thought I killed them. Okay, so one of the suggestions, you know, these guys have is kind of the dividing and conquer or whatever. So I just wanted to review that again, because, I mean, this is a pretty big undertaking, you know, to kind of get all this stuff together, have it flow and look good or whatever. And obviously, you guys can do what you want to do, you know, that works for you, given the situation that we're in or whatever. But what are these roles that they talked about? Were the makers, you know, so these are like, okay, who's kind of creating the individual components, screens, pages, and you know, of the prototype, whatever, the writer, you know, you might have somebody who's a writer who's basically have the text, that know, accompanies the images of the prototype, and I'm going to show you, which I've included before, you know, we'll kind of go through some of the, the sample, you know, from a previous class, they did a prototype, so you can say, oh, okay, I see what you're talking about with the text that, you know, accompanies the, the images, the asset collector roll is like, you know, for, for a lot of the applications, especially ones that you guys have picked, you know, you're going to have to go out and get photos or icons, so it's like, if it's the, you know, the, the movie, one, you're probably gonna have, like, you know, a pictures of different, you know, movies that people can swipe through, well, somebody's got to go out and capture those assets, you know, from from the web, you know, if you're talking about like, Workout, you know, videos, or instruction images, or whatever, somebody's gonna happen to eat and get that stuff, whatever. So anyway, that's kind of the idea behind the asset collector, is somebody is, like, the makers are gonna probably say, hey, I need this, I need that, you know, go find me this, whatever, and then the asset collector collectors are going to go out and then you know, pull, pull that stuff together so that it's available for the makers to leverage the Stitcher, you know, you need a Stitcher, okay, because he needs something. I mean, hopefully, the whole team, you know, you'll review it, and you'll see, okay, yeah, this thing holds together, you know, and it looks good or whatever. But, you know, basically, the Stitcher is responsible for making sure this thing looks seamless, you know, I mean, if you're actually showing this to an end user, you know, you don't want to be going from one slide to the next and go, Well, what the heck happened here, you know, how did we end up here? You know, I mean, cuz then it's gonna be hard for them to give you good feedback, because they're gonna be flomax, the bike, okay, I'm not following this, whatever. So you need somebody who's gonna, like, you know, make sure that that is kind of focused on the forest, you know, not just the trees, but making sure this, this kind of holds together. The other thing that stitcher may do is have some style guidelines, you know, like, Hey, what's your, what's your fonts that you're going to use? You know, and maybe you have multiple fonts, but you're going to use one font style for this, and another one for that, you know, and then what's the color scheme? You know, you don't want everybody like from going from one, you know, slide or window to another and having, you know, color schemes that don't jive. So, you know, so the Stitcher, you know, might have that responsibilities, they Okay, what's the overall theme, font and style guide that we're going to use, and then you're going to have a, you know, an interviewer, which again, is the person that on less than 10 is going to walk, you know, I guess me through the the application, but basically be the person that, you know, demonstrates the prototype to the customer, and then solicit feedback, you know, from the customer, and gets their thoughts on the application. So you can, you know, if this was done for real, you have these sprint questions that you're trying to answer, you know, and the whole, the whole purpose of, you know, demonstrating the prototype to the customer is not just to demonstrate the prototype, but to get answers to these important sprint questions so that, you know, if you're on the right path, or are not Anyway, you can do what you want to do, you know, you're not, but these are just suggestions from the guys at Google Ventures and how you might want to divide and conquer the work so that you know, you it's not overwhelming, but then also that it holds together you know, in a good in a good fashion. So anyway, so now you know, just Switch PowerPoint decks and just show you some slides from heritage. Now, this is it. Okay, so this was from, you know, a few years ago, there was this, and I think I've mentioned this before. There's this guy, David Allen that wrote this getting things done book, you know, basically kind of, hey, how to organize your life, whatever. And the idea for this app was how to take a lot of those concepts in David Allen's book, and then turn it into a mobile app. And so, again, when you guys are doing, you're putting this in PowerPoint, you know, so there are a variety of tools, you can use a, we got PowerPoint, and it can help you come up with a, you know, a pretty good facade. So, you know, here, you start off with like, Okay, you've got some tasks, tasks you need to capture, you know, so how do you do that, we'll tap plus below to add a task. And it shows the user kind of clicking on the plus, you know, and then a new task screen appears. And I say, Okay, here's the information that's available. And you go in, and you add a meaningful name and description, you know, and then you're gonna add a date, you know, sign date to schedule, when this is set the due date. And so you do that, and then a calendar pops up. And you can, you know, basically selected, select the date, and then you just tap categories to categorize the tasks. And so, you know, that pops up, and it's like, hey, the to do list. And you could actually create a new category, basically, that item didn't fit into one year, you know, pre existing categories, then you could create a new one, you know, and then add it to, you know, to that category. And hey, you know, go back again, create the new task, so they're just kind of walking, you know, walking the user, okay, this is how you would use this application. And it's kind of going through different, you know, types of functionality. So one of the concepts within David Allen's book is like, next actions. So say you've got, like, five projects that you're working? Well, you know, typically, there's always the next action for any one project. I mean, you can't, some things are dependent, you know, and she got, they've got to wait for earlier actions to occur. So one of the things that David Allen talks about is, hey, what is the next action that you need to do on a particular project? So with this, you know, this scheme, they're basically saying, Well, what are those next actions across a variety of different things, you know, in your life, and then they're providing an opportunity to prioritize, you know, and so you can move, move stuff around, you know, by just dragging and dropping, or you could type a next action to edit and change the actions priority that way. So you could go in and say, Hey, this is priority four, you know, I'm gonna change it to one and then save it. So anyway, so the purpose of going through this, and so you go, Oh, okay. So we were talking about a realistic Assad, this is something, you know, you could get in front of a potential customer, and give them a sense of what the application, you know, would be like, and you can see, like, you know, are they are they saying stuff? Like, yeah, yeah, I see that. But yeah, I wouldn't use that. Yeah, you know, I wouldn't use that or, or, Wow, that's really cool. Oh, yeah. Like, you know, use that and, oh, yeah, I really like, you know, the ability to, to drag the priorities up, you know, everything's touched now. And I could just grab it and move the priority up, I wouldn't have to go and enter that in the table, you know, whatever, whatever the the feedback is, you know, that you're looking for this would be enough, this should be, you know, enough of a facade to enable you to, you know, to do that. So, anyway, that's the, that's the idea behind, you know, the prototype, and that the storyboard, I mean, kind of what I'm looking for is that the storyboard is going to track the prototype pretty closely. You know, I mean, there has to be one for one or whatever. But, you know, I'd like to see some of the elements you know, from the storyboard then represented in the in the actual prototype so the storyboard and the prototype will be graded together. I'll be able to kind of compare and contrast those. So anyway, that's, that's kind of what I've got for tonight. Any any questions on the project? Now, what I'll say is next time, it'll be a continuation of like traditional project management, you know, and we'll be focusing on, there's an organization, you know, called the Program Management Institute, that basically is meant to be like a kind of expertise for how to manage projects of all kinds, whether they be physical, you know, bridges, roads, but also software projects. And so I'll kind of pull items from that, that then, you know, we'll discuss next time, and then there'll be a big block is kind of discussed the final, you know, so you know, you know, what's going to be in the final, the final is comprehensive, but it's gonna obviously, you know, focus more on on the second half, you know, lesson six, or six through nine. Anyway, and then. Any, any questions on the, the prototype work this left? I have a question, if you don't mind. So, Jeff, are we stricted to use only the presentation PowerPoint, or we can use something more interactive, and like, where you user actually can click on a prototype? And we'll be more responsive? Yeah, I mean, that's, that's, that's fine with me. But it needs to be something that I can have access to, you know, yeah, for sure. Yeah, yeah. In a way, like that. Yeah. Yeah, no problem. I mean, I think, Carl, you were saying you add another class where you're actually developing, you know, and I don't know if that ends up being the same project, whatever. But yeah, if you have something else, then you know, that's fine. Yeah. I mean, that's fine. I mean, I just, for the project, I just snapped the PowerPoint that, hey, everybody's got access to PowerPoint, you can do a reasonable enough facade, you know, in PowerPoint, like I just showed you, and I didn't want people like knocking themselves out, you know, spending money to go get, you know, some other tool that could be used, whatever. So if you have a sample and you want to send me you know, give me some sense of what you're thinking about, you know, I'll give you more precise feedback. But I'm okay to that. I'm open to that. Okay, it just needs to be something that, you know, I can use and play around with, you know, and you could demonstrate, you know, to the rest of your class on less than 10. That's cool. Thank you. Okay. Anything, anything else? Okay, well, I hope that I hope, you know, the interaction on the project is going well, you guys are able to kind of divide up the labor, you know, because it is I mean, it's a lot of work with the storyboard and the actual prototype. So, you know, the reason I have the team sizes the way they are, is so that, like, one person doesn't get I got to do the whole thing. You know, I mean, it's Devitt divvied up, you know, across the team, so everybody, you know, do your part, and, and then there are these different areas, you know, that they could the Google venture guys have mentioned, whatever, again, you don't have to use those, but, you know, that's kind of from their experience can be, can be helpful. So that may be something you can snap to, if you're, you know, at all overwhelmed with, okay, who's doing what, you know, you could use that as a way to divvy up the work. Okay, and then yeah, let me know. I mean, if you have any questions, or if you want to, like, Do us a special zoom call, you know, and whatever, you know, I'm here to help I, it's hard. I mean, it's hard with this remote with a call COVID situation or whatever. But I want to make sure you guys get the help that you need. And this goes for the final two. You know, if you have some questions, especially after I go through what's going to be in the final if you're like, Hey, I don't understand this area, you know, could we have a call or if it's a question and email, kind of do what I did last time, which is, somebody asked a question, I'll answer it, and then I'll publish that to the whole class or whatever, so that everybody has access to that. Okay, all right. Okay, well, good luck on the project. Whenever I'm looking forward. I always enjoy seeing what you guys come up with. It's all it's always very impressive. I love I love to see the creativity and you know, who knows, man, you may have a, you have an idea for a great new, you know, startup, so anyway, good. Good luck with that. Okay. Hey, that's it, everybody. Good night. Yeah. Thank you. Bye. Okay everybody, we'll get started in just just a bit, just waiting for a few other people to arrive Okay, let's go ahead and get started. Let's do a comm check. Can you guys hear me okay? Yes, yep. Okay. Okay, great. Thanks. Okay, well I hope you guys have been enjoying the weather I'm Galle, we're having like, early summer, it's almost like, like, too hot, you know, have air conditioning in my house and it's like, whoo, getting getting a little toasty, but I'm not gonna complain, happy to happy to be able to see the sun. So hopefully, that will continue. Okay, a few other people coming. Okay. All right, let me get back to the overview. So, you know, we're talking about the key concepts from last time, I did want to mention that both homework assignments three and four, you know, it's your online quizzes have been posted for was posted, as I normally do kind of in your support is going to cover, you know, tonight's lesson and lesson eight, you know, the readings and, and the lecture. And so normally, you know, at this point, that's when I post it, but I messed up on number three. So sorry about that, that should have been posted, you know, really at the beginning of lesson seven, service, you had access to it or whatever. So, let me take a look, I haven't looked at when the grades are due in the system, there may be some flexibility right now I have those both due next Thursday, you know, before the final begins. But I may be able to delay that. So I'll take a look and see when the grades are due. And if I have some flexibility there, provide that. So sorry about it. That just was a mess up on my part. So if you saw that all of a sudden pop up, and I'm like, Well, what what's this? Well, yeah, it's a it's a professor's mistake. So anyway, sorry about that. I was like it says 22, but I did not see it. Yeah, yeah, that's right. Well, you got to go in there. And you got to make it visible in Canvas, you know, or otherwise, it isn't published, you know, so it was there. I mean, it was ready to go. Unfortunately, I just didn't hit the little publish bubble. So that's why you didn't see it. So sorry. Sorry about that. Yeah, you know, you might want to, you know, in preparation for the final, you know, you know, go through the readings, and, you know, do the quiz. I mean, basically, basically, the quizzes kind of are the homework, wherever you want to call it, they tie to the readings in the lecture pretty closely. So if you're walking through that, it's pretty easy to knock it out. But you know, like I said, if I can provide more time, I will, because that was my mess up. So tonight, tonight, and we're going to talk about something really different. So it's more kind of what you would see with the Project Management Institute, you know, there's an organization and we'll talk about that. Tonight, there's this organization called PMI. They've been around for a long time, they've really come up with a lot of documentation about hey, how should you, you know, manage projects, and here are the different things that you should do. And I want to expose that to you. Because there are, you know, companies that really, they leverage this quite a bit and Boeing is an example. You know, and we'll, and there's a reason for that, you know, the PMI that organization really grew out of the aerospace and defense, you know, efforts You know, when we've starting to move into like the space program And you're getting very, very complicated projects, people felt like, Hey, you know, we need a better way to manage projects and manage all these moving pieces. And so they came up with this PMI organization and started to develop best practices. And then they have expanded to cover software as well, whatever. So anyway, well, that's what we're talking about tonight. And then tacked on to the end, we're gonna also talk about secure coding, you know, best practices. So we're not going into depth, that's more like a little checklist, as you're developing software, you know, okay, different things that you might want to consider to include in your application, they're really kind of focusing on kind of the top 10 best practices that are out there, then we'll talk about the final, you know, I'll give you a will kind of review what's going to be on the final. And then just a quick, talk about the final project, deliverables, because I think you guys have the information you need there. So that's what we're doing tonight. So last time, we talked about, you know, the vision and scope document, or if you're doing kind of planning for a new software project, you know, you might use a document like this big talks about the business requirements, you know, what is it? What is your objective? As a business? What are you trying to accomplish? Save money, make money, you know, comply with some government regulations, whatever the requirements are? And then what's the scope? and limitations? Where do you, you know, trying to do initial release, and follow on releases, and then providing some business contacts? Who are the context here, the different stakeholders that will be involved in the project? And, you know, what are the different project priority priorities and deployment considerations. And so we kind of went through an example, you know, of one, like, this cafeteria ordering system. So, you know, it's fairly concise, you know, so it is, quote, a document. But, you know, it can be quite concise, and, you know, just deal with these areas, you know, to provide the appropriate context and information and goals, but it doesn't necessarily have to be a novel, you know, doesn't have to be war and peace. One part of that, you know, document could be a vision statement, which, no matter what you're doing, what method you're you're using, whether it's an agile software development method, or waterfall or, you know, a PMI project, I mean, having a vision statement is a nice way to get organized and get focused on what is it that we're trying to do? So this vision statement, it just has a very simple format, you know, who's, you know, who's the target customer? What's their need? What's the name of our product will kind of product is it? What are the capabilities, you know, that it it's gonna have, and then really a differentiating, like, you know, typically, there's always some other alternatives. So why are you better than the alternative, you know, and so, all these things are important for you to think about, as you're developing a new application. And this just kind of gets it down on a really concise way to focus, you know, your team, and to make it clear to other people what you're trying to do. So I would encourage, and it's a, it's a easy, I see an easy format to adopt. So I would encourage you to, you know, bookmark this type of structure. And then whenever you're involved in a new, you know, application development effort to complete this, you know, figure out okay, get and then get some, you know, get some buy in Yeah, this is what we're, this is what we're doing. Other tools that are used kind of in the planning stage are like the context diagram, where, remember, what the context diagram, so in this case, it's about this chemical tracking system. You're not you're not getting into any discussion about what's happening internally within the application. So at this point, you're just saying, hey, what, who's going to use this chemical tracking system? Whether it be a person or a system, you know, and what's the kind of flows, the information flows in and out of this system? So okay, we're going to have chemical containers, they're going to flow in Oh, there'll be an inventory report that goes out, you know, so you're starting to provide some boundaries around Okay, what this application has to do based on these what these external entities that that system is going to be involved with whatever. And again, it could be humans, you know, or it could be systems Other tools a feature tree, you know, where you're trying to plan out what it is that you're going to, you know, the application is going to do. And this gets a little more more granular than the vision statement. I mean, the vision statement is just the key stuff, what's the key essential things this that application is going to do? This gets a little more granular, you know, because you've got this hierarchy, where you've got the application describe, okay, there have a chemical tracking system? Well, what's the first level in the hierarchy? Well, what's the main things that are going to, you know, people are going to do with the system, they're going to order chemicals, they're going to file a health and safety reports, oh, they're going to do inventory management, and then you click down to the next level in the hierarchy is they'll go under order chemicals, what's going to happen? Well, they need to search for chemicals, or they need to request chemicals, and then you pop down the next level, whatever, you know, you could go granular still. So it's, you know, it's more detailed than a vision statement. But it's probably not an exhaustive, you know, hierarchy, it's really just kind of going down two or three levels to kind of capture the major functionality that you see. And again, this could be done early on in a project and then, you know, continues to be modified as time goes on. And so, you know, since we're talking about requirements, we'll have to add, you know, requirements vary by different software development method, well, you know, like waterfall or sequential II to a lot of stuff up front. And what we're going to talk about tonight really ties to this model, okay? So they have a planning phase, you know, in the PMI process, and that's where all this stuff happens, you know, you do a lot of requirements development up front, the agile methods, you know, are more iterative, where, you know, there are some requirements development, I mean, you've got, and you'll maybe do more up front, where there, you've got this initial product backlog, and then that product backlog, grooming will occur, you know, on an ongoing basis, you know, so new information will come in, and the priorities will be adjusted in the backlog, you know, based on that new information. And so that's why it's just like this cycle, that is tied to if it's a sprint cadence, you know, to whatever the sprint cadence that a team has whatever it says, kind of the difference in how requirements are generated based on the method, the software, project management methods being used. And then, you know, one of the key steps, first steps, you know, with developing requirements, this is the whole idea of elicitation. So it's like, how do we capture, you know, requirements from customers, and there's all these different, you know, techniques, you know, you interview somebody, and it could be one on one, or you're talking to just a couple of people, you have a workshop where you get together some very specific stakeholders, you know, to capture requirements, or more likely to resolve differences, you know, that you're hearing in the requirements, so that she can get to close your quickly. And so those you have a workshop, and it's something facilitated, so that it doesn't just become a random walk, but you basically accomplish some specific, you know, goal, focus groups, or you know, where you have people like, say, if it's a commercial product, where you need to be able to reach out and touch a variety of different, you know, user groups, by, you know, a age, sex, race, etc, you're able to do that, to see how that product idea might resonate with those different user groups and then get get get feedback, you know, with one sitting from abroad, you know, perspective of a broad selection of potential users, observations, you know, somebody comes in, and they tell you what they do, and then you're going to automate it, and then they leave stuff out. So you go watch them, and you're able to then capture some requirements that maybe they didn't tell you about, because they're so used to doing whatever it is that they're doing. They just forgot to mention it. questionnaires are a good way to go out and reach out and touch a lot of people very quickly. But you know, of course, the response rate is low. And you have to be, you know, so there are things you can do to try to increase the response rate. But even still, you know, if you're going out and sending a survey out to a million people, you know, on the response rate is 5%. Well, hey, that's still a lot of a lot of responses. So, you know, the important thing here is Thinking about how you craft the questionnaire so that you don't bias the results, you know, and just get information that's been biased and directed in a certain direction. And, you know, basically the, the results would be erroneous, then system interface analysis is just looking, okay. It's similar to that context diagram, where you're looking at different systems that the application has to interface with the same thing here, you know, it's like, Okay, if this is going to be an application that touches a variety of systems will, you know, looking at those inputs and outputs, and determining how that informs the requirements for the application, user interface analysis does, you know, kind of working with the UI and how, you know, how easy is it to use, how intuitive or not and typically that's done by a lot of testing, you know, in a lab, where people, you have people walk through the application, you ask them to do something, and, you know, see how long it takes them, if you're able to do it. And then if they are, how long it takes, and document analysis, where especially for something where it's like an existing process, or existing application that's going to be replaced, then capturing requirements from, you know, the existing documents that are that are out there. We talked about personas. And, you know, the reason that teams will create personas is so that they can get a better understanding of a particular user class. And so they just kind of come up with this representative biography, you know, in this case, Fred, who's going to represent the chemists that are using this chemical tracking system. And then, you know, by having a better understanding of the user, you know, the different user classes and what they're concerned about, you know, or not, you can have more empathy as you build the system, you know, so that, it's going to work for them in the way that it needs to. And then you have product champions, you know, which are advocates within an organization. So if it's like an internal application that a company is going to use, like in the case of the chemical tracking system, well, you know, my, you might want to have somebody like Fred, who's a product champion for the chemist. And so it's kind of part of your extended development team. And so they, you know, represent that particular user group to the development team and help prioritize requirements, eliminate in consistencies you reconcile and consistencies, the requirements. And then they advocate for the, for the application, once it's, you know, once it's launched, so that people will adopt it. We talked about use cases, and you know, kind of the use case, title, you capture information from users, they tell you different things that they want to do. And then you come up with a very concise use case, title, which is just verb object, which describes, you know, what it is that the user wants to do. And so, you know, we talked about last time, say it was an airport, check in kiosk, you know, check in for flight, print boarding passes, change seats, you trying to just capture, what is it that, you know, you if you and I are flying, you know, and we're using this checking kiosk, you know, what is it that we want to do? And, and and then describing that in a concise way with this use case title? And then, you know, then you go on to then say, Okay, I'm going to get some additional detail around a particular use case. So in this one, you know, it's request a chemical, and you've got, well, what's gonna trigger that use case? Well, somebody indicates that they want to request that chemical, there must be a button, they go request chemical. Okay, that triggers that particular use case. Well, what are the preconditions? Well, you know, has this person been authenticate? Are they so that means Are they a part of the company? Probably, okay. Yes, check. They've been authorized to request chemical suppose probably, you know, in that company, not anybody can go in and request the chemical. The chemists can request the chemical, maybe some supervisors or whatever, you know, stockroom management, maybe, but not it, not everybody, so you got to authorize them. And then you got to make sure that the inventory database is online, otherwise, it's not going to be functional, you won't be able to implement, you know, they won't be able to do anything. And then post conditions are, hey, what that request is stored in the system, and then it's sent to the stockroom or the buyer, you know, so the stockroom if we have it to go have it delivered to a certain lab, or to a buyer to go buy some more if we're out and then you got normal flow. Alternative flows, you know, it's the normal flow is hopefully we have it. And then so what are the steps if we have it? And if we don't, then it goes to a vendor? And so what are the steps, you know, there, and then what's the exception, you know, an exception is it's just not available, you know. So, anyway, so this is really a lot of document documentation associated with the use case, versus a user story format, where, up there, this information is captured in conversations with the development team. And since they're focused on a very short delivery cycle, you know, for a sprint that two or three weeks, I mean, they're writing this stuff down or whatever, and trying to figure it out, but it's not like a big document or whatever, it's just they go, okay, for this request, the chemical product backlog item that we're going to take on this sprint, let's get together, you know, the stakeholders and figure out, you know, more detail around what what's needed. So more of it happens in conversation versus, with the use case template use case approach that explore, you know, war, in a waterfall approach, more documentation that's used. a use case diagram is a way to visually kind of describe, you know, the different actors and the use cases, they're going to participate in, you know, so you got stockroom buyer, somebody managing the training database, somebody, you know, representing the Health and Safety Department, and then the chemical requester. And then here are these different use cases. And it just says, okay, who's going to interact with, you know, the search vendor catalog use case while the buyer, you know, nobody else needs to do that, because the buyers responsible for going in ordering, you know, some chemical from from from a vendor. So this is just a visual way to kind of describe the use cases, and then the involvement of different actors with those specific use cases. Okay, so that's kind of last time. Now. Now, we're going to talk about the Project Management Institute. And this project management body of knowledge. And, you know, we're not going to go into granular detail, because your mind would numb over. I mean, I've got a PMI certification. And I've, you know, I've got certified as a scrum master and product owner and stuff like that. And I got to say, that it's like, you know, there is like, a, if there's a cure for insomnia, you know, it's like reading the, the what's called the Pim Bock, the Project Management Body of Knowledge. So, I mean, there must have been like, Oh, I don't know, 700 800 pages worth of material, you know, that you go through, and then you sit down for like, Oh, my gosh, it must have been like a three hour test, you know, online test. And I'm like, at the end of that man is just like, you are, you're just totally fried. So we're not doing that, oh, we're I just want to kind of introduce you to it. Because you may, you know, depends on who you work for, you know, you may see this, I mean, you may see the structure, you know, reference and it, they have, so they started out in like, 1969. So, like I said, That's why, you know, the space race was occurring in the 60s, and, you know, the US, so you're taking on very complicated projects where, you know, different elements of a product or launch system were being built all over the United States. And, you know, they just came to the realization that, wow, you know, we don't have the structure in place to manage this level of complexity. So that's kind of where it started. And so, you will find this use, you know, in industries where, you know, you have complicated product products, like, you know, Boeing with a an aircraft is a very complicated product, an automobile is a very complicated product. So, for those industries, you know, you will find this leverage, and there's a reason for that, because it is, I mean, you need a lot of structure, to be able to manage all that complexity. Now, they started out, you know, it wasn't so much there wasn't a focus on software. And then, you know, they kind of saw as the Agile movement got more and more traction. They say, wow, you know, we need to, you know, we need to kind of expand what we're doing to encompass software development. And it wasn't just the Agile movement. I mean, they just realize that, hey, software, is part of everything. I mean, it's like in a car is there is there software. Oh, yeah. I mean, there's all kinds of CPUs and embedded software. where, you know, in applications that are used with cars with planes with avionics, etc. So, you know, it became a larger and larger part of the equation in developing a product. And so they have grown to kind of encompass that. And then you know, when the key products is this project management body of knowledge, this is kind of like a Bible for project management manager, and it's got, you know, the standard terminology and guidelines of like, Hey, here's how you should manage a project. So, you know, and the way it's structured, is they have this, you know, kind of a beginning, middle and an end, you know, in the beginning, you got this planning area. And this is kind of how it ties to software development, lifecycle plan, analyze, design, and implement, you know, you got this planning phase, where you're starting the project, which kind of culminates in a project charter, which you can kind of think of as, like, the vision and scope document that we talked about last time, that's, it's like that. So there's some detail, but, but it's it's very high level, you know, it's really kind of a high level view of what's gonna happen in the project, then there is this planning, planning analysis phase, where, you know, this is where the project management plan occurs, and all the requirements are generated or whatever. So, you know, if we go back, where was it? Here, yeah, this is what's happening, okay, this is where all these requirements are being generated. And so that's why it kind of ties more to like a waterfall sequential, you know, approach, which is obvious, based on the way this flow, this, this looks, okay, then you get into, okay, let's actually do some work here, you know, and so you're carrying out the work, and so there's design and test, and then they have this, you know, period at the end to close the project down, you know, so all the deliverables have been accepted, certain things have been archived, if there's contracts, those are closed out, or whatever. And so this is kind of the cycle that you move through, you know, for the project. And here, they talk about, you know, cost and staffing level. So it's kind of like, okay, it's ramping up, but it's still pretty low. And then we're actually doing a lot of work and says a whole lot of people, and then things ramped down, you know, pretty quickly at the end. Okay, so let's, we'll just talk about this hierarchy, you know, and kind of the structure that they recommend. So again, you've got these, what they call initiating processes, planning processes, executing processes, and then closing, and wrapping all the way around in our monitoring and controlling processes. Okay. So there's a whole lot of monitoring, and a whole lot of control, like going on in a, you know, PMI, you know, sanctioned project or whatever. So in initiating, you know, obviously, that's where you're kind of kicking off the project and getting, you're really getting authorization to start planning is where, you know, you basically establish the scope, the objectives, and come up with the requirements. Executing is, you know, where most of the time should be spent, you know, where you're, you're kind of carrying out the work, whether it's for hardware development, or software development, and then integration and as well integration testing. And then this monitoring work is where you handle changes. So like change control, you know, if you think with like, aircraft, or any, any complex product changes, you know, it's kind of like whack a mole, you know, one area, you know, pops up, whatever, and there's some change in one area, it tends to then cause an impact, you know, in some other area. And so, change control is really important, you know, with these complicated projects is so they have like a rigorous tight, you know, process to be able to handle that and that's really where it's happening in this monitoring and controlling process group. And then they got the closing process group again, where you kind of you know, ramp down the, the project. And so, this is kind of like from top to bottom, you know, kind of the flow from one to the one to the other and some kind of touch points, you know, and so, this is kind of like a high level, you know, document of, of the PMI, you know, process. Okay, so now We'll walk through, you know, this structure that they, they recommend. And so it starts with these process groups. And so there's 47 processes that ensure the effective flow the project through its lifecycle. And then within each of those processes are kind of tools and techniques that are recommended to basically carry that out. So, you know, what are those things? Well, develop a project charter, developer, project management plan, plan, scope management, you know, so you can just kind of read through, okay, here's, you know, here's what's happening in that particular process group. And then, kind of horizontally, are these knowledge areas that represent basically a complete set of concepts, terms and activities that make up an area of specialization. So, you know, to make it easy, it's like, you know, there's bean counters, you know, with every project, say, Hey, who's really worried about our costs? And are, you know, making sure we're on budget, and we don't have any cost overruns, or whatever. So that's kind of a specialty, a knowledge area specialty. And you see kind of the initiating process group, there's nothing? Well, you know, the project hasn't gotten kicked off yet. So okay, yeah, we're not gonna have any processes tied to project cost management there. But in the planning phase, you know, you are you're kind of laying out Well, you're coming up with the assessments, every by everybody, every group, you know, say we're responsible for some component or some piece of software, we're gonna, you know, whoever manages that group would have to come up with a way how many people Am I going to need? How long is it going to take or whatever, and that would drive the cost for that particular element. So so that you that happens in the planning phase, and then over here, in controlling, we're just controlling that we're just saying, hey, how's everybody doing? Are they on on their costs? Are there any cost overruns, or whatever, and that becomes a potential risk. So anyway, that's just one example of a knowledge area. Another is kind of like schedule management. There's one for quality, there's one for people management. So these are like, horizontal layers that go across the entire, you know, project. Okay, so, so let's just, like look at something in detail. So it's like in the initiating process group, there's this idea or this process of develop Project Charter. So then if you click down, you know, you you would see, okay, as a project manager, if I'm responsible for a project charter, okay, I'm going to have an output. This is Project Charter, we're, what are my inputs? Well, I've got a statement of work. I've got a business case, and like, why are we doing this thing? Well, we're gonna make make money, like, we're gonna sell a new aircraft, or we're gonna, you know, we're gonna make a bunch of money. What are the agreements? What are the environmental factors, the Organizational Process assets, that's another lovely thing about PMI come up with these really great terms that nobody understands. Anyway, so these are the inputs. And then they always have these tools and techniques, and you'll see expert judgment, you know, used a lot, or the case here facilitation techniques, which means like, hey, this, this PM, you know, come up with the project charter, they're going to talk to a lot of different people. And there's going to be some negotiation about, like, what's in the charter. And so that's where, you know, okay, they need to know how to facilitate those interactions. So anyway, this is what you would see this is kind of a template, you go to the Pim Bock Bible, and it says, okay, Project Charter, how do I do it or whatever? And then you get into Oh, sorry, you know, some of the details like, well, what if I'm developing a project charter? What am I doing? I'm going to have the project purpose or justification. Well, what are the you know, project objectives and success criteria? What are the high level requirements? So, like I mentioned, you know, there's a lot of overlap with that vision and scope document that we talked about last time, you could kind of, you know, equate the equate the two. So anyway, in the last lesson, we talked about con bond and Scrum and I had that little, some of the other agile techniques, and your extreme programming and rub. And we had one from like, prescriptive, to adaptive, you know, like, work on bond, you know, other than, like, firm whip limits, there's, there's nothing I mean, it's basically you can do what you want to do, you know, it's like, it's, it's not prescriptive at all. Scrum, there's a few more, you know, it's like, Hey, you should have these roles or whatever. The sprint should have this structure. There's a little bit more definition but it's still pretty, you know, it's not very heavy weight or whatever. And then you remember rock was like, you know, had a whole bunch of stuff. This is like Rep on steroids, okay, so this is like, you know, all kinds of structure here, you know, very, very prescriptive or whatever. So anyway, this just kind of gives you at a high level, this is kind of how the PMI, you know, project management process works, they've got these process groups, with all these processes, you know, the 47 processes, underneath each of these areas, initiating, planning, executing, monitoring, controlling and closing. And then horizontally, you've got these knowledge areas, where you're gonna have specialists, you know, you're gonna have people that know how to do schedules, you, they know how to do Gantt charts, and critical path management or whatever, you got bean counters, you've got quality management people. So these are kind of the specialists horizontal, you know, rows, where they're focused on certain parts of those processes. So anyway, so that's, you know, in a nutshell, I just, you know, save you months of study, and you know, a three hour PMI test. So anyway, so this, this is in a nutshell, and again, I'm not, you're not going to see this on the final, I mean, there's a few things I mean, that I'll talk about, that will be on the final, but I wanted you to have it, because it's like you may you may see it, you know, you may see this structure, huge that the accompany that you go to. So, you know, for the software project team, I mean, you're gonna have the usual suspects, you'll have like a project manager who will be managing this process, you know, by using those processes that we just discussed, there may be a product manager typically does from a marketing marketing organization is kind of working with end users and might be concerned with things like product packaging, and user documentation. There'll be UX UI designers that are obviously responsible for the look and feel, you know, the software and hopefully making it you know, user friendly and intuitive solution managers should, especially for internal development efforts, they work with the end users and you know, demonstrate the product capture feedback. So they're kind of a, you know, a technical product manager, where they can kind of get down to, you know, have a better understanding of the application, the functionality of the application, and it can be a liaison, you know, that's what it says here with the end users, there may be an architect role is somebody who's kind of responsible for the end and integrity of the of the system, because you might have different groups working on pieces of it overall application, and, you know, somebody, hopefully, a few people have the big picture view of how it all, you know, fixed fits together. And so that would be like a system architect, who's developing the code or the developers, hopefully, they're testing their code as well. But then you may also have QA, a special test organization, that is response, maybe responsible for system level, you know, testing, and just, you know, beating up on the hardware, trying to make sure that it's robust for a lot of different, you know, conditions, and use the documentation, you know, who's developing the materials that, that users would would have access to, to help them use the product, localization, you know, for companies like say, Microsoft, or anybody else that has a global footprint, you know, localization is huge, you know, you got to be able to get documentation and the UI into the right language for the particular country that the product is going to. And then you may have, you know, a specific Build Team release management team. So anyway, very, you know, very similar across the different software development, you know, project management methods that are used, you find this the same same types of people that are working on the team. So, one of the tools that's, you know, often used with the kind of a PMI approach are something called racy charts. And, you know, racy raci stands for, okay, who's responsible, accountable? Who do we need to consult or inform? So yeah, so say for example, you know, you've got some different things that happen to happen on a project like create a charter Well, you know, who is going to be creating the charter it looks like bands got the primary responsibility, but then and is accountable, you know, some probably band reports into and, and so and ultimately accountable, the band's gonna probably be doing the work. And then Carlos, Deena and Ed have to be informed of what's going on. For collect requirements. Carlos is primarily responsible and seems like demon Ed are going to be working with Carlos to really, you know, develop this requirements. And then in this case, Ben is going to be accountable for what's finally developed. And, and just needs to be informed. So it's a way to kind of figure out who's doing what so you can use this for, for anything, you know, any project that you're you're doing. And it's simple, but don't underestimate, you know, its effectiveness, you know, so if you're in a situation, whatever it is, and there's work that has to be done. And it's kind of unclear, like, Hey, who's doing what you might suggest the raci chart, you know, it's like, Okay, well, what are the different things? What are the different activities? Who needs to be involved in? Like, who's doing what, you know, it's a, it's a way to get that clear, you know, because especially if somebody's, like, hey, Ben, you're responsible for the charter and Ben's like, No, I'm not I'm not doing the charter, you know, I mean, it starts a conversation, you know, so you can get some resolution of who's doing what, so this could be used on ama, not just software projects, but any any type of activity where people need to come together, you know, a team needs to come together to get some work done. Up. So now, this is something that's unique to these very large PMI private show here is something called a work breakdown structure, you're like, Oh, my gosh, what are we talking about, or whatever. So what we're talking about, is dealing with complexity. So let's say we're putting, you know, we're responsible for the next, you know, Boeing aircraft. And it's like, you know, what, there is a whole lot of stuff that's got to happen, you know, for for that product to be released, including, you know, a whole lot of software that has to be developed. And so what happens is, you come up with this work breakdown structure, which is a hierarchy, you know, really of the work that has to happen, and into these buckets. And then these buckets are then assigned, you know, an account number account identifier, and basically that report that that then it ties to responsible organization. So what they do is they sit down, you know, they're in this, they're in that planning phase and figure out, well, what's all the stuff that's got to be done? Unfortunately, like, even if we were doing something as complex as an aircraft, you know, hopefully, we did one before, you know, say, okay, we're not starting from zero, you know, we're starting with a, we've done something in the past. Okay, well, what worked in the past? Okay, well, maybe we'll use that work, breakdown structure, what's new, what's different, you know, and then come up with some work breakdown structure elements that cover what's new. And then within each one of these areas, you'll have the account identifier, obviously, a description of the work, what are the assumptions and constraints? Who's responsible? What's the schedule? What resources are required? What are our cost elements, so it's just like this little, you know, compartment, you know, which captures the work that has to be done, and then everything for it to occur. So it's not just the requirements, but it's like, well, what are the resources that are needed? What's the schedule needed? What's the acceptance criteria, so you can see where this lens, it leads to a lot of documentation, you know, because this isn't just walking around in somebody's head, you know, this is down in paper, and it's all mapped out so that the organization can have confidence to say, okay, we're not, are we missing anything? No, I think we got, I think we got everything covered that that's the idea behind it, or whatever. You might see something like this on really large. I mean, certainly, like, when I talked about in automotive, automotive, aerospace industry, with very large software development projects. I mean, I've never seen it by say, at Microsoft, you know, where something was broken down, you know, like this to this level of detail, whatever. But that's not to say that there aren't organizations that, you know, might do that might have a work breakdown structure for a purely software development, you know, effort, not a complicated system, like an aircraft, whatever. But anyway, so this is what's part of the, you know, the, or what's covered in a work breakdown structure. Now, what happens? You want to develop a schedule, I mean, obviously, any with any product development effort, uh, the management everybody's like, very interested in, well, when's this thing gonna release, you know, and so scheduling is important. And so you know, you've got these work breakdown structure elements, and they have schedule, so somebody's got to combine each one of those elements into the overall whole And then integrate it together, you know, there's going to be dependencies in these work breakdown structure elements, you know, maybe an element is dependent upon some other group to do something, and maybe some other group is, is dependent on, say what we're doing, you know, and until we're done, they may be delayed in some way or whatever. So anyway, there are just different scheduling methods, and tools that are used to be able to come up with this project schedule. So we're not, we're not going to go into this in a lot of detail, I'm just gonna kind of give you a flavor of the type of, you know, schedule formats that are that are out there. milestone schedules are quite common, or whatever. So this is where, especially at a high level, a management level, you'll typically deal at, at this at this, at this level right here. So as an example, we had the company I met, we have a board meeting every couple of months, and you know, we're these are the investors in our company, and they want to know, Hey, how are you doing? or whatever, like, we got a new product development effort, you know, what's the schedule, we're not over here, you know, in a detailed schedule, we're here with a milestone schedule, you know, I'm like, okay, when are specific things, you know, going to happen. And on rare occasion, and say something, say there's an issue in one area, we might drop down into more of a detailed schedule. So the decal schedules are more at the working level, you know, and just trying to keep the keep the trains on schedule, whenever I'm looking at these diff different interdependencies or whatever. And so, you know, the different managers are working this and say, oh, wow, there's the delay in this one item, and how's that going to, you know, affect a downstream stream item. So that's kind of what happens, these detailed schedules. And here, you're just trying to capture just major, you know, high level deliverables for a particular project. Another tool that's used is something called critical path schedule management. So, you know, and it's used with these, like a Gantt chart, where you have, you know, you have these interdependencies, these ties, what this is saying is like, hey, this item, you know, feeds this other item here. So, you know, there's certain things that we're something can't start until this other thing is done, or whatever. And so you'll have this scan schedule, but then you'll want to know, like, Hey, what's our overall schedule, you know, somebody like the leader of that organization is gonna want to know, what's this sick, continuous use the aircraft metaphor? Where's the plane going to be? You know, when can we have our first delivery to our launch our initial launch customer? Well, okay, there's a whole lot of moving pieces, whatever. And what will inform that decision is the critical path schedule. So this is like a super simple, critical path schedule. And you got to get the legend down here. But you see the duration here. So just look at the durations in these boxes right here. And so you see that we got activity, activity, A, B, D, and C and A starts and it feeds B, and C. And then everything finishes up, you know, the B and C, finish up and they, they, they feed B, okay, and he tries what's the critical path? Well, this takes, you know, five or six hours or days where the day is five days, B takes five days. And then D takes 15 days. Okay? Well, that's, you know, 25 days with this path, and you go down this path, and you see that it's 30 days or whatever. So, right now, you know, somebody would say, well, gee, what's the critical path? Well, it's AC D, you know, because we could shorten up let's just say, we took bead from five to one, does it? Does it pull the finish date in sooner? No, it doesn't, because a C and D is the long pole, you know, until until this path is reduced, the finishes and going to be reduced. So like right now, if we got C from 10 days to five days where you would shorten the path, okay, so now instead of the path be 30 days, it'd be 25 days. So that's where that's the whole idea behind critical path analysis is you've got this very complicated Gantt chart with all the interdependencies set the right way. And then as time goes on, and certain things slip certain things accelerate, the critical path is always moving or whatever. But you know, if you want to pull in the date, you know the launch date, say on this aircraft, you got to be focused on the critical path. You know, and then you're not only focused on the current critical path, but typically the schedule, the team that's worried about the schedule will then be looking at Well, okay. ACD is the critical path now. But say this was a very complicated chart, what's the next critical path, say we solve ACD, or what's the next one, whatever. And they might have plans, you know, in place to kind of reduce, try to reduce other activities that are occurring, so that, you know, they can get the overall schedule to be reduced. And this comes into play, you know, typically, when a project launches, there's a certain date that you say, in this case, the plane needs to be ready to go to deliver to an end customer. And, you know, if everything goes on track, and you're on schedule, you're fine. You know, and probably a lot of heroics are not going to occur. But then typically, what happens is, it's not on time, something's late this happened, or that happened or whatever. And then there's like, Okay, how can we pull the schedule in, and then you have a critical path, you know, assessment. And by reducing the durations on critical path items, that's how you pull the schedule, in this case, from 30 days, maybe down to 25 days. And once this is 25, you look at Well, okay, how can we, you know, reduce a, you know, from five days to two days, wherever, anyway, that's, you know, what happens with critical path management. Okay, let's do let me hop out of here, and we'll do a initial knowledge check. See if anything, any of this makes sense here. Okay, so you should be able to see see it now. So take a couple of minutes and complete those questions, and then we'll review it. Okay, let's go ahead and take a look at the results. So the first one, the Project Management Institute was started by the creator of the Agile Manifesto. No, that's me having a little having a sense of humor. So the Agile Manifesto You know, was created by different leaders in the soft well thought leaders in the software industry in 2001. And the PMI organizations have been around since 1969, or whatever. So those are, you know, totally different groups. And then like I said, over time, the PMI organization has tried to embrace software development more, but kind of within the context and the structure that we, you know, that we just talked about, and the Agile guys are I mean, it's a totally different, you know, totally different animal. Okay, a two responsibility assignment matrix raci describes the participation by various roles and completing tasks or deliverables for a project. So 100%, you get that right. That's true. That's right. A work breakdown structure is a higher level decomposition of the total scope of work to be carried out by the project team to accomplish the project objectives and create the required deliverables. That's, that's true. Yes, that's exactly what it is, you know, it's kind of a hierarchy of all the work that has to be done. And the reason you do it is you do it for like, very, very complicated projects, where there's just no way to, to manage it without, you know, having that that type of structure. The critical path schedule is the segment of the schedule that contains the features most desired by the customer. That's false. So you know, where critical path schedule is what you need to focus on the pool in the release date, you know, of a project. So like I said, you know, like on that one example, it's like, it took 30 days on one path and 25 days on the other, you know, if you if you focus your energy on getting the 25 day path down to 22, or 18, is that going to reduce the overall end date to ship the product? No, because it's not the critical path, the critical path is the path that we ended up on 30 days. So you got to figure out, okay, what's the critical path, if I put my energy there, we reduce the timeline on some of those particular activities, then that's how to pull the schedule, and it has nothing to do with the, you know, the features that are most desired by the customer. I mean, the goal is to ship an overall product to you know, a customer, and and do that in a timely fashion as you can or whatever is, so critical path management as a way to help you do that. Okay. All right, let's get back. Get back out of here. Okay, so we'll also just talk briefly about developing, you know, a project budget. And so this kind of is part of that roll up, you know, within the work breakdown structure is, you know, you got to figure out, well, what's the work that has to be done, and then, you know, each group that work will be allocated allocated to different groups, and then they'll have to say, okay, based on, you know, what's the scope of work, and what the requirements are, you know, here's the team, we're going to need, and here's the schedule that we'll need. And once they know, the team, I say, if it's software development, which is highly driven by the number of people, you know, that are actually developing and testing, you know, the, the code, then they can come up with this activity cost estimate. And then the way the structure works in PMI, it's kind of like an estimate layered with some buffers. So, you know, the team comes up with a cost estimate. And then there's a little buffer, you know, they put on it because, hey, you know, it's an estimate, you know, and so they need to have some buffer, because, hey, they're probably gonna, you know, they may underestimate how many resources they'll need or whatever. And then, you know, then these activity cost estimates roll up into like a work package estimate. And so kind of think about this as layer. So hierarchy and management, you know, and so for these control accounts, this will tie to a particular manager, and there'll be several different activities that are occurring, that tie into that manager into that control account. And so that manager will have a little contingency reserve as well. Okay. And then all that rolls up into this cost baseline. And then the Grand Poobah, you know, the person who's overall like, in a Boeing example, again, you know, they have a program manager, you know, like for an aircraft program, so somebody who, you know, was responsible for the 737 max or is responsible for the triple 7x program, you know, and so that that person has overall responsibility for that aircraft program, and then they'll have a leadership team, and then you know, so that person and their key directs will hold this management reserve. And so what will happen is just this project goes on, and you got this cost baseline, and then hopefully, you know, expenditure stay low. I mean, if it pops up ahead of the baseline, then you're really in trouble. Because you might be in trouble even with this example. But, you know, what happens is the expenditures are below what we budgeted, oh, and then they get to this point where they're no longer below what we budgeted. And so we start eating into these reserves that we talked about, but these are reserves at the activity, contingency reserve and contingency reserves at the control account level. Okay, but you know, if it goes bad enough, or whatever, you're not bad enough, but if it gets to a certain level, you start tapping into the management reserve, okay, and this is, is handled through a change control process. So typically, that would happen for like schedule delays, or cost increase in cost is, you got to go before, you know, Miss management group, and say, Hey, what's going on? And, you know, it could be just some example of, well, you know, we're developing XYZ or whatever, and we're finding it's a little bit more challenging, we don't have the expertise needed. And so we're gonna have to go outside and hire some consultants to be able to help us and, you know, here's what their estimated costs are to deliver that, and so that's gonna, you know, blow our budget. And then, you know, the managers then have to determine Was it worth it? I mean, you know, they've got, they may have several competing things, you know, that need that need budget. And so they'll have to decide, well, what's the highest priority, you know, and basically make those allocations based on the highest priority. So anyway, that's kind of how that process works, or whatever. This is an example. You know, like, an r&d budget, where, you know, you have personnel costs, this is like, okay, here's your software developers, your test organization, you know, you may have a manufacturing organization, there may be professional services, so outside consultants that you leverage anyway, including, you know, you have travel entertainment marketing, so this is like an all up look at, okay, what's, what's the cost or whatever, 10 produce a particular, you know, product, and at the work breakdown structure level, you know, it's just being allocated into, you know, bite size morsels of, okay, what's the work in that, in that work down that web element that has to occur? Okay, so that's like managing the budget? Well, how do we manage quality? Well, there are variety of tools that are that are used, some of which are applicable, as broadly, I mean, so these are all meant to apply, you know, broadly the hardware as well as software development. So you'll have things like a cause and effect diagram, which is known as an Ishikawa diagram. This is also kind of a structure that's used for the the feature tree or whatever, but when it's used as a cause and effect diagram, you start with what the problem statement is. So that's the, that's right here. And he basically said, we got some problem, and you're trying to figure out what the potential what the cause is, and so you'll have these offshoots off of the spine of the fishbone diagram of potential causes. And, you know, basically, what you're trying to do is determine the root cause. So you can correct whatever the you know, the problem is, so this is something you know, wherever you have problems, you have problems in software development, as well as hardware development, you know, you could use a cause and effect diagram, then you flowcharts are kind of used to basically sequence steps and the branching possibilities for a process. So, this is where you could map out a process that's, that's in place, and say, there's some issue some quality, you know, problem with the process, try to pare it out, well, where in the process are we experiencing, you know, the problem. So first starts out with basically knowing what the process looks like mapping it out, so that you can then you know, analyze it up, check ceaser use also kind of known as tally sheets, to just simply, you know, capture information and data about a problem. And then once you have that data captured, then you can use things like a peredo diagram to help you visualize the process. problem and focus your energy. So the whole thing with parado is, you know, work that has been done, where it indicates that typically, there's a few, a few things or levers, you know. So it's like the 8020 rule. So it could be, you know, a vital few sources, a problems or car causing 80% of our problems or whatever. So it's like, until you capture data, and then plot the data, you may be focusing on the wrong area, I mean, you don't want to focus on something, it's like, hey, it's causing 1% of the problems just to say it's like, you know, downtime, and a server or whatever. And, you know, you kind of do tally sheet and then a peredo diagram, you don't want to be focusing on the 1% case, you want to be focusing on the 80% case, in a peredo diagram, but it's not always obvious, you know, it's not, you could be looking, you could be, you know, looking at a variety, a variety of different potential causes of issues. And it's not immediately obvious that maybe that's the 80% case, that's why you got to capture the data plotted, and then it becomes a lot more obvious, oh, you know, here's what's, you know, causing our issue. So a lot of times this can be used with, like, you know, in customer call, so, like, you launch, you guys are developing software applications, you launch them. And then say you have some some customer support, capability, you know, people call in, and they say, Hey, I'm having trouble with the application, when I tried to do such and such, this happens, or whatever. And, you know, so over time, you'll get a lot of feedback from customers on stuff that's not working the way at least they think it should. And then you plot that out, and you go, Oh, my gosh, you know, we got this one area, which is broken, I mean, man, we're causing a lot of customer pain, anyway, and that's where a prayer diagram can help you figure that out. histograms are really good at looking at, like Central, you know, tendencies just looking at variation. And kind of like, Where's the mean, and then, you know, what are the outliers, kind of another form of a histogram is like a control chart, where you've got these upper and lower bands, and you kind of want the process to be operating around this mean, and, and you have these control limits. And if basically, the, you know, the system starts to operate beyond those control limits, then it indicates, hey, there's some corrective action, there's something's going on. Because you're gonna, you'll have, you know, caught what's the, there's a guy named Edward Deming, who did a lot of quality work, he basically, it's kind of interesting, after World War Two, and went over to Japan, and help help them rebuild their, their industry. And, and one of the things he helped them understand is statistical process control, to the extent that then that was used, you know, and then, and then the Japanese started developing really great cars, you know, cars, automobiles with very high quality, basically, using techniques that Edward Deming had gone over there and taught them anyway, one of the things was these idea of this control chart, where you'll have things called Common causes and special causes. Common causes are things where isn't variation, so you have some piece of equipment or some process, it's not perfect, every I mean, there's gonna be a little variation, okay, and then a certain very amount of variation is fine, it does not cause a problem, then if it goes past the, you know, control limits. Typically, you can, what can happen is you'll have what are called special cause. So, something happened, you know, say if it's a machine a piece of machinery, it's out of balance, and it needs to be calibrated again or whatever. So, anyway, these control charts allow you you know, to know if your process is in control, and if not, you know, then to take corrective action. And then finally, you know, of the seven basic quality tools or scatter diagrams, which can be used to explain, you know, changes in relationships of different variables. So, you have this idea of a dependent variable, you know, and if you have a corresponding independent variable, you know, that moves, whatever, you can see if there's correlation. So, scatter diagrams are really useful to identify correlation between you know, different variables. So, you know, if you, if you move say the x variable, and you get a corresponding move in the y variable, you know, and then there's a pattern you know, I say, especially like a linear relationship is okay. Those are very tightly correlated or whatever. If on the other Her hand, you know, you move with the axe, and you know why it's just a random walk, you know, there's no particular tie between the movement of x and the movement of y. He said, Well, they're there, they're not correlated at all. And so anyway, this can, you know, help as you're trying to identify, again, if there's quality issues, what might be causing, you know, one, another variable to move out of, you know, the band that it should be in another tool that's used, or technique, this use is something called design of experiments. And so this is very powerful. It's a very powerful technique, where, in a simultaneous fashion, you can identify the impact of changes in variables on a particular output that you're looking for. So this could be used for all different kinds of things. So like, this little chart here seems to be talking about like, well, length and depth, you know, and then the fabrication cost or whatever. And also associated with that might be the weld strength. And so, you know, say you're developing some product and you're, you're welding a pieces together, well, you want the weld the hold or whatever, obviously, I mean, from a safety standpoint, a quality standpoint, but you want to reduce your fabrication costs. So you kind of need to know, you know, well, what, what is my weld length and depth need to be I mean, what's the optimum place where I don't sacrifice any strength, you know, in the weld holding together, but I minimize my cost, whatever? Well, DLP is like all about that. But this can be applied to everything. I mean, like when I was at MIT, and we were studying design of experiments, we use this on chocolate chip cookies, you know, the very the ingredients, he's trying, okay, let's come up with the ideal, you know, the most tasty chocolate chip cookie, okay. And you vary everything, you know, amount of sugar and chocolate chips that you put in the baking temperature, you know, the cool how long you call it for, you feed it to people, you that you get the feedback on, Oh, I love this, or I don't or whatever, anyway, I mean, it's a very powerful tool, you can use it for a variety of a variety of areas. So it's not just hardware development, you could have software and that you're developing, where you're trying to say it's an autonomous system that you're developing, and you're trying to optimize the ability of the software to be able to detect targets and its path, you know, objects in a path with higher accuracy or whatever, you know, there are a lot of parameters and a lot of systems and sensors that could be used to do that. And be like, well, what combination of sensors and, and then and then not the sensor, the sensors could have certain calibration associated with them, you want to try to be able to optimize that to enhance the overall performance of the system. You could use DLP to be able to do that. So anyway, it's a real powerful technique, because maybe you know, if you haven't been exposed to it, I mean, you could do a whole class on DLP. So this is something you know that it's of interest, you could do your own reading. But it's a very powerful technique to optimize process system performance. Okay, let's take a 15 minute break, and then we'll come back and we'll kind of finish up the quality session the next. The next part of the quality section is really more tied to software development and stuff is in common use in software development. So let's, let's meet back at 730 and we'll we'll keep going. Okay, see you then. Bye bye. Okay everybody, let's get started again. COMM check. Can you guys hear me okay? Yes. Okay, thank you. Okay, now let's continue to talk about quality quality assurance but in a very specific software context. So, you know, at a high level, what is quality and kind of the way that's traditionally looked at is that the product conforms to some specifications and it serves its purpose, whatever that purpose is for the for the customer. And with quality assurance, it basically all those activities designed to measure and improve the quality of product including the process use training and preparation of the team. So even getting the the team ready to be able to produce produce a high quality product. The control quality control aspect is more making sure bad product doesn't get into what we call the field they're released into the hands of customers. So you want to be able to detect faults or defects, and then ensure those are fixed prior to the release of the product. Now, that doesn't happen, you know, a lot of times stuff, you know, a bug or some issue gets released to the customer. But the goal of quality control is to try to minimize that, and hopefully, you know, eliminate it. So, what are some different tech testing techniques, kind of the who's in what's, you know, of quality management? Well, who does the testing programmers, testers, users, both internal and external? And this is, this has been, you know, a shift. It used to be, you know, like, if Microsoft programmers, and then he had testers and, you know, they, the roles were seen, you know, very differently, like programmers. Yeah, remember, sometimes, oh, well, you know, I don't do tests, you know, that's not me, you know, it's kind of like a throw it over the wall mentality. And, you know, now the industry is moved in the direction of No, no, you know, it's your code, you're responsible for making sure that that's high quality code. And so, you know, it starts with the programmer, but then you may have, you know, people who have a test role as well, who, you know, could work with the developer to help them, you know, in testing their code, but also looking at, you know, the integration effort as the, as the code is assembled into larger chunks, you know, doing testing at that level, including automate developing automated test suites and harnesses. So what is, you know, what is tested? Well, you want to have a full stack of, you know, test suites. So, you know, it kind of starts with unit testing, making sure that, you know, if that functionality if the developer software that they're creating, if that is being tested, so it could be at a class level or method within a class. So you know, at that low level, and then fund functional testing, as individual units are put together, that they work as they should, and then integration system testing. So the whole complete system that that works well together. And so it kind of looks like this, you have all these different, you know, unit tests that are occurring, functional tests, component tests, then system tests, including regression, you know, testing. So, you know, how are like test cases determined? And then, what's the process? Well, one, one, you know, one way to develop test cases, is what's called, like, blackbox. Testing. And so this is where, you know, you look at this as, like, you look at the software as a black box, okay, I don't know what happens on the inside. But I know what it's supposed to do, you know, based on the requirement state statements. And so without consideration to the actual code content, tests are developed to basically see that the software conforms to these requirements. And so that's blackbox testing, grey box, testers may have a little bit more insight into the underlying system. But again, it's really kind of more of an external view of how the software is supposed to function. Then you have white box testing, which is more, you know, a review of the actual code and in a detailed understanding of the code, and then developing tests that will help, you know, validate that I say, a component, you know, perform such a spec. So, you know, an example could be unit testing with a developer, you know, that they, they're developing the code. And they know how to then test that to make sure that it's working properly. So it might be an example of like, white box testing. And similar to that, you know, you have this idea of test driven development, which, you know, really started with extreme programming in the 90s, where the whole idea is, like, even if you're looking at some functionality that you're going to create, you figure out how to test it first, you know, verify the test case fails, develop your code, you know, until the test case succeeds. And then, you know, you run the test again, very, okay. Yeah, it's, it's working now on so you continue to, you know, refactor the code if necessary, so that it passes that, that tests that you've developed. So that's where, you know, test. Quality is not an afterthought. But right from the beginning of the process, you're thinking about, okay, how can I ensure that this is going to work? Let me do that. First, you know, to test to make sure that when it passes that test, I know that it doesn't back work, because I put a lot of thought into it, you end up developing the test. So what are some observations about that? You know, obviously, you're right, more tests, you know, you're putting a lot of focus and emphasis on that. But you're also, you know, try to come up with simpler code. You know, that's one of the other aspects of extreme programming, is just keep it simple, you know, don't put it on a lot of bells and whistles, this is just what do you need to do to satisfy the requirement and in this case, like, pass the test. And, you know, some people could think, Well, hey, we're doing test driven development. And that's good enough, you know, that's like the gold standard. And that's important. You know, I mean, I think if if organizations are doing test driven development, they're probably going to be developing very high quality code. However, it's not everything, you need to still do, you know, integration testing, so maybe good idea to do, you know, code inspections, make sure you've got good code coverage in your tests and things like that. So. So it's an important part of your quality program, but you know, it shouldn't be done in I just an isolation. And then, you know, regression regression testing is done. And that's important, as you're developing, you know, new code and adding that, you know, into as part of your build, you want to make sure that, you know, what was working is still working, so that you don't break test cases that have passed before. And so that's the whole concept behind regression testing. And with this like DevOps model, where you're doing continuous integration, you're also want to have automated test suites that do automated regression testing. And if something breaks, you know, that was passing before, then, okay, that's so immediately flagged, and then, you know, effort can be put on fixing that, you know, understanding what broke, why it broke, and then fixing it up, and then there's other, you know, testing, vault testing can be done. Some of this is based on previous history, you know, similar projects, like error guessing, you know, where you kind of know, areas that have been problematic in the past, and you focus extra energy there. And then additionally, or guessing, error prone analysis, where through review, use it inspections, you identify areas that, you know, may have a high probability of containing defects. So, there's some, like system, systemic approaches, you know, to the developing high quality, and then there's more like, you know, judgment, you know, that this used to kind of which makes sense, you know, so it's, again, it's kind of like looking at the peredo principle, you know, if you've been developing a certain type of product, you know, you know, where maybe it's a little bit more fragile. And then it's like, hey, let's put more emphasis there, versus on these other areas that never cause us any problem whatsoever. So, you know, obviously, having a great architecture is going to help ensure that you've got, you know, good quality and architecture, not only in your software structure, but also in your test approach. So, you know, test your tests, check your code coverage, you know, there's tools out there to automate this so that, you know, you know, we got some gaps in certain areas of our code, we're really not, you know, we're not testing it adequately. And then, if you have, you want to have a, as part of your test automation, if something fails, you keep it out of the, get it out of the way, put it in quarantine, while repairs are happening, so it doesn't slow everything else down, you know, you want to continue to be able to, you know, make progress in the overall development effort. And so you'll have this test quarantine concept to be able to do that now. with continuous integration and automated test suites, I mean, the speed with which stuff can be corrected and then put back in the main line, you know, it's pretty fast now, but there still there may be, you know, examples of where, where it may take us a little longer to figure out what's going on and so you'll have this idea of, you know, quarantine area And then, you know, test automation has been huge. And it's going to remain, you know, very, very important to, if you want to speed bits, you know, into the hands of customers, you need automated processes and, you know, test automation imation is no, it certainly was very helpful part of that. And, but it's not to say you won't have, you know, manual testing, stuff, it might be hard to automate, especially that those areas that kind of mirror the customer experience, you may have some manual testing in those areas to make sure that you're, you know, testing those in an adequate function way. So then there's a question of like, Well, how do you know when to stop testing. And, you know, we always had this concept of the zero bug bounce, just kind of reflected in this top portion of the chart, where the number of problems that are being found, you know, like, you're kind of pounding on the product and trying to, you know, see if you've got issues or whatever, and you'll kind of go through this pattern of like, okay, yeah, we're finding a whole lot, oh, wow, it's just exponential. And then you get to this top part of the S curve, and then it starts to come down. And then it gets to this point where the number of problems found per hour is really low. You know, and so it's like, okay, we're, I think we're close enough. Another way, that I've never personally done or participated in organization that did this, but it's kind of cool. I don't know, I think it's kind of an interesting idea, is you embed defects in the product, and then you see how many are discovered. So I don't know who does this, but you've got somebody who, you know, basically is going to use some other group is, besides the test team, you know, or maybe the development organization that is responsible for the product, is injecting errors into the product. And then you see how many of those are caught? You know, and you get a sense of, Hey, you know, yeah, they caught the the errors that we inserted into the product. And that's a proxy. So, you know, for the number of ones that, you know, weren't inserted by, by by the group, you know, this nefarious group wherever they are, but are likely to be, you know, real problems that were in the product, you know, as as it was developed. So, anyway, so that's an idea, you get a zero bug bounce, or you could do something, you know, like this, where you see, okay, hey, we put in, you know, we put in 10 defects and they caught they found the 10 defects, they probably Yeah, and the, and these were defects that we put into various parts of the code. So it kind of indicates that they, you know, that we tested the product pretty well. And then, you know, there's nothing, I mean, kind of a, another gold standard is, you know, just code reviews, where this was something developed by Michael Fagan at IBM, where you get a small group of people together to study the code, and then analyze it in more detail. And, you know, basically do a code review and then identify errors that way. So basically getting you know, your colleagues together, they're all you're reviewing each other's code. And, you know, somebody gets gets identified, hey, let's walk through your section, you know, to a certain person, and they walk through, you know, the product and then, you know, different people say, Hey, what about this, what about that, and I may find different, you know, potential defects. And then the person goes after the, after the meeting is over, goes and works on that corrects it, you know, and the corrections are checked or whatever. So, this has been going on for a long time, and there's no reason why it shouldn't be done. You know, that you code reviews are still good way to ensure that you have high quality in the product. Okay, let's do another knowledge check. Okay, there you go. Just take a couple minutes to do that. Okay let's take a look at these. Okay, so number one management reserve is a pool of funds added to the cost baseline are used at management's discretion via change control process. So that is true. That's the purpose, they get a pool of funds and they dole it out based on priority, you know, the area that's overrun to a prayer diagram is a vertical bar chart that is used to identify the vital few sources that are responsible for causing most of the problems. That's true, you know, so pareo could be, you know, in this context, we're saying it's quality. So it's the problem, what's causing the problem. But a peredo diagram is just a great way to see where's the lever? You know, I mean, where are we going to focus our attention? And typically, there'll be this 8020, you know, principle, and it'll be like, well, 80% of the problems are being caused in this area here. So that's the idea behind it. design a design of experiments is a statistical method for identifying which factors may influence specific variables of a product or process. So that's true, yes, where you can simultaneously very different factors, whether it's the weld length, or width, or whatever, you know, and to try to determine how does that affect the strength and the overall cost to build the product? blackbox testing is the name given to the electronic box, usually black hook hooked up to the software to run unit tests. So that is false. Yeah. So. Yeah, I mean, you know, that black box, the reason that is, is that term is used, it's like people say, Oh, she has a black box. I don't know what happens in there. So it's this whole idea of, Okay, I'm going to test the software. I don't know anything about you know, the class hierarchy or structure, the methods All I know is, it's supposed to do the following things. And so I developed my tests, to be able to check that it does, in fact, you know, meet those external requirements. So that's the idea behind the blackbox testing regression. Testing, retesting are tests that are ensure that new code does not break test cases that have already passed before. So that's true. Yes. The guy idea behind regression testing, okay. Okay. So another another part of the PMI process is risk management. And, you know, for good reason. I mean, if you're talking about rebuilding an aircraft or something, there's a lot of risk, unfortunately, as Boeing, you know, as found out, you know, like with the 737 Max, and it be actually interesting to go back and see, if the problem with what was that thing called I forget the, with their angle of attack system, you know, if it was flagged as a as a major risk item. But anyway, so projects of any type, you know, typically, if you're doing something new, this risk and uncertainty is high at the beginning. And then hopefully, as the project goes on, you know, you're reducing the risk, and you're learning more, and so the uncertainty comes down. Okay. Another thing that tends to be true is the cost of changes, gets higher, you know, over time. So, you know, if you find something late in the development process, typically, it's going to be more expensive to fix. So it's like, Okay, this is typically how risk and costs vary over time. So, you know, given that, you know, what tools can we use to, you know, to help us. So, you know, one of the one of the tools is this risk management matrix, where you have the probability of an advance from, like, improbable to, you know, as going to happen a lot to the severity, you know, of the event. So marginal, and, you know, no big deal, whatever, to catastrophic, you know, people die, so, and then obviously, you can then score these little boxes, you know, because if it's frequent, and a lot of people die, well, guess what, that's a pretty high rating, you know, that's the highest rating, you can get in a risk management rate matrix versus, you know, if it's improbable and marginal, well, it's low. Okay. So again, it's a way to, you know, get the risk out on the table, and then put them in the box, it's like, well, what box are they in, because if it's down here, in this low box, you know, it's marginal severity, and it's improbable, you know, we don't want to necessarily spend a lot of energy on that, but this stuff that's in the red area, you better beyond that, you know, you better be focused on that. Or else you're gonna have problems. So, you know, like, one of the products that we're developing is a sensor for autonomous vehicles. And, you know, with a ton of systems, people can die, you know, and people have died, you know, with like, the, the Tesla, autopilot, you know, system and Uber is done, you know, they, they had an accident down in Arizona, where it was like, and they had a, they had a safety driver, but the safety driver was like, not paying attention. And so the system did not see somebody was walking, she was walking her bike across the street. And, you know, it The, the system did not respond properly, and the car didn't slow down, and it ran a road, you know, killed her, and it was really, really sad. And it was sad on multiple levels, because they had a safety driver safety driver wasn't paying attention, you know, and, and could have stopped the the accident or whatever. But anyway, and in the software for that system, obviously, there were some, you know, some probabilities of occurrence and some severities that were up in this area that we're we're not addressed properly, you know, and so unfortunately, somebody you know, was killed because of that, or whatever. So, so anyway, this is a way to try to get a handle on what the risk are, you know, for your product development effort, and then basically spend some time on coming up with mitigation plans. And you know, I mean, I've seen this in opera I'm at like a Boeing and, you know, it's one thing to have the process. Because if you don't have the process, well, then you're kind of blind, you're blind, you know, you got some risk out there, but you're not really sure how many are up in this area, you know, so you kind of do need to go through this process, and map your risk, whatever. But equally important, is the mitigation plan, like doing something? So sometimes I see the Yeah, when people go through the step of having this risk management matrix and process, but their follow through to mitigate the risk are not as good. You know, which defeats the purpose? You know, it's like, the, the purpose isn't that a cool looking chart, you know, the purpose is to fix problems that could kill people. So, you know, anyway, so sometimes, you got to have the process, but then you got to basically, you know, take action, you know, and actually mitigate the areas that are high risk. I mean, here's another kind of, like, a risk matrix of like, Okay, well, stubbing your toe, yeah, certain, but okay, you know, it's not that big a deal, you know, a fall marginal, you know, not as certain I don't fall all the time, but it's still likely, car accident is possible, either through your negligence or somebody else, whatever, that could be critical. People could could die. Certainly, with aircraft crash, you know, it's unlikely, I mean, aircraft are very, very safe. So it is unlikely, but, you know, a lot of people could die, you know, in an aircraft, and like, a tsunami is rare, but it was cast off. I mean, you could have 1000s, or 10s of 1000s of people, you know, that are killed. So anyway, um, it's just kind of gives you a mapping of how, you know, how, like, tools like this could be used, and then mitigation plans developed. So that's risk management. And then finally, in this whole PMI process, we'll talk about, like, stakeholder management. And, you know, this is this is more useful. I mean, this is helpful. Because, say, you're in a company, wherever, you know, Microsoft, or Google or Boeing, or whatever, and you're working on a software project, and maybe you're responsible, you know, for that for that project. And you have these various stakeholders that are involved, you know, with the, with the project, well, this, you know, a grid like this is a way to kind of map out who your stakeholders are, and kind of how much attention you should spend with them. So it's called a power interest grid. So this is like on the, you know, the bottom axis is like, interest, low to high, and then power, low to high. Okay. So, you know, obviously, if somebody's got a lot of power, and we think power, just think, how they can influence your career, okay? You know, if they think highly of you, well, then life's gonna be good for you at that company. And if they don't, well, life's not gonna happen, SCP is good. You know, and so that's kind of how you could think about power, is their influence over you personally, or your their influence over the project? You know, which tend to be related? And then, and then are they interested, do they care about the project or not, or whatever. So obviously, if they're in that high, high area, you got to manage them closely. And make sure that you know, you have good information and frequent information, you're keeping them in the loop, you understand their concerns, if they have any, you know, what's going on. And then, you know, it flows down a, you know, people that, you know, don't have a lot of interests, but they're still making a lot of power. You know, what, uh, you know, you still need to check in with them and keep them satisfied. And then so on people, you keep informed, and then people you know, you just monitor or whatever. So, it's like, you've got a limited amount of time. I mean, like, on the one hand, you're doing what you consider to be your primary job, which is developing the software, you know, that this is going to be really kick ass software, everybody's going to love I mean, that's the primary job for you and your team. However, these paluch don't ignore these political, you know, or these, you know, the stakeholders. So I have seen many cases of where a project was actually run pretty well. And the product performed pretty well. But for whatever reason, the the sentiment, you know, the bout that project was negative, okay. And what happened is some of the some people in the Manage closely, quadrant weren't managed closely. And somehow, they got off on this resor on a tangent that this, this project isn't being managed properly, and I don't like the outcome or whatever, when objectively, the project really was done pretty well. Okay. So you want to avoid that, okay. I mean, if you're having trouble with the project, well, you're having trouble with the project. And, you know, I mean, there's gonna be consequences with that. But if things are really going pretty well, or you could make course corrections to satisfy somebody in this quadrant, you got to be talking to them, and communicating with them effectively, you know, to be able to manage that, anyway, it can be a little overwhelming, you know, when you're first starting out, and it's like, well, this can be a tool to kind of map people, you know, and maybe you're wrong, whatever really believes you're trying to map people into these different quadrants. And it's not to say, you totally ignore the people in the monitor, you know, category, but it's just Hey, where, where's the emphasis, you know, the emphasis is going to certainly be in this quadrant here. And then maybe in the keep satisfied and keep informed, you know, as well, because sometimes the keep informed, they don't have a high power, you know, themselves, but they may complain the people that do, you know, so anyway, you got to map, you got to map it out, you got to figure out who you, you know, you have to communicate effectively with and then have a game plan to do that. So I just don't ignore this, you kind of think, oh, if I, if I just do a great job in my function, and we develop a great software, that will take care of everything else. And that's important. I mean, that is the most important thing, but it's not everything. So don't ignore important stakeholders. And then this is just another way to, you know, kind of map it, you know, you have these different stakeholders, and it's like, they're in the, you know, unaware, resistant, neutral, supportive or leading, you know, area. And, you know, if, if there's people that are resistant, well, you know, that could be a problem or whatever, and you obviously want to get people in the supportive or maybe even be championing, you know, to be champions for what you're you're doing. So you're feeding them information, and they are basically helping you to, to, to have to create the right expectation around the product, a positive, you know, expectation around what's what's occurred. So anyway, not to belabor this, but I find that, you know, I know that I did, you can kind of ignore this or whatever, and you ignore it at your peril, you know, so you need to think about that. Okay. And then finally, we'll talk about why secure coding, you know, best practices. And, obviously, you know, in the day and age that we're living in right now, code security is going to be everything. I mean, it used to be, I mean, this is the way it used to work at Microsoft, you know, we develop an application, and at the tail end of the process, we go through this security review, you know, and, and I think the guys and it was a different separate organization that was doing that. And there was like, some touch points with them, before we got to, you know, when the product was going to be released, but it was very much kind of throw it over the wall, do the checks at the end or whatever. And that's just not gonna cut it anymore. Okay, so security, like quality, you know, I mean, it's got to be baked in from the beginning. Otherwise, you're going to be associated with products that are hacked. And then customer social security numbers are released, you know, how many times my Social Security I've had like, four or five different, you know, situations where my data including, you know, sensitive data, like Social Security Security Numbers was was hacked in and bad guys got that data, you know, and so, uh, and then, you know, then you worry, okay, somebody is going to do like identity theft, or somebody's going to file credit, you know, they're gonna try to get credit. And so you have to do other things to protect yourself. And so it's, it's gonna it is a big issue and unfortunately, Because there's a lot of bad guys out there that are hacking into our power utilities, you know, going to be hacking into financial records, and, you know, it's just going to be super critical. So, you know, in addition to like cloud computing, and you know, really developing your professional expertise, with how to develop applications, you know, in the cloud migrate applications to the cloud, because that's just a huge pivot that the industry is taking. Each developer having, you know, knowledge of how to develop secure code, I think, is also going to be in that category or whatever. So anyway, here are some things you know, kind of a top 10 list or whatever, and then this gets back to, hey, verify security early and often, don't wait until the end, you know, make it part of your definition of done, you know, if you're using like, an agile Scrum method is like, okay, you know, if we're gonna say something is potentially shippable, that means that from a security standpoint, as well, so you don't wait till the end, throw it over the wall, you do it right from the beginning, you know, a common attack vector has been SQL injection. And so using, you know, query parameterization has been is an important way to, you know, to get around that type of hack where somebody is trying to access some database, and they insert some logical expression, you know, which then is true. And then this database is dumps all the, you know, customer data with social security numbers, other, you know, other important information or whatever. So, you know, that's a common attack parameter that needs to be dealt with encoding data. So, you know, one of the themes throughout this little booklet that I had you guys read is, you don't trust anything, okay? treat all data is untrusted and use, you know, input filtering and output encoding, so that somebody couldn't potentially insert some kind of special character that causes the threat and allow us for some type of penetration in a similar fashion, you know, validate all inputs, and maybe develop whitelist, for checking the syntax, so that, you know, that, you know, the data, you know, supposed to match a specific pattern. Yeah, all sometimes they'll be error messages, you'll get an applications where they've done that, where it's a little, it's a little irritating, like you enter like a phone number, and you put in a dash or whatever, in the dash, you know, flags a system, you know, like, some kind of like, they've got this little set syntax, and you're not matching that, but whatever, you know, I mean, they need to do you need to do what you need to do, to make sure that some special character can't cause a problem. Identity and authentication, you know, continues to get a lot better, you know, and so this will be I think, the common it is kind of the common standard now, is that you're gonna have strong authentication, but also multi factor authentication in including biometrics. So I, you know, I mean, like, I use Apple products, and I've got like, the facial ID, and I don't know, I love it. I mean, I hope it's, I haven't really done research on it, to know, you know, how effective that is, from a security standpoint. I mean, my assumption is, it must be really pretty effective. Or else, they wouldn't have snapped to that. So I think you'll you'll continue to see, you know, combination. And, and I, you know, I think the multifactor. Again, it's one of those where, if you would have asked me, you know, 10 years ago about that, it's like, well, what is your rotation, you know, I sign on, I use my correct password. I mean, now, pinging me for a text with a code, I've got to insert, whatever, you know, and people will be irritated. And maybe that's still true with some users today. For me, you know, having had my social security number hacked in five different systems, hey, more date, put, put in three different, you know, types of authenticate whatever you got to do, to make sure that the bad guys you know, can't, you know, steal my money or anything else about me, you know, so. So, again, I think that's, it's becoming widespread. And, you know, I think we'll need to stay widespread, including more, you know, biometric authentication, then maybe the system we'll come up with, I mean, another thing I use is, when I travel and I've been I've been traveling a lot, but there's, you know, system where you can kind of bypass some of security screening, and, you know, they use fingerprint as well as kind of a retina scan. You know, So there's more, you know, biometrics that are that are being used. And then, you know, the other thing is, in addition to authentication, having authorization, you know, controls within applications. So you'll have to think about that. I mean, it really depends on the type of applications you're developing. But you should give thought to it of like, okay, in addition to authenticating the person is like part of a company, you're authorized, you know, in general, to use the application, having the right controls to limit the use for certain functionality. So like the example, you know, we used before and talking about, like different users, as you have somebody who may file an expense report, and somebody who approves, you know, an expense report, well, that has to do with authorization, you know, what kind of ability somebody has in using your particular application. So anyway, it's something else you kind of just need to plan for, right from the beginning. And then protecting data, you know, encrypting data at, at rest, but also in transit. And so that's something I mean, we adopted TLS, at Microsoft, you know, a long time ago, when I was working on, you know, products related to unified communications, and basically encrypting those, you know, data streams. So I mean, that, encrypting the data, and then using the appropriate libraries, and random number generator, so there are random number generators that are called cryptographically, secure pseudo random number generators, or C spring or whatever. And you want to make sure that if you're using a random number generator, that it falls into that classification. And not just using, you know, some home grown crypto library, but something that's standard, something that's been peer reviewed, you know, and, and that it's a good foundation to build on. Another thing is like implementing logging and intrusion detection, and, you know, in the past, this was mainly for, like debugging, and troubleshooting. Now, you know, it's, it's an early warning indicator, you know, that somebody is coming after you, and trying to find a way they're trying to find attack vectors into your system. And so if you have effective logging, intrusion detection, which I think most enterprises do, you know, then you're able to say, okay, somebody is coming after us, what are they doing, and then, you know, develop kind of a mitigation strategy behind. So it's not just for, you know, debugging and code troubleshooting. And similar to using like C spring, you know, leverage security frameworks and libraries that are, you know, that are available, rather than trying to develop, you know, those from scratch. So, you know, the good news is because security is so critical anymore, there's a lot of tools out there, you know, frameworks and libraries to leverage, so take advantage of it. And then monitor error and exception handling, you know, so this used to be, I mean, you kind of have to think, if you're developing an application, especially if it has sensitive data in it, that somebody is coming after you, I mean, they're coming after you. And so you have to be careful what you share, you know, in, say, like a stack trace, you know, that might be okay, you want to put it a certain information in there, it'll help you, you know, with your error handling, you know, Exception Handling process, but you also don't want to expose externally information that would tell them too much about your environment, and basically some effective strategies to come after you. So anyway, that's just like, you know, just the top level discussion. I mean, literally, like cloud computing, and knowing the best practices of how to develop on the cloud, you really need to do professional study on developing secure code and stay current on on and keeping that as the best practice because it's, it's not going away. I mean, it's only going to get more and more intense and it's going to be a differentiator. I mean, it is now but it's going to continue to be a differentiator of Hey, you know, Who can we trust develop code that, you know, really is going to be very difficult to defeat? Okay, let's do knowledge check three here. Okay, you should have that. Okay, let's stop that and share the results. Okay. And so risk management matrix used to identify the top risks to track and develop mitigation plans to address that's certainly true. It's important to focus a lot of energy on stakeholders with low interest and low power because it'll be easy to keep satisfied. No, and I'm not trying to say like, totally ignore those people. I mean, they mean meet me to be you know, know what's going on with the application, but just don't don't forget the people with high energy or high interest in high power. Okay? Because the latency impact of encrypting data, you should only encrypt data at rest, not in transit as false, you know, just encrypt everything have all kinds authentication controls and authorization controls. I mean, it's just like, make security priority one. Okay, so, so here you go. Yeah, that's the second one. strong authentication methods including multi factor biometrics should be used. Yes. Okay. All right. Great. Okay. Okay, back at it here. Okay, so now we'll talk about the final exam. So the final exam will be a quiz, just like the midterm. You have an hour and a half to 90 minutes to complete it. And then the plan is to like discuss the answers from 730 to 8am. I'm not going to rush through that but I'll try to get done you know, as quickly as I can, so that it gives more time The fun, fun part, which is when you walk through your prototype apps, from eight to 850. So you know, want to have like 10 or 12 minutes for each team to be able to, you know, go through the application provide the context. And then the most important part is kind of do the sprint review, kind of walk through the application, and show us how it would be used. The final exam format is going to be 25, multiple choice questions, you know, for 50% of the grade and then 10, short answer. So again, and then I'll have like a diagram, I'll have a document that I will post where, you know, there could be other information or diagrams that you need to look at. And so I'll post that ahead of time. So you know, you can reference it or print it out. So important terms. So here are some important terms. And like I said, the last time with the midterm, thinking about the terms is probably showing up in the first part, you know, of the true false or multiple choice. So this is where you can kind of get by with rote memory, or looking up something quickly or whatever. Because, you know, it'll be like, true false, or multiple choice you're trying to find, okay, well, what's the, you know, what's the right answer? So, it's important to have an understanding of the item, a key word, or, you know, what I'm describing here. But then, the second part here is where you have to have a better understand you'll be kind of given a situation, and it's more of the practical application, you know, type of a question, where it's a deeper level of understanding. And so here are some of the things, you know, they're kind of key concepts from the course today, we talked about the lean startup and the business model canvas. And the whole idea behind that is how to help startups, you know, be successful and find a viable business model. And then once they do, they scale up their business after that. So you'd be familiar with that. We talked about several different parts of the market, you know, several tools from the market opportunity navigator process. And those worksheets, and the one I want you to focus your attention on is the attractiveness of a market. So you know, after the company says, Well, here's all the different markets we could go after, then they look at what which one's, you know, really attractive, either, you know, kind of like my financial standpoint, but also like, when she How hard was it going to be to go after that market? You know, so I kind of want you to understand that to a little deeper level, as you'll have to apply, you know, apply those concepts. You know, the business model canvas, there's a variety of different value propositions. And so, you know, what are those in which what makes, like those attractive? Understand the core values of the Agile Manifesto, you know, so that's pretty straightforward. And they were very clear, hey, we kind of favor this more over this other thing, or whatever. So what are those, you know, what are those core values that they identified that they thought were important and need to be part of any kind of Agile software development approaches, and then have been then applied? I mean, they actually, were true to that Manifesto. And you can find those, you know, values, if you look in Scrum and other you know, other agile techniques, understand how to scale Scrum to larger projects. Yes. So we kind of talked about that. We talked about Scrum, and a lot of detail. And then we talked about Nexus and Spotify. And so it's like, well, what what's different, you know, when you're going from like, okay, one small scrum team working on one small software project, to a whole bunch of Scrum teams collaborating? How does the standard Scrum process get modified to be able to handle that larger scale? Uh, you know, I had charts on like, what are the key characteristics and benefits of cloud computing? So kind of knowing that knowing the difference between virtualization of a public cloud data center, compared to a traditional enterprise IT data center so here, you know, you either remember cuz like, early on, you know, when, like I said, when when we were kind of managing the migration of applications from our it data center to Azure. A lot of people in the IT community at Microsoft, yeah, there's no difference. There's no benefit. There's I mean, clouds just a flash in the pan. I mean, there's nothing there. There's no there there. The reality is like, No, no, Matt, you're totally wrong. Okay. We get As you're you know, in your, in our data centers, we're virtualizing on a server, you know, and then maybe we could, you know, have different workloads on a given server or whatever, in a cloud data center, all that capacity is virtualized across the data center. And in addition, there's other data centers that can be leveraged, and you can move workloads back and forth, back and forth and have data stored in multiple locations. So just kind of understanding the difference between you know, virtualization traditionally, as, as it has been done in it data center, and then the cloud, because that's a, that's an important characteristic of that makes the cloud The reason the clouds growing so fast, and there's a reason for it. And that's because the utilization rates and the economies of scale are a lot higher in a public cloud data center. And that item that I'm just talking about, that's the main reason why, you know, because in an IT data center, the you know, you wouldn't have the near the utilization, I mean, so, utilization rates, even at a Microsoft data center were extremely low, you know, and it was best in class, you know, we were probably getting the most we could compare to other enterprises. And it's nothing compared to what you can do in a cloud data center, understand the differences between different cloud deployment models and be able to suggest, which wouldn't be the most beneficial for a particular customer. So you may be given a situation or customer, you know, certain context about a customer. And, you know, they're asking for your opinion of a cloud deployment model. And, you know, you need to be able to kind of answer a question related to that. What are the important differences between a public and a private cloud? So I had a specific chart on that, you know, or some, you know, there's some, some similarities, but also some differences. And we talked about DevOps, you know, so what are the key principles and practices behind the whole DevOps movement? You know, with con bond where they've got whip limits, you know, one of the things we talked about is that con bond is, you know, more flexible than, say Scrum. And so, like, how would you handle new and new requirements come in? How would a team that's basically using Khan bond and a combo or a Kanban, board, you know, handle that? And then compare and contrast? And I had a chart, you know, about this? How does Kanban and Scrum deal with work in progress? So they both have work in progress limits, you know, the method, but they vary. So how do they, how do they vary? One of the key practices of extreme programming is test driven development. So understand how that's used. And we kind of covered that tonight, you know, in addition, be familiar with the structure of vision statements for product and how to describe the product based on one, you know, so, you know, be able to look at a vision statement and be able to answer some questions about a product. Same thing with a feature tree, and a context diagram is that, you know, if you're shown a feature tree, you'd be able to describe some of the functionality because the functionality is all you know, it's all in the feature tree. So you just have to be able to look at a feature tree and be able to answer questions about the product functionality. And then the same thing on a context diagram, you know, where you're not given detail about the application itself, the internals, but you are told you're provided information about inputs and outputs, you know, from that system into other what are called external entities. So it could be people or systems, and then being able to answer questions about that. You know, talk about use case titles as well verb object, you know, like check in for flight, print, boarding passes, things like that. You may be given some, you know, user feedback, similar to what we did with the midterm, where you had to create user stories, based on some user feedback, you may be given user feedback and have to create use case titles. So not that that would be that hard, but you'd have to be able to figure it out what some use case titles might be based on the information you were given. And then, you know, once you have the use case, title, but you blow that out into a use case template, that has the trigger the preconditions, post conditions, you know, you may be given a use case template with the populated information, you know, for particular use case and then you'd have to answer some questions about it. And then, you know, you'd have to, you'd be given some information about stakeholder management, you know, And be able to answer some questions about stakeholders that you might want to focus your energy on based on a plot of stakeholder matrix. So anyway, it's not it certainly I'm not trying to say, ignore this stuff, but because there's some overlap or whatever, you know, with with the detail. But think think think true, false multiple choice. Short answer here. Okay? And in the short answer, it's, it's not, you know, it's you got, you have to think you have to kind of understand to a deeper level. Okay. So that is the final any, before I get into the project, any questions on the final and similar last time say, hey, if you have some questions, something's fuzzy, you know, I'm happy to have a call. And then I could record the call to and then I'd post it, so everybody would have access to it. Or if I do something, an email, I'll post it, so everybody has access to it. Any any questions on the final? Okay, all right. Think about it. If any one of these areas, you're like, Okay, I don't know what you're talking about here or whatever. And it's confusing, let me know. And I'm happy to provide additional information or some one on one help, you know, before the final next week. Okay. So, you know, you got the final project, deliverables coming up, whatever, we kind of covered this before. So we're gonna, you know, you need to have the prototype, which could be PowerPoint, or, you know, it could be something else, you know, when one team is going to use another tool, which is a fine, I mean, it's a prototyping tool. So that's fine. I mean, the only reason I use started with PowerPoint is because everybody's got access to it. And you can actually do a pretty decent job, you know, in in PowerPoint. But anyway, so that's due on lesson 10. And then we're going to do the walkthrough after the final site appreciated, every team could kind of figure out who's going to be your, you know, the person, the spokesperson, kind of going through the walkthrough and let me know, ahead of time, so I can call on the right people, you know, after we're done with the final review, and, you know, we get that process started. And then for the walkthrough sequence forever, who is gonna be the spokesperson for the team, you know, quickly introduce yourself and the team members, we kind of remember the application discussion, you know, from being from from before, but you're just a brief hey, here's the top level, you know, what we're doing with the application. And then, you know, if this was a real customer demo, describe like, who you'd be going after, you know, like, well, we want to do five, we got to do five of these, according to the Google Ventures sprint process, here are kind of five different customer types that we'd be going after. So we get a sense of, you know, who you know, who you were, who you'd be going after, and then don't make that like eight minutes, because you got to conduct the walkthrough. And so the most of the time needs to be spent and kind of walking through the application and kind of allowing us to kind of see it and understand how you structured it, and then answer questions on the app, you know, so I may have some questions, and maybe some other team, you know, classmates may have some questions or whatever she wanted, allow a little time at the end for that. And you know, prepare yourself that, I'm going to go back and refresh my memory of what your sprint questions were. I mean, one of the things that I kind of gave you guys feedback on is like, we just kind of starting this process should be like, Well, hey, what questions about our app? Do we really need to get answered to know if we're on to something special or not? And so I may go back and look at some of those sprint questions. And I'm not going to give you a super hard time, but I might bring, you know, in one question, say, Okay, well, how? How do you answer this question based on what you just demonstrated, or whatever. So you might want to refresh your memory on what your sprint questions were. And, you know, and maybe, maybe the understanding you'd come up with, and the whole purpose of this thing is that I think Google venture process is kind of interesting. You know, it's a quick way to kind of develop a prototype, get out there, you know, get it in front of a customer and get some feedback. But it's a totally new for you for what you're doing. So you might look back on that and go Yeah, you know, actually, we should have had these should have been the spring questions. That's okay. I mean, maybe that's something that, you know, you could get into as well as like, yeah, you know, here are some other squint questions we kind of wish we would have put down because it would have been more appropriate. Okay. So that's the walkthrough. And then we'll have the People's Choice Award or whatever. So I'm going to like do a poll, you'll vote on you know, what you what application you thought, you know, really rocked the world or whatever. And so we'll kind of know What the class thought, and, and so, and then I'll factor that in, I'm not exactly sure the weighting I'm going to include, but there'll be, there'll be some, there'll be part of the overall grade, you know, weighting is, whoever, you know, got the highest, second highest, you know, whatever People's Choice Award, something else that I haven't posted yet, but I will post in module 10 is a project team feedback form, whatever it is going to be really simple. And basically, what I'm, it'll probably be like an online quiz is to make it easier for me to tele, I'll figure out how I'm going to implement it or whatever. But the idea is to give you, you know, an opportunity to provide some feedback on the project. And, you know, if there's some people on the team, you felt went above and beyond whatever you'd like to recognize them, you know, feel free to do that. It's also an opportunity, if you felt like, some team members really weren't, you know, contributing fully, you can highlight that as well. I mean, the way I'm looking at the project is like, you know, the 80% cases, you know, you guys are, it's a group effort, and you're getting a group grade or whatever. However, you know, there's some knobs to turn of, like, Hey, you know, I mean, like, on projects I've been associated with, sometimes somebody just like a hero, I mean, they're just like, doing a lot of the work or whatever. And, you know, and then I want to recognize, hey, they have really stepped up and done some work. And so for those people, you know, may provide some extra credit or whatever. And then, you know, I hope this isn't the case, hopefully, everybody, you know, contributed fully or whatever. So you should use that other The second item is, it's kind of like, you know, if I see if I see from multiple people on the same team, that, you know, somebody didn't really fully contribute fully, you know, I'll factor that in the, in the Grade as well. So in general, the 80% rule is going to be a, you're going to get the same grade as everybody else on the team. But I do want to recognize people that kind of went above and beyond, and hopefully not, but you know, some people did not fully contribute, well, that'll be that'll be addressed as well. So anyway, look for that, you know, probably have that posted by Sunday night, or whatever. And it's going to be simple form. I mean, it's basically going to be just allow you to each individual person to identify, you know, categories have, like special performance or concerns they have with other team members. So that's that. Any, any questions on the project? And I think we're, we're getting near the final stages here. But any questions before we? We're gonna sign off here? And then yeah, I mean, not like, he got a lot of time. But you know, we'll have 10 minutes here. We'll be done early. Okay, cool. One, you know, I'm serious. You know, I didn't know when I first started this several years ago, I you know, I don't know what we're gonna what I'm gonna see or whatever. And I I've always been impressed. I mean, I've always been impressed with the, the creativity, you know, and and then actually, some stuff I, like, you know, that could actually, that could actually, I think, be successful could be a successful application, you know, so, who knows, you know, but anyway, I'm looking forward to seeing what you guys have come up with, again, any questions on the final or on the project? Let me know, on the two remaining homework assignments, like I say, I'm gonna check and find out exactly when I have that the grades in and since that's like, you know, it's graded automatically. I can kind of put that later, you know, and give you more time to finish that because I messed up on getting the quiz three, one posted, so that I should be able to remedy here over the weekend as well on the on the timing. Okay, all right, guys. Well, good. Well, let me know. Yeah. I'll be making time available this next week to answer any questions you have. So good luck with your study and with the project and I'll see you again, next next Thursday. Okay, okay. Bye. Bye. Bye. Bye. Thank you. Bye. Thank you. Have a good night. Thank you.
